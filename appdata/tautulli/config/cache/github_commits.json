{"github_data": {"url": "https://api.github.com/repos/Tautulli/Tautulli/compare/v2.12.3...ea6c6078df410f333a060016dfce18c21ad134c9", "html_url": "https://github.com/Tautulli/Tautulli/compare/v2.12.3...ea6c6078df410f333a060016dfce18c21ad134c9", "permalink_url": "https://github.com/Tautulli/Tautulli/compare/Tautulli:e9b1db1...Tautulli:ea6c607", "diff_url": "https://github.com/Tautulli/Tautulli/compare/v2.12.3...ea6c6078df410f333a060016dfce18c21ad134c9.diff", "patch_url": "https://github.com/Tautulli/Tautulli/compare/v2.12.3...ea6c6078df410f333a060016dfce18c21ad134c9.patch", "base_commit": {"sha": "e9b1db139e96f0d82ff7d047f3a91d5b45a69f45", "node_id": "C_kwDOAducuNoAKGU5YjFkYjEzOWU5NmYwZDgyZmY3ZDA0N2YzYTkxZDViNDVhNjlmNDU", "commit": {"author": {"name": "JonnyWong16", "email": "9099342+JonnyWong16@users.noreply.github.com", "date": "2023-04-14T18:50:55Z"}, "committer": {"name": "JonnyWong16", "email": "9099342+JonnyWong16@users.noreply.github.com", "date": "2023-04-14T18:50:55Z"}, "message": "v2.12.3", "tree": {"sha": "0cf867b6b8c2a4ae6b66bd018400ad8840128e1c", "url": "https://api.github.com/repos/Tautulli/Tautulli/git/trees/0cf867b6b8c2a4ae6b66bd018400ad8840128e1c"}, "url": "https://api.github.com/repos/Tautulli/Tautulli/git/commits/e9b1db139e96f0d82ff7d047f3a91d5b45a69f45", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEFPKZYCM7sDX3KZzmsfH5gHGEaXoFAmQ5oI8ACgkQsfH5gHGE\naXp3mQ//cy3SCKrLtvxAgDNXLdbap+oQHKRkBuLIpVGBPW2Tr+psT46GrD1Y4NFE\ndeOR8glxZ1cP5JRs0Vbd402rjWmAMMgvduQvT/XD2bls/BPx217k/uBBMMtEzMY7\nleMZXmOSLl+qb/yU/O2XNnFo/5fTGjFueU2fyH5jV79/8t+3v1V7tp948zdrD2tF\n+gY9sR+mHrLEGfMD6tfSTCZ+xjKsqGJje2PmaX7LNb3UqoR+WN+ZaMAbIJqRZx80\nK1z+MIsm/7BN1275NbJMhMN2Y7fTK5GxavpvEzs7Mhi62TMEJqtUL2zF5Z9Tkzq0\nxviGANOoH4YffQ7VigwMvVwGquzhZXXxqMh6w9yL/bI6JIupQY4+0yIwM4hzdb6n\n5urOzxeko/QWIcMb0cpG0j6poUgXLlulOfbXk9gzUGOcwC1gqIDrufSwFkBgdFLK\nVhuz5dwm9cYHJVp3SlfNNfccENJZ+cFsGCKrEqCRm7753AODJPCqL1d/US+iC5qR\nDQze26dtLia8I2B/0Z+sEqbW52YHF7Mk9uPK4xh/ZBnHW2EFe1PfXFJriC9TrDjY\nBBTel62Z8VyL+h7OCoT5Cctwk53WY0yG2G9Caqti9AucWOvDqiapnlla4IopNJHa\ns9OuZ15te9shsZRXZXH53/Ixu3vLFRYH8RZD3lGEa+CVtJA/w2I=\n=HYcY\n-----END PGP SIGNATURE-----", "payload": "tree 0cf867b6b8c2a4ae6b66bd018400ad8840128e1c\nparent 99afb7392b833d754c5efaa1188552d51b2cc391\nauthor JonnyWong16 <9099342+JonnyWong16@users.noreply.github.com> 1681498255 -0700\ncommitter JonnyWong16 <9099342+JonnyWong16@users.noreply.github.com> 1681498255 -0700\n\nv2.12.3\n\n"}}, "url": "https://api.github.com/repos/Tautulli/Tautulli/commits/e9b1db139e96f0d82ff7d047f3a91d5b45a69f45", "html_url": "https://github.com/Tautulli/Tautulli/commit/e9b1db139e96f0d82ff7d047f3a91d5b45a69f45", "comments_url": "https://api.github.com/repos/Tautulli/Tautulli/commits/e9b1db139e96f0d82ff7d047f3a91d5b45a69f45/comments", "author": {"login": "JonnyWong16", "id": 9099342, "node_id": "MDQ6VXNlcjkwOTkzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/9099342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JonnyWong16", "html_url": "https://github.com/JonnyWong16", "followers_url": "https://api.github.com/users/JonnyWong16/followers", "following_url": "https://api.github.com/users/JonnyWong16/following{/other_user}", "gists_url": "https://api.github.com/users/JonnyWong16/gists{/gist_id}", "starred_url": "https://api.github.com/users/JonnyWong16/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JonnyWong16/subscriptions", "organizations_url": "https://api.github.com/users/JonnyWong16/orgs", "repos_url": "https://api.github.com/users/JonnyWong16/repos", "events_url": "https://api.github.com/users/JonnyWong16/events{/privacy}", "received_events_url": "https://api.github.com/users/JonnyWong16/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JonnyWong16", "id": 9099342, "node_id": "MDQ6VXNlcjkwOTkzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/9099342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JonnyWong16", "html_url": "https://github.com/JonnyWong16", "followers_url": "https://api.github.com/users/JonnyWong16/followers", "following_url": "https://api.github.com/users/JonnyWong16/following{/other_user}", "gists_url": "https://api.github.com/users/JonnyWong16/gists{/gist_id}", "starred_url": "https://api.github.com/users/JonnyWong16/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JonnyWong16/subscriptions", "organizations_url": "https://api.github.com/users/JonnyWong16/orgs", "repos_url": "https://api.github.com/users/JonnyWong16/repos", "events_url": "https://api.github.com/users/JonnyWong16/events{/privacy}", "received_events_url": "https://api.github.com/users/JonnyWong16/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99afb7392b833d754c5efaa1188552d51b2cc391", "url": "https://api.github.com/repos/Tautulli/Tautulli/commits/99afb7392b833d754c5efaa1188552d51b2cc391", "html_url": "https://github.com/Tautulli/Tautulli/commit/99afb7392b833d754c5efaa1188552d51b2cc391"}]}, "merge_base_commit": {"sha": "e9b1db139e96f0d82ff7d047f3a91d5b45a69f45", "node_id": "C_kwDOAducuNoAKGU5YjFkYjEzOWU5NmYwZDgyZmY3ZDA0N2YzYTkxZDViNDVhNjlmNDU", "commit": {"author": {"name": "JonnyWong16", "email": "9099342+JonnyWong16@users.noreply.github.com", "date": "2023-04-14T18:50:55Z"}, "committer": {"name": "JonnyWong16", "email": "9099342+JonnyWong16@users.noreply.github.com", "date": "2023-04-14T18:50:55Z"}, "message": "v2.12.3", "tree": {"sha": "0cf867b6b8c2a4ae6b66bd018400ad8840128e1c", "url": "https://api.github.com/repos/Tautulli/Tautulli/git/trees/0cf867b6b8c2a4ae6b66bd018400ad8840128e1c"}, "url": "https://api.github.com/repos/Tautulli/Tautulli/git/commits/e9b1db139e96f0d82ff7d047f3a91d5b45a69f45", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEFPKZYCM7sDX3KZzmsfH5gHGEaXoFAmQ5oI8ACgkQsfH5gHGE\naXp3mQ//cy3SCKrLtvxAgDNXLdbap+oQHKRkBuLIpVGBPW2Tr+psT46GrD1Y4NFE\ndeOR8glxZ1cP5JRs0Vbd402rjWmAMMgvduQvT/XD2bls/BPx217k/uBBMMtEzMY7\nleMZXmOSLl+qb/yU/O2XNnFo/5fTGjFueU2fyH5jV79/8t+3v1V7tp948zdrD2tF\n+gY9sR+mHrLEGfMD6tfSTCZ+xjKsqGJje2PmaX7LNb3UqoR+WN+ZaMAbIJqRZx80\nK1z+MIsm/7BN1275NbJMhMN2Y7fTK5GxavpvEzs7Mhi62TMEJqtUL2zF5Z9Tkzq0\nxviGANOoH4YffQ7VigwMvVwGquzhZXXxqMh6w9yL/bI6JIupQY4+0yIwM4hzdb6n\n5urOzxeko/QWIcMb0cpG0j6poUgXLlulOfbXk9gzUGOcwC1gqIDrufSwFkBgdFLK\nVhuz5dwm9cYHJVp3SlfNNfccENJZ+cFsGCKrEqCRm7753AODJPCqL1d/US+iC5qR\nDQze26dtLia8I2B/0Z+sEqbW52YHF7Mk9uPK4xh/ZBnHW2EFe1PfXFJriC9TrDjY\nBBTel62Z8VyL+h7OCoT5Cctwk53WY0yG2G9Caqti9AucWOvDqiapnlla4IopNJHa\ns9OuZ15te9shsZRXZXH53/Ixu3vLFRYH8RZD3lGEa+CVtJA/w2I=\n=HYcY\n-----END PGP SIGNATURE-----", "payload": "tree 0cf867b6b8c2a4ae6b66bd018400ad8840128e1c\nparent 99afb7392b833d754c5efaa1188552d51b2cc391\nauthor JonnyWong16 <9099342+JonnyWong16@users.noreply.github.com> 1681498255 -0700\ncommitter JonnyWong16 <9099342+JonnyWong16@users.noreply.github.com> 1681498255 -0700\n\nv2.12.3\n\n"}}, "url": "https://api.github.com/repos/Tautulli/Tautulli/commits/e9b1db139e96f0d82ff7d047f3a91d5b45a69f45", "html_url": "https://github.com/Tautulli/Tautulli/commit/e9b1db139e96f0d82ff7d047f3a91d5b45a69f45", "comments_url": "https://api.github.com/repos/Tautulli/Tautulli/commits/e9b1db139e96f0d82ff7d047f3a91d5b45a69f45/comments", "author": {"login": "JonnyWong16", "id": 9099342, "node_id": "MDQ6VXNlcjkwOTkzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/9099342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JonnyWong16", "html_url": "https://github.com/JonnyWong16", "followers_url": "https://api.github.com/users/JonnyWong16/followers", "following_url": "https://api.github.com/users/JonnyWong16/following{/other_user}", "gists_url": "https://api.github.com/users/JonnyWong16/gists{/gist_id}", "starred_url": "https://api.github.com/users/JonnyWong16/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JonnyWong16/subscriptions", "organizations_url": "https://api.github.com/users/JonnyWong16/orgs", "repos_url": "https://api.github.com/users/JonnyWong16/repos", "events_url": "https://api.github.com/users/JonnyWong16/events{/privacy}", "received_events_url": "https://api.github.com/users/JonnyWong16/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JonnyWong16", "id": 9099342, "node_id": "MDQ6VXNlcjkwOTkzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/9099342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JonnyWong16", "html_url": "https://github.com/JonnyWong16", "followers_url": "https://api.github.com/users/JonnyWong16/followers", "following_url": "https://api.github.com/users/JonnyWong16/following{/other_user}", "gists_url": "https://api.github.com/users/JonnyWong16/gists{/gist_id}", "starred_url": "https://api.github.com/users/JonnyWong16/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JonnyWong16/subscriptions", "organizations_url": "https://api.github.com/users/JonnyWong16/orgs", "repos_url": "https://api.github.com/users/JonnyWong16/repos", "events_url": "https://api.github.com/users/JonnyWong16/events{/privacy}", "received_events_url": "https://api.github.com/users/JonnyWong16/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99afb7392b833d754c5efaa1188552d51b2cc391", "url": "https://api.github.com/repos/Tautulli/Tautulli/commits/99afb7392b833d754c5efaa1188552d51b2cc391", "html_url": "https://github.com/Tautulli/Tautulli/commit/99afb7392b833d754c5efaa1188552d51b2cc391"}]}, "status": "ahead", "ahead_by": 5, "behind_by": 0, "total_commits": 5, "commits": [{"sha": "3b3c59c4bb8e58d76df01348151d869ee7ca1105", "node_id": "C_kwDOAducuNoAKDNiM2M1OWM0YmI4ZTU4ZDc2ZGYwMTM0ODE1MWQ4NjllZTdjYTExMDU", "commit": {"author": {"name": "JonnyWong16", "email": "9099342+JonnyWong16@users.noreply.github.com", "date": "2023-04-17T19:50:52Z"}, "committer": {"name": "JonnyWong16", "email": "9099342+JonnyWong16@users.noreply.github.com", "date": "2023-04-17T19:50:52Z"}, "message": "Set view offset equal to duration if stopped within the last 10 sec\n\n* Plex reports the view offset every 10 seconds, so the view offset at the end of stream can be short by up to 10 seconds.", "tree": {"sha": "72a0ef604c0204b09a99896573df4243b21bb795", "url": "https://api.github.com/repos/Tautulli/Tautulli/git/trees/72a0ef604c0204b09a99896573df4243b21bb795"}, "url": "https://api.github.com/repos/Tautulli/Tautulli/git/commits/3b3c59c4bb8e58d76df01348151d869ee7ca1105", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEFPKZYCM7sDX3KZzmsfH5gHGEaXoFAmQ9oxwACgkQsfH5gHGE\naXrOpQ//eQaoh1sSGvtxrZaeCjP+MetGNh6wen9zyyOjd+Ghs5/KqshWyRopZC5y\nT+lkghBqNBcwcbmOdK+oJC3oDvIwpjTkWJQRJ4p6AG+C+56SDHFV5Oafu0WRhdrZ\nAey8V474x3nd70OsaHDnbgZmf2PtNFFKTNWiVTXHtfuz+WuX8vTJ2en1Dd5L23R9\nZgOPkcTbdgHDpkCsv0l11eYuQQIOGD3rjasL528yxOUG7rCPZLgmC1tGmXBgNf22\n7gfh7VGLvyhTaW5HQYFeair0ToMZXdGeWjtjAydLUbVKpxa4Y8GnsK96FndUOUy8\nVmsSTM1oGawujojvPUNtaO1MTwBrleNVc1pD4ob+p9Hbu326nTOAY319eh5++IQQ\ngSX4Iek/TFiYgqHEwyc2Bm6Du9q4Iuo+8ilP/y2Y4FXD8c8fO86tcEtg9lmjhXTQ\nCBE2SS+5VmrunBfSxOMGaKtaZfaF2MHvapBA3VWmI0aRQfkYJzJCogZPlU+YnV1R\nUTXv+1zmqZRUmnDZXhv+do6mIy7Evu/BdIKpQHjDndVFvVxbg1LfeHlsRDqpMm9f\n9HOkJs1we2x1HZG8NipASfb2ue55pEV3qjYURsR3DC3AeFCxwQalD4U138PkHL2b\ncbbvvzY2ShpA8EgPe6wPjfSyJBiosqPN/uo9uuqQP1vLjIvF5T0=\n=y3iM\n-----END PGP SIGNATURE-----", "payload": "tree 72a0ef604c0204b09a99896573df4243b21bb795\nparent e9b1db139e96f0d82ff7d047f3a91d5b45a69f45\nauthor JonnyWong16 <9099342+JonnyWong16@users.noreply.github.com> 1681761052 -0700\ncommitter JonnyWong16 <9099342+JonnyWong16@users.noreply.github.com> 1681761052 -0700\n\nSet view offset equal to duration if stopped within the last 10 sec\n\n* Plex reports the view offset every 10 seconds, so the view offset at the end of stream can be short by up to 10 seconds.\n"}}, "url": "https://api.github.com/repos/Tautulli/Tautulli/commits/3b3c59c4bb8e58d76df01348151d869ee7ca1105", "html_url": "https://github.com/Tautulli/Tautulli/commit/3b3c59c4bb8e58d76df01348151d869ee7ca1105", "comments_url": "https://api.github.com/repos/Tautulli/Tautulli/commits/3b3c59c4bb8e58d76df01348151d869ee7ca1105/comments", "author": {"login": "JonnyWong16", "id": 9099342, "node_id": "MDQ6VXNlcjkwOTkzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/9099342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JonnyWong16", "html_url": "https://github.com/JonnyWong16", "followers_url": "https://api.github.com/users/JonnyWong16/followers", "following_url": "https://api.github.com/users/JonnyWong16/following{/other_user}", "gists_url": "https://api.github.com/users/JonnyWong16/gists{/gist_id}", "starred_url": "https://api.github.com/users/JonnyWong16/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JonnyWong16/subscriptions", "organizations_url": "https://api.github.com/users/JonnyWong16/orgs", "repos_url": "https://api.github.com/users/JonnyWong16/repos", "events_url": "https://api.github.com/users/JonnyWong16/events{/privacy}", "received_events_url": "https://api.github.com/users/JonnyWong16/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JonnyWong16", "id": 9099342, "node_id": "MDQ6VXNlcjkwOTkzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/9099342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JonnyWong16", "html_url": "https://github.com/JonnyWong16", "followers_url": "https://api.github.com/users/JonnyWong16/followers", "following_url": "https://api.github.com/users/JonnyWong16/following{/other_user}", "gists_url": "https://api.github.com/users/JonnyWong16/gists{/gist_id}", "starred_url": "https://api.github.com/users/JonnyWong16/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JonnyWong16/subscriptions", "organizations_url": "https://api.github.com/users/JonnyWong16/orgs", "repos_url": "https://api.github.com/users/JonnyWong16/repos", "events_url": "https://api.github.com/users/JonnyWong16/events{/privacy}", "received_events_url": "https://api.github.com/users/JonnyWong16/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9b1db139e96f0d82ff7d047f3a91d5b45a69f45", "url": "https://api.github.com/repos/Tautulli/Tautulli/commits/e9b1db139e96f0d82ff7d047f3a91d5b45a69f45", "html_url": "https://github.com/Tautulli/Tautulli/commit/e9b1db139e96f0d82ff7d047f3a91d5b45a69f45"}]}, {"sha": "fe4fba353e600d45ec30d381f60b68afdc67f8b5", "node_id": "C_kwDOAducuNoAKGZlNGZiYTM1M2U2MDBkNDVlYzMwZDM4MWY2MGI2OGFmZGM2N2Y4YjU", "commit": {"author": {"name": "JonnyWong16", "email": "9099342+JonnyWong16@users.noreply.github.com", "date": "2023-04-20T15:50:41Z"}, "committer": {"name": "JonnyWong16", "email": "9099342+JonnyWong16@users.noreply.github.com", "date": "2023-04-20T15:50:41Z"}, "message": "Catch KeyError on import db version", "tree": {"sha": "e7d0e22d6d1d9923d7ec7ec3bb59084c4850b23b", "url": "https://api.github.com/repos/Tautulli/Tautulli/git/trees/e7d0e22d6d1d9923d7ec7ec3bb59084c4850b23b"}, "url": "https://api.github.com/repos/Tautulli/Tautulli/git/commits/fe4fba353e600d45ec30d381f60b68afdc67f8b5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEFPKZYCM7sDX3KZzmsfH5gHGEaXoFAmRBX1EACgkQsfH5gHGE\naXrQ4A/9Ff8iNbapWBfqNOOnMAaVHTGpp984MOJ0Admnvr1D8/f3qA5ykjrLBfA0\n+GATJ56JStdEb7ezx8KzkdYxMpevVEiR6Rtrr8mo8m960Q+6N1SjbcD9AwWJ6pNN\ndy4aVmNCDx5Fx3J6nOf2wUdYrLOte3Ufmb3KEqOVGjBCxgW64w612oDiNvAL/JCn\nqi8dsNE71CVKkglDKu7FkT92vSyqXESe82wtf611HGTJESWjKpSgvdWN/X/t92ii\nplYcgwNg3az5y44x2ay3jpk6v7oWyPsOgROCq1WA5nXIavv0unbnZEYS7ZbG7dIq\n1wc8OF2JWNLtcSTQNLxuusYKFTJZM/CJexTm4zOCLzQOrLL+DQvHeduf3Irkyc7C\nJUTcUPeMmyi1pvp4msPmeY33uui7kjfDsSCZrOsRNImd7kozBaHPAsZv2wMBEO/z\nelzyNBwzA3i2wic5Pi38B/kuRFrg/dY3vMx4BJrcYb4AjJin9G0wpqgq2fTRbxg6\ndNyfyhVHsgFX1mJ7PIzidXD5gIZEI0SSo4sAPUApGIejTrLnR59Rel0sJdBzUKut\nBfMFp2A7lt1eOchns3w0mbwRzU8moFtBk4gBP2woiHFiThmzCh/734YFqcnOQ0U/\n8BnCdLD1zZJIB3LkJ+JD7Qpb8rhzcd0/qV1t4aqKNxesO2FZVOI=\n=LJfo\n-----END PGP SIGNATURE-----", "payload": "tree e7d0e22d6d1d9923d7ec7ec3bb59084c4850b23b\nparent 3b3c59c4bb8e58d76df01348151d869ee7ca1105\nauthor JonnyWong16 <9099342+JonnyWong16@users.noreply.github.com> 1682005841 -0700\ncommitter JonnyWong16 <9099342+JonnyWong16@users.noreply.github.com> 1682005841 -0700\n\nCatch KeyError on import db version\n\n"}}, "url": "https://api.github.com/repos/Tautulli/Tautulli/commits/fe4fba353e600d45ec30d381f60b68afdc67f8b5", "html_url": "https://github.com/Tautulli/Tautulli/commit/fe4fba353e600d45ec30d381f60b68afdc67f8b5", "comments_url": "https://api.github.com/repos/Tautulli/Tautulli/commits/fe4fba353e600d45ec30d381f60b68afdc67f8b5/comments", "author": {"login": "JonnyWong16", "id": 9099342, "node_id": "MDQ6VXNlcjkwOTkzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/9099342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JonnyWong16", "html_url": "https://github.com/JonnyWong16", "followers_url": "https://api.github.com/users/JonnyWong16/followers", "following_url": "https://api.github.com/users/JonnyWong16/following{/other_user}", "gists_url": "https://api.github.com/users/JonnyWong16/gists{/gist_id}", "starred_url": "https://api.github.com/users/JonnyWong16/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JonnyWong16/subscriptions", "organizations_url": "https://api.github.com/users/JonnyWong16/orgs", "repos_url": "https://api.github.com/users/JonnyWong16/repos", "events_url": "https://api.github.com/users/JonnyWong16/events{/privacy}", "received_events_url": "https://api.github.com/users/JonnyWong16/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JonnyWong16", "id": 9099342, "node_id": "MDQ6VXNlcjkwOTkzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/9099342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JonnyWong16", "html_url": "https://github.com/JonnyWong16", "followers_url": "https://api.github.com/users/JonnyWong16/followers", "following_url": "https://api.github.com/users/JonnyWong16/following{/other_user}", "gists_url": "https://api.github.com/users/JonnyWong16/gists{/gist_id}", "starred_url": "https://api.github.com/users/JonnyWong16/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JonnyWong16/subscriptions", "organizations_url": "https://api.github.com/users/JonnyWong16/orgs", "repos_url": "https://api.github.com/users/JonnyWong16/repos", "events_url": "https://api.github.com/users/JonnyWong16/events{/privacy}", "received_events_url": "https://api.github.com/users/JonnyWong16/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b3c59c4bb8e58d76df01348151d869ee7ca1105", "url": "https://api.github.com/repos/Tautulli/Tautulli/commits/3b3c59c4bb8e58d76df01348151d869ee7ca1105", "html_url": "https://github.com/Tautulli/Tautulli/commit/3b3c59c4bb8e58d76df01348151d869ee7ca1105"}]}, {"sha": "3a1d6322aebfe63bb0160b4c85b3ecc785ce2cba", "node_id": "C_kwDOAducuNoAKDNhMWQ2MzIyYWViZmU2M2JiMDE2MGI0Yzg1YjNlY2M3ODVjZTJjYmE", "commit": {"author": {"name": "JonnyWong16", "email": "9099342+JonnyWong16@users.noreply.github.com", "date": "2023-05-05T22:56:32Z"}, "committer": {"name": "JonnyWong16", "email": "9099342+JonnyWong16@users.noreply.github.com", "date": "2023-05-05T22:57:33Z"}, "message": "Add return ID for async API calls\n\n* export_id, notification_id, and newsletter_notification_d", "tree": {"sha": "4819043da44cd43998a9ea12f56bfc4df7238797", "url": "https://api.github.com/repos/Tautulli/Tautulli/git/trees/4819043da44cd43998a9ea12f56bfc4df7238797"}, "url": "https://api.github.com/repos/Tautulli/Tautulli/git/commits/3a1d6322aebfe63bb0160b4c85b3ecc785ce2cba", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEFPKZYCM7sDX3KZzmsfH5gHGEaXoFAmRVid0ACgkQsfH5gHGE\naXpOjg/+P0jbcfAPrBFRwloJxJvs9chn0trncxsWAHbIg9tH73l/KKD0cYTdr7rj\nCubk5nN2tQ9D4IGn8/ng3ZYYXx+uFV8dHjfufRVU0rpj0B10jySJjEPW+6lfV1Nv\n/fjxUQm8V6f3xPTfUwHR9qab/sET3MkAcJ6/SH8xFsDwje8EAyxEQFsdBWa1reD6\nCYKEAn3U5brcc1EKIjnGBb6Dg9eEscXceDZw+bZGzWp2md3OE0VgDetIwIcvOpqR\nfmmLdSwi7pqpvdXAewz5w4ync9/3komOR6M2cQLM9MmRVZYZvMUAcrV0woWvW93b\nobnKC2YbLMR5Cy9xOiG63vyG1Sr0O785NJo+wtm0wTPclyKGu182VBfPJegeU4bj\ndiUN1QjuehUwBIpoyLd6MTjcCwJQlPcYnma4V6GVGUiQ4h0oHkgnaKVviB0GacNQ\nwsub1D0qNKisRRcjAwolCcIfC3FpTRRkZmTL6NWuVkaZCuwMR1/dwfMSL1ISKWCg\ndM6428Mdoj5rWT+vekGzC2PVuFQEW2JGh+VXyg/u13ylfb3fpmpZrkk0a5IexYN/\nHuLO70MCWin1HTo2S3XO+k04X1GqLI7wuWBOfVAJc0pPmzhim1a3DSZledMBVzw7\nIOQkjo3tEwM7jl/J3g5twY5ycxjbmdv4hevD5BTbbRP0aLnVT5Y=\n=OW1r\n-----END PGP SIGNATURE-----", "payload": "tree 4819043da44cd43998a9ea12f56bfc4df7238797\nparent fe4fba353e600d45ec30d381f60b68afdc67f8b5\nauthor JonnyWong16 <9099342+JonnyWong16@users.noreply.github.com> 1683327392 -0700\ncommitter JonnyWong16 <9099342+JonnyWong16@users.noreply.github.com> 1683327453 -0700\n\nAdd return ID for async API calls\n\n* export_id, notification_id, and newsletter_notification_d\n"}}, "url": "https://api.github.com/repos/Tautulli/Tautulli/commits/3a1d6322aebfe63bb0160b4c85b3ecc785ce2cba", "html_url": "https://github.com/Tautulli/Tautulli/commit/3a1d6322aebfe63bb0160b4c85b3ecc785ce2cba", "comments_url": "https://api.github.com/repos/Tautulli/Tautulli/commits/3a1d6322aebfe63bb0160b4c85b3ecc785ce2cba/comments", "author": {"login": "JonnyWong16", "id": 9099342, "node_id": "MDQ6VXNlcjkwOTkzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/9099342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JonnyWong16", "html_url": "https://github.com/JonnyWong16", "followers_url": "https://api.github.com/users/JonnyWong16/followers", "following_url": "https://api.github.com/users/JonnyWong16/following{/other_user}", "gists_url": "https://api.github.com/users/JonnyWong16/gists{/gist_id}", "starred_url": "https://api.github.com/users/JonnyWong16/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JonnyWong16/subscriptions", "organizations_url": "https://api.github.com/users/JonnyWong16/orgs", "repos_url": "https://api.github.com/users/JonnyWong16/repos", "events_url": "https://api.github.com/users/JonnyWong16/events{/privacy}", "received_events_url": "https://api.github.com/users/JonnyWong16/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JonnyWong16", "id": 9099342, "node_id": "MDQ6VXNlcjkwOTkzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/9099342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JonnyWong16", "html_url": "https://github.com/JonnyWong16", "followers_url": "https://api.github.com/users/JonnyWong16/followers", "following_url": "https://api.github.com/users/JonnyWong16/following{/other_user}", "gists_url": "https://api.github.com/users/JonnyWong16/gists{/gist_id}", "starred_url": "https://api.github.com/users/JonnyWong16/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JonnyWong16/subscriptions", "organizations_url": "https://api.github.com/users/JonnyWong16/orgs", "repos_url": "https://api.github.com/users/JonnyWong16/repos", "events_url": "https://api.github.com/users/JonnyWong16/events{/privacy}", "received_events_url": "https://api.github.com/users/JonnyWong16/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe4fba353e600d45ec30d381f60b68afdc67f8b5", "url": "https://api.github.com/repos/Tautulli/Tautulli/commits/fe4fba353e600d45ec30d381f60b68afdc67f8b5", "html_url": "https://github.com/Tautulli/Tautulli/commit/fe4fba353e600d45ec30d381f60b68afdc67f8b5"}]}, {"sha": "f39b9f908701feed62a22c30fdd558f5b3b3c979", "node_id": "C_kwDOAducuNoAKGYzOWI5ZjkwODcwMWZlZWQ2MmEyMmMzMGZkZDU1OGY1YjNiM2M5Nzk", "commit": {"author": {"name": "JonnyWong16", "email": "9099342+JonnyWong16@users.noreply.github.com", "date": "2023-05-15T18:03:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-15T18:03:26Z"}, "message": "Fix SQLite Double-Quoted Strings (#2057)\n\n* Fix __init__.py\r\n\r\n* Fix activity_pinger.py\r\n\r\n* Fix activity_processor.py\r\n\r\n* Fix database.py\r\n\r\n* Fix datafactory.py\r\n\r\n* Fix exporter.py\r\n\r\n* Fix graphs.py\r\n\r\n* Fix libraries.py\r\n\r\n* Fix mobile_app.py\r\n\r\n* Fix newsletter_handler.py\r\n\r\n* Fix newsletters.py\r\n\r\n* Fix notification_handler.py\r\n\r\n* Fix notifiers.py\r\n\r\n* Fix plexivity_import.py\r\n\r\n* Fix plexwatch_import.py\r\n\r\n* Fix users.py\r\n\r\n* Fix webauth.py", "tree": {"sha": "48ed82a8fffc03a97cfcad253ad9bb6d5e7d9580", "url": "https://api.github.com/repos/Tautulli/Tautulli/git/trees/48ed82a8fffc03a97cfcad253ad9bb6d5e7d9580"}, "url": "https://api.github.com/repos/Tautulli/Tautulli/git/commits/f39b9f908701feed62a22c30fdd558f5b3b3c979", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkYnPuCRBK7hj4Ov3rIwAAHc4IAE5rSL+IHCJqvrKfCWyDjLlx\nFsHsmIDIa3lD3VzgCLSONCk/dPUSTbSbVXA7OZ+DzRhR9G7lc+TfMx7J9WeUlsH6\nLCtvDc1xJQvHCEjzSWnPanT/IdfZr3D3E5FtsD6N/xr0gMh0/le6YXR5Wnd+NXJp\nnJUFu4kf25lJMV9jqm3rmO8G0IMhmE3rxw1ZQKyMZg35brJVu6VczIfDsEsgR+eO\nfT5bD2HEwZe6plBD2Hw+VDfNznI4kBiXg1kb/fh8XtM4dyTFwny5LCarwAaBKZZ+\nxLsAHrWn64QgZJ3Ipxpj3kdd0c0zbP4nJRlukjOVp7TAYV1Z2BCA9GyUglvOYiQ=\n=08le\n-----END PGP SIGNATURE-----\n", "payload": "tree 48ed82a8fffc03a97cfcad253ad9bb6d5e7d9580\nparent 3a1d6322aebfe63bb0160b4c85b3ecc785ce2cba\nauthor JonnyWong16 <9099342+JonnyWong16@users.noreply.github.com> 1684173806 -0700\ncommitter GitHub <noreply@github.com> 1684173806 -0700\n\nFix SQLite Double-Quoted Strings (#2057)\n\n* Fix __init__.py\r\n\r\n* Fix activity_pinger.py\r\n\r\n* Fix activity_processor.py\r\n\r\n* Fix database.py\r\n\r\n* Fix datafactory.py\r\n\r\n* Fix exporter.py\r\n\r\n* Fix graphs.py\r\n\r\n* Fix libraries.py\r\n\r\n* Fix mobile_app.py\r\n\r\n* Fix newsletter_handler.py\r\n\r\n* Fix newsletters.py\r\n\r\n* Fix notification_handler.py\r\n\r\n* Fix notifiers.py\r\n\r\n* Fix plexivity_import.py\r\n\r\n* Fix plexwatch_import.py\r\n\r\n* Fix users.py\r\n\r\n* Fix webauth.py"}}, "url": "https://api.github.com/repos/Tautulli/Tautulli/commits/f39b9f908701feed62a22c30fdd558f5b3b3c979", "html_url": "https://github.com/Tautulli/Tautulli/commit/f39b9f908701feed62a22c30fdd558f5b3b3c979", "comments_url": "https://api.github.com/repos/Tautulli/Tautulli/commits/f39b9f908701feed62a22c30fdd558f5b3b3c979/comments", "author": {"login": "JonnyWong16", "id": 9099342, "node_id": "MDQ6VXNlcjkwOTkzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/9099342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JonnyWong16", "html_url": "https://github.com/JonnyWong16", "followers_url": "https://api.github.com/users/JonnyWong16/followers", "following_url": "https://api.github.com/users/JonnyWong16/following{/other_user}", "gists_url": "https://api.github.com/users/JonnyWong16/gists{/gist_id}", "starred_url": "https://api.github.com/users/JonnyWong16/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JonnyWong16/subscriptions", "organizations_url": "https://api.github.com/users/JonnyWong16/orgs", "repos_url": "https://api.github.com/users/JonnyWong16/repos", "events_url": "https://api.github.com/users/JonnyWong16/events{/privacy}", "received_events_url": "https://api.github.com/users/JonnyWong16/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a1d6322aebfe63bb0160b4c85b3ecc785ce2cba", "url": "https://api.github.com/repos/Tautulli/Tautulli/commits/3a1d6322aebfe63bb0160b4c85b3ecc785ce2cba", "html_url": "https://github.com/Tautulli/Tautulli/commit/3a1d6322aebfe63bb0160b4c85b3ecc785ce2cba"}]}, {"sha": "ea6c6078df410f333a060016dfce18c21ad134c9", "node_id": "C_kwDOAducuNoAKGVhNmM2MDc4ZGY0MTBmMzMzYTA2MDAxNmRmY2UxOGMyMWFkMTM0Yzk", "commit": {"author": {"name": "JonnyWong16", "email": "9099342+JonnyWong16@users.noreply.github.com", "date": "2023-05-23T17:03:36Z"}, "committer": {"name": "JonnyWong16", "email": "9099342+JonnyWong16@users.noreply.github.com", "date": "2023-05-23T17:03:36Z"}, "message": "v2.12.4", "tree": {"sha": "3401c664a191d4087f44cf7defa7dec98be449c1", "url": "https://api.github.com/repos/Tautulli/Tautulli/git/trees/3401c664a191d4087f44cf7defa7dec98be449c1"}, "url": "https://api.github.com/repos/Tautulli/Tautulli/git/commits/ea6c6078df410f333a060016dfce18c21ad134c9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEFPKZYCM7sDX3KZzmsfH5gHGEaXoFAmRs8egACgkQsfH5gHGE\naXoIGw/+K+PZY271zWw/t2bEHURAVI2m4O1GOGHFga+gr9qczbo9CnGo1UU7BbzC\nJ1IrvBprgXLFv5Isd/9E2VzwmysuOyOcM8jgcuL8K+d9v3g/6fJ00izLON9/l36K\nqi/3uQWnVP+HnZxtp8msDEY026XwzmMpOHw69wKSSj9j1M7YQ1SQoB0o3lIMwqxq\nEFXrBFmsNmKeTB5EXqxuZoTz/+Ft+DL/WwankRWzmIyaLlqFrx01FUp5fIlUMfNK\ngQpNaRm85c4PQ9nuhNPUMwpa/DhkJggdOd4NDLlBJbwPLyZ2by7IS8BzF9w+yMPO\nuxPNbpNFbmb3SmDFrgBUDEGIVaYza4KPCGvDJC0xpWj/BSlpVdarEc+WrXm0WWFo\n1/ZluCHhRWrHjmkWSNR9VsLX3fPHL1SFc/4dBUZzJDXLkrxd7nFaigrpiHFTu5t8\npKTwXmjrWWmVwTFN89RpNQsPnK1LfVctmIz4H5TtTgLiHxHgJLYdpwJAzWo4i7gS\nC5FNpjo9YhXTTtGnVmbDg5++furVYFIuYZsIYz716SAXAjxzWoWTVri5Pmx4x0Sf\ngwtsITuvLgsc1vwncDbB78CrwPvKdiqSZgqVdOuFSep18tG7Es0LBnPXvhfBi6GA\nGae3Dy7LMfzG+D/EsswSK2j0mX9N1AzpXEVyoawdzfzJziIMinA=\n=mnLA\n-----END PGP SIGNATURE-----", "payload": "tree 3401c664a191d4087f44cf7defa7dec98be449c1\nparent f39b9f908701feed62a22c30fdd558f5b3b3c979\nauthor JonnyWong16 <9099342+JonnyWong16@users.noreply.github.com> 1684861416 -0700\ncommitter JonnyWong16 <9099342+JonnyWong16@users.noreply.github.com> 1684861416 -0700\n\nv2.12.4\n\n"}}, "url": "https://api.github.com/repos/Tautulli/Tautulli/commits/ea6c6078df410f333a060016dfce18c21ad134c9", "html_url": "https://github.com/Tautulli/Tautulli/commit/ea6c6078df410f333a060016dfce18c21ad134c9", "comments_url": "https://api.github.com/repos/Tautulli/Tautulli/commits/ea6c6078df410f333a060016dfce18c21ad134c9/comments", "author": {"login": "JonnyWong16", "id": 9099342, "node_id": "MDQ6VXNlcjkwOTkzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/9099342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JonnyWong16", "html_url": "https://github.com/JonnyWong16", "followers_url": "https://api.github.com/users/JonnyWong16/followers", "following_url": "https://api.github.com/users/JonnyWong16/following{/other_user}", "gists_url": "https://api.github.com/users/JonnyWong16/gists{/gist_id}", "starred_url": "https://api.github.com/users/JonnyWong16/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JonnyWong16/subscriptions", "organizations_url": "https://api.github.com/users/JonnyWong16/orgs", "repos_url": "https://api.github.com/users/JonnyWong16/repos", "events_url": "https://api.github.com/users/JonnyWong16/events{/privacy}", "received_events_url": "https://api.github.com/users/JonnyWong16/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JonnyWong16", "id": 9099342, "node_id": "MDQ6VXNlcjkwOTkzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/9099342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JonnyWong16", "html_url": "https://github.com/JonnyWong16", "followers_url": "https://api.github.com/users/JonnyWong16/followers", "following_url": "https://api.github.com/users/JonnyWong16/following{/other_user}", "gists_url": "https://api.github.com/users/JonnyWong16/gists{/gist_id}", "starred_url": "https://api.github.com/users/JonnyWong16/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JonnyWong16/subscriptions", "organizations_url": "https://api.github.com/users/JonnyWong16/orgs", "repos_url": "https://api.github.com/users/JonnyWong16/repos", "events_url": "https://api.github.com/users/JonnyWong16/events{/privacy}", "received_events_url": "https://api.github.com/users/JonnyWong16/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f39b9f908701feed62a22c30fdd558f5b3b3c979", "url": "https://api.github.com/repos/Tautulli/Tautulli/commits/f39b9f908701feed62a22c30fdd558f5b3b3c979", "html_url": "https://github.com/Tautulli/Tautulli/commit/f39b9f908701feed62a22c30fdd558f5b3b3c979"}]}], "files": [{"sha": "24baf07286be159d3ff80626ac8f1956c64e6a45", "filename": "CHANGELOG.md", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Tautulli/Tautulli/blob/ea6c6078df410f333a060016dfce18c21ad134c9/CHANGELOG.md", "raw_url": "https://github.com/Tautulli/Tautulli/raw/ea6c6078df410f333a060016dfce18c21ad134c9/CHANGELOG.md", "contents_url": "https://api.github.com/repos/Tautulli/Tautulli/contents/CHANGELOG.md?ref=ea6c6078df410f333a060016dfce18c21ad134c9", "patch": "@@ -1,5 +1,16 @@\n # Changelog\n \n+## v2.12.4 (2023-05-23)\n+\n+* History:\n+  * Fix: Set view offset equal to duration if a stream is stopped within the last 10 sec.\n+* Other:\n+  * Fix: Database import may fail for some older databases.\n+  * Fix: Double-quoted strings for newer versions of SQLite. (#2015, #2057)\n+* API:\n+  * Change: Return the ID for async API calls (export_metadata, notify, notify_newsletter).\n+\n+\n ## v2.12.3 (2023-04-14)\n \n * Activity:"}, {"sha": "eb1f73c2c8814eae2fb97cf9854985461ce73ec7", "filename": "plexpy/__init__.py", "status": "modified", "additions": 761, "deletions": 758, "changes": 1519, "blob_url": "https://github.com/Tautulli/Tautulli/blob/ea6c6078df410f333a060016dfce18c21ad134c9/plexpy%2F__init__.py", "raw_url": "https://github.com/Tautulli/Tautulli/raw/ea6c6078df410f333a060016dfce18c21ad134c9/plexpy%2F__init__.py", "contents_url": "https://api.github.com/repos/Tautulli/Tautulli/contents/plexpy%2F__init__.py?ref=ea6c6078df410f333a060016dfce18c21ad134c9"}, {"sha": "7bfbe8fbc8b5e402ba685abcb1a123350e9e2832", "filename": "plexpy/activity_handler.py", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Tautulli/Tautulli/blob/ea6c6078df410f333a060016dfce18c21ad134c9/plexpy%2Factivity_handler.py", "raw_url": "https://github.com/Tautulli/Tautulli/raw/ea6c6078df410f333a060016dfce18c21ad134c9/plexpy%2Factivity_handler.py", "contents_url": "https://api.github.com/repos/Tautulli/Tautulli/contents/plexpy%2Factivity_handler.py?ref=ea6c6078df410f333a060016dfce18c21ad134c9", "patch": "@@ -108,7 +108,6 @@ def update_db_session(self, notify=False):\n             self.ap.write_session(session=self.session, notify=notify)\n \n         self.set_session_state()\n-        self.get_db_session()\n \n     def set_session_state(self, view_offset=None):\n         self.ap.set_session_state(\n@@ -117,6 +116,7 @@ def set_session_state(self, view_offset=None):\n             view_offset=view_offset or self.view_offset,\n             stopped=helpers.timestamp()\n         )\n+        self.get_db_session()\n         \n     def put_notification(self, notify_action, **kwargs):\n         notification = {'stream_data': self.db_session.copy(), 'notify_action': notify_action}\n@@ -162,7 +162,12 @@ def on_stop(self, force_stop=False):\n         # Update the session state and viewOffset\n         # Set force_stop to true to disable the state set\n         if not force_stop:\n-            self.set_session_state()\n+            # Set the view offset equal to the duration if it is within the last 10 seconds\n+            if self.db_session['duration'] - self.view_offset <= 10000:\n+                view_offset = self.db_session['duration']\n+            else:\n+                view_offset = self.view_offset\n+            self.set_session_state(view_offset=view_offset)\n \n         # Write it to the history table\n         row_id = self.ap.write_session_history(session=self.db_session)"}, {"sha": "f349268c511684a83d0f88ff78db1b7909a77ed7", "filename": "plexpy/activity_pinger.py", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Tautulli/Tautulli/blob/ea6c6078df410f333a060016dfce18c21ad134c9/plexpy%2Factivity_pinger.py", "raw_url": "https://github.com/Tautulli/Tautulli/raw/ea6c6078df410f333a060016dfce18c21ad134c9/plexpy%2Factivity_pinger.py", "contents_url": "https://api.github.com/repos/Tautulli/Tautulli/contents/plexpy%2Factivity_pinger.py?ref=ea6c6078df410f333a060016dfce18c21ad134c9", "patch": "@@ -99,22 +99,22 @@ def check_active_sessions(ws_request=False):\n                                 # Using the set config parameter as the interval, probably not the most accurate but\n                                 # it will have to do for now. If it's a websocket request don't use this method.\n                                 paused_counter = int(stream['paused_counter']) + plexpy.CONFIG.MONITORING_INTERVAL\n-                                monitor_db.action('UPDATE sessions SET paused_counter = ? '\n-                                                  'WHERE session_key = ? AND rating_key = ?',\n+                                monitor_db.action(\"UPDATE sessions SET paused_counter = ? \"\n+                                                  \"WHERE session_key = ? AND rating_key = ?\",\n                                                   [paused_counter, stream['session_key'], stream['rating_key']])\n \n                             if session['state'] == 'buffering' and plexpy.CONFIG.BUFFER_THRESHOLD > 0:\n                                 # The stream is buffering so we need to increment the buffer_count\n                                 # We're going just increment on every monitor ping,\n                                 # would be difficult to keep track otherwise\n-                                monitor_db.action('UPDATE sessions SET buffer_count = buffer_count + 1 '\n-                                                  'WHERE session_key = ? AND rating_key = ?',\n+                                monitor_db.action(\"UPDATE sessions SET buffer_count = buffer_count + 1 \"\n+                                                  \"WHERE session_key = ? AND rating_key = ?\",\n                                                   [stream['session_key'], stream['rating_key']])\n \n                                 # Check the current buffer count and last buffer to determine if we should notify\n-                                buffer_values = monitor_db.select('SELECT buffer_count, buffer_last_triggered '\n-                                                                  'FROM sessions '\n-                                                                  'WHERE session_key = ? AND rating_key = ?',\n+                                buffer_values = monitor_db.select(\"SELECT buffer_count, buffer_last_triggered \"\n+                                                                  \"FROM sessions \"\n+                                                                  \"WHERE session_key = ? AND rating_key = ?\",\n                                                                   [stream['session_key'], stream['rating_key']])\n \n                                 if buffer_values[0]['buffer_count'] >= plexpy.CONFIG.BUFFER_THRESHOLD:\n@@ -125,9 +125,9 @@ def check_active_sessions(ws_request=False):\n                                         logger.info(\"Tautulli Monitor :: User '%s' has triggered a buffer warning.\"\n                                                     % stream['user'])\n                                         # Set the buffer trigger time\n-                                        monitor_db.action('UPDATE sessions '\n-                                                          'SET buffer_last_triggered = strftime(\"%s\",\"now\") '\n-                                                          'WHERE session_key = ? AND rating_key = ?',\n+                                        monitor_db.action(\"UPDATE sessions \"\n+                                                          \"SET buffer_last_triggered = strftime('%s', 'now') \"\n+                                                          \"WHERE session_key = ? AND rating_key = ?\",\n                                                           [stream['session_key'], stream['rating_key']])\n \n                                         plexpy.NOTIFY_QUEUE.put({'stream_data': stream.copy(), 'notify_action': 'on_buffer'})\n@@ -139,9 +139,9 @@ def check_active_sessions(ws_request=False):\n                                             logger.info(\"Tautulli Monitor :: User '%s' has triggered multiple buffer warnings.\"\n                                                     % stream['user'])\n                                             # Set the buffer trigger time\n-                                            monitor_db.action('UPDATE sessions '\n-                                                              'SET buffer_last_triggered = strftime(\"%s\",\"now\") '\n-                                                              'WHERE session_key = ? AND rating_key = ?',\n+                                            monitor_db.action(\"UPDATE sessions \"\n+                                                              \"SET buffer_last_triggered = strftime('%s', 'now') \"\n+                                                              \"WHERE session_key = ? AND rating_key = ?\",\n                                                               [stream['session_key'], stream['rating_key']])\n \n                                             plexpy.NOTIFY_QUEUE.put({'stream_data': stream.copy(), 'notify_action': 'on_buffer'})\n@@ -171,8 +171,8 @@ def check_active_sessions(ws_request=False):\n                         if not stream['stopped']:\n                             # Set the stream stop time\n                             stream['stopped'] = helpers.timestamp()\n-                            monitor_db.action('UPDATE sessions SET stopped = ?, state = ? '\n-                                              'WHERE session_key = ? AND rating_key = ?',\n+                            monitor_db.action(\"UPDATE sessions SET stopped = ?, state = ? \"\n+                                              \"WHERE session_key = ? AND rating_key = ?\",\n                                               [stream['stopped'], 'stopped', stream['session_key'], stream['rating_key']])\n \n                         progress_percent = helpers.get_percent(stream['view_offset'], stream['duration'])"}, {"sha": "588e91cef62dea4d82faf42fd301178b4a0832c1", "filename": "plexpy/activity_processor.py", "status": "modified", "additions": 39, "deletions": 39, "changes": 78, "blob_url": "https://github.com/Tautulli/Tautulli/blob/ea6c6078df410f333a060016dfce18c21ad134c9/plexpy%2Factivity_processor.py", "raw_url": "https://github.com/Tautulli/Tautulli/raw/ea6c6078df410f333a060016dfce18c21ad134c9/plexpy%2Factivity_processor.py", "contents_url": "https://api.github.com/repos/Tautulli/Tautulli/contents/plexpy%2Factivity_processor.py?ref=ea6c6078df410f333a060016dfce18c21ad134c9", "patch": "@@ -331,10 +331,10 @@ def write_session_history(self, session=None, import_metadata=None, is_import=Fa\n \n                 if session['live']:\n                     # Check if we should group the session, select the last guid from the user\n-                    query = 'SELECT session_history.id, session_history_metadata.guid, session_history.reference_id ' \\\n-                            'FROM session_history ' \\\n-                            'JOIN session_history_metadata ON session_history.id == session_history_metadata.id ' \\\n-                            'WHERE session_history.user_id = ? ORDER BY session_history.id DESC LIMIT 1 '\n+                    query = \"SELECT session_history.id, session_history_metadata.guid, session_history.reference_id \" \\\n+                            \"FROM session_history \" \\\n+                            \"JOIN session_history_metadata ON session_history.id == session_history_metadata.id \" \\\n+                            \"WHERE session_history.user_id = ? ORDER BY session_history.id DESC LIMIT 1 \"\n \n                     args = [session['user_id']]\n \n@@ -351,8 +351,8 @@ def write_session_history(self, session=None, import_metadata=None, is_import=Fa\n \n                 else:\n                     # Check if we should group the session, select the last two rows from the user\n-                    query = 'SELECT id, rating_key, view_offset, reference_id FROM session_history ' \\\n-                            'WHERE user_id = ? AND rating_key = ? ORDER BY id DESC LIMIT 2 '\n+                    query = \"SELECT id, rating_key, view_offset, reference_id FROM session_history \" \\\n+                            \"WHERE user_id = ? AND rating_key = ? ORDER BY id DESC LIMIT 2 \"\n \n                     args = [session['user_id'], session['rating_key']]\n \n@@ -375,7 +375,7 @@ def write_session_history(self, session=None, import_metadata=None, is_import=Fa\n                             marker_first, marker_final\n                         )\n \n-                query = 'UPDATE session_history SET reference_id = ? WHERE id = ? '\n+                query = \"UPDATE session_history SET reference_id = ? WHERE id = ? \"\n \n                 # If previous session view offset less than watched percent,\n                 # and new session view offset is greater,\n@@ -547,21 +547,21 @@ def write_session_history(self, session=None, import_metadata=None, is_import=Fa\n             return session['id']\n \n     def get_sessions(self, user_id=None, ip_address=None):\n-        query = 'SELECT * FROM sessions'\n+        query = \"SELECT * FROM sessions\"\n         args = []\n \n         if str(user_id).isdigit():\n-            ip = ' GROUP BY ip_address' if ip_address else ''\n-            query += ' WHERE user_id = ?' + ip\n+            ip = \" GROUP BY ip_address\" if ip_address else \"\"\n+            query += \" WHERE user_id = ?\" + ip\n             args.append(user_id)\n \n         sessions = self.db.select(query, args)\n         return sessions\n \n     def get_session_by_key(self, session_key=None):\n         if str(session_key).isdigit():\n-            session = self.db.select_single('SELECT * FROM sessions '\n-                                            'WHERE session_key = ? ',\n+            session = self.db.select_single(\"SELECT * FROM sessions \"\n+                                            \"WHERE session_key = ? \",\n                                             args=[session_key])\n             if session:\n                 return session\n@@ -570,8 +570,8 @@ def get_session_by_key(self, session_key=None):\n \n     def get_session_by_id(self, session_id=None):\n         if session_id:\n-            session = self.db.select_single('SELECT * FROM sessions '\n-                                            'WHERE session_id = ? ',\n+            session = self.db.select_single(\"SELECT * FROM sessions \"\n+                                            \"WHERE session_id = ? \",\n                                             args=[session_id])\n             if session:\n                 return session\n@@ -597,15 +597,15 @@ def set_session_state(self, session_key=None, state=None, **kwargs):\n \n     def delete_session(self, session_key=None, row_id=None):\n         if str(session_key).isdigit():\n-            self.db.action('DELETE FROM sessions WHERE session_key = ?', [session_key])\n+            self.db.action(\"DELETE FROM sessions WHERE session_key = ?\", [session_key])\n         elif str(row_id).isdigit():\n-            self.db.action('DELETE FROM sessions WHERE id = ?', [row_id])\n+            self.db.action(\"DELETE FROM sessions WHERE id = ?\", [row_id])\n \n     def set_session_last_paused(self, session_key=None, timestamp=None):\n         if str(session_key).isdigit():\n-            result = self.db.select('SELECT last_paused, paused_counter '\n-                                    'FROM sessions '\n-                                    'WHERE session_key = ?', args=[session_key])\n+            result = self.db.select(\"SELECT last_paused, paused_counter \"\n+                                    \"FROM sessions \"\n+                                    \"WHERE session_key = ?\", args=[session_key])\n \n             paused_counter = None\n             for session in result:\n@@ -626,15 +626,15 @@ def set_session_last_paused(self, session_key=None, timestamp=None):\n \n     def increment_session_buffer_count(self, session_key=None):\n         if str(session_key).isdigit():\n-            self.db.action('UPDATE sessions SET buffer_count = buffer_count + 1 '\n-                           'WHERE session_key = ?',\n+            self.db.action(\"UPDATE sessions SET buffer_count = buffer_count + 1 \"\n+                           \"WHERE session_key = ?\",\n                            [session_key])\n \n     def get_session_buffer_count(self, session_key=None):\n         if str(session_key).isdigit():\n-            buffer_count = self.db.select_single('SELECT buffer_count '\n-                                                 'FROM sessions '\n-                                                 'WHERE session_key = ?',\n+            buffer_count = self.db.select_single(\"SELECT buffer_count \"\n+                                                 \"FROM sessions \"\n+                                                 \"WHERE session_key = ?\",\n                                                  [session_key])\n             if buffer_count:\n                 return buffer_count['buffer_count']\n@@ -643,15 +643,15 @@ def get_session_buffer_count(self, session_key=None):\n \n     def set_session_buffer_trigger_time(self, session_key=None):\n         if str(session_key).isdigit():\n-            self.db.action('UPDATE sessions SET buffer_last_triggered = strftime(\"%s\",\"now\") '\n-                           'WHERE session_key = ?',\n+            self.db.action(\"UPDATE sessions SET buffer_last_triggered = strftime('%s', 'now') \"\n+                           \"WHERE session_key = ?\",\n                            [session_key])\n \n     def get_session_buffer_trigger_time(self, session_key=None):\n         if str(session_key).isdigit():\n-            last_time = self.db.select_single('SELECT buffer_last_triggered '\n-                                              'FROM sessions '\n-                                              'WHERE session_key = ?',\n+            last_time = self.db.select_single(\"SELECT buffer_last_triggered \"\n+                                              \"FROM sessions \"\n+                                              \"WHERE session_key = ?\",\n                                               [session_key])\n             if last_time:\n                 return last_time['buffer_last_triggered']\n@@ -660,12 +660,12 @@ def get_session_buffer_trigger_time(self, session_key=None):\n \n     def set_temp_stopped(self):\n         stopped_time = helpers.timestamp()\n-        self.db.action('UPDATE sessions SET stopped = ?', [stopped_time])\n+        self.db.action(\"UPDATE sessions SET stopped = ?\", [stopped_time])\n \n     def increment_write_attempts(self, session_key=None):\n         if str(session_key).isdigit():\n             session = self.get_session_by_key(session_key=session_key)\n-            self.db.action('UPDATE sessions SET write_attempts = ? WHERE session_key = ?',\n+            self.db.action(\"UPDATE sessions SET write_attempts = ? WHERE session_key = ?\",\n                            [session['write_attempts'] + 1, session_key])\n \n     def set_marker(self, session_key=None, marker_idx=None, marker_type=None):\n@@ -674,13 +674,13 @@ def set_marker(self, session_key=None, marker_idx=None, marker_type=None):\n             int(marker_type == 'commercial'),\n             int(marker_type == 'credits')\n         ]\n-        self.db.action('UPDATE sessions SET intro = ?, commercial = ?, credits = ?, marker = ? '\n-                       'WHERE session_key = ?',\n+        self.db.action(\"UPDATE sessions SET intro = ?, commercial = ?, credits = ?, marker = ? \"\n+                       \"WHERE session_key = ?\",\n                        marker_args + [marker_idx, session_key])\n \n     def set_watched(self, session_key=None):\n-        self.db.action('UPDATE sessions SET watched = ? '\n-                       'WHERE session_key = ?',\n+        self.db.action(\"UPDATE sessions SET watched = ? \"\n+                       \"WHERE session_key = ?\",\n                        [1, session_key])\n \n     def write_continued_session(self, user_id=None, machine_id=None, media_type=None, stopped=None):\n@@ -689,9 +689,9 @@ def write_continued_session(self, user_id=None, machine_id=None, media_type=None\n         self.db.upsert(table_name='sessions_continued', key_dict=keys, value_dict=values)\n \n     def is_initial_stream(self, user_id=None, machine_id=None, media_type=None, started=None):\n-        last_session = self.db.select_single('SELECT stopped '\n-                                             'FROM sessions_continued '\n-                                             'WHERE user_id = ? AND machine_id = ? AND media_type = ? '\n-                                             'ORDER BY stopped DESC',\n+        last_session = self.db.select_single(\"SELECT stopped \"\n+                                             \"FROM sessions_continued \"\n+                                             \"WHERE user_id = ? AND machine_id = ? AND media_type = ? \"\n+                                             \"ORDER BY stopped DESC\",\n                                              [user_id, machine_id, media_type])\n         return int(started - last_session.get('stopped', 0) >= plexpy.CONFIG.NOTIFY_CONTINUED_SESSION_THRESHOLD)"}, {"sha": "eefaa9fd57b2adb70cc5d9bc880ff26bf0c6adc7", "filename": "plexpy/api2.py", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Tautulli/Tautulli/blob/ea6c6078df410f333a060016dfce18c21ad134c9/plexpy%2Fapi2.py", "raw_url": "https://github.com/Tautulli/Tautulli/raw/ea6c6078df410f333a060016dfce18c21ad134c9/plexpy%2Fapi2.py", "contents_url": "https://api.github.com/repos/Tautulli/Tautulli/contents/plexpy%2Fapi2.py?ref=ea6c6078df410f333a060016dfce18c21ad134c9", "patch": "@@ -505,7 +505,8 @@ def notify(self, notifier_id='', subject='', body='', **kwargs):\n                 script_args (str):      The arguments for script notifications\n \n             Returns:\n-                None\n+                json:\n+                    {\"notification_id\": 1}\n             ```\n         \"\"\"\n         if not notifier_id:\n@@ -527,14 +528,14 @@ def notify(self, notifier_id='', subject='', body='', **kwargs):\n                                               body=body,\n                                               **kwargs)\n \n-        if success:\n+        if isinstance(success, int):\n             self._api_msg = 'Notification sent.'\n             self._api_result_type = 'success'\n+            return {'notification_id': success}\n         else:\n             self._api_msg = 'Notification failed.'\n             self._api_result_type = 'error'\n-\n-        return\n+            return\n \n     def notify_newsletter(self, newsletter_id='', subject='', body='', message='', **kwargs):\n         \"\"\" Send a newsletter using Tautulli.\n@@ -549,7 +550,8 @@ def notify_newsletter(self, newsletter_id='', subject='', body='', message='', *\n                 message (str):          The message of the newsletter\n \n             Returns:\n-                None\n+                json:\n+                    {\"newsletter_notification_id\": 1}\n             ```\n         \"\"\"\n         if not newsletter_id:\n@@ -572,14 +574,14 @@ def notify_newsletter(self, newsletter_id='', subject='', body='', message='', *\n                                             message=message,\n                                             **kwargs)\n \n-        if success:\n+        if isinstance(success, int):\n             self._api_msg = 'Newsletter sent.'\n             self._api_result_type = 'success'\n+            return {'newsletter_notification_id': success}\n         else:\n             self._api_msg = 'Newsletter failed.'\n             self._api_result_type = 'error'\n-\n-        return\n+            return\n \n     def _api_make_md(self):\n         \"\"\" Tries to make a API.md to simplify the api docs. \"\"\""}, {"sha": "859d927421087c1c5740f9564140a3946660a186", "filename": "plexpy/database.py", "status": "modified", "additions": 38, "deletions": 38, "changes": 76, "blob_url": "https://github.com/Tautulli/Tautulli/blob/ea6c6078df410f333a060016dfce18c21ad134c9/plexpy%2Fdatabase.py", "raw_url": "https://github.com/Tautulli/Tautulli/raw/ea6c6078df410f333a060016dfce18c21ad134c9/plexpy%2Fdatabase.py", "contents_url": "https://api.github.com/repos/Tautulli/Tautulli/contents/plexpy%2Fdatabase.py?ref=ea6c6078df410f333a060016dfce18c21ad134c9", "patch": "@@ -54,7 +54,7 @@ def validate_database(database=None):\n         return 'Uncaught exception'\n \n     try:\n-        connection.execute('SELECT started from session_history')\n+        connection.execute(\"SELECT started from session_history\")\n         connection.close()\n     except (sqlite3.OperationalError, sqlite3.DatabaseError, ValueError) as e:\n         logger.error(\"Tautulli Database :: Invalid database specified: %s\", e)\n@@ -92,32 +92,32 @@ def import_tautulli_db(database=None, method=None, backup=False):\n     set_is_importing(True)\n \n     db = MonitorDatabase()\n-    db.connection.execute('BEGIN IMMEDIATE')\n-    db.connection.execute('ATTACH ? AS import_db', [database])\n+    db.connection.execute(\"BEGIN IMMEDIATE\")\n+    db.connection.execute(\"ATTACH ? AS import_db\", [database])\n \n     try:\n-        version_info = db.select_single('SELECT * FROM import_db.version_info WHERE key = \"version\"')\n+        version_info = db.select_single(\"SELECT * FROM import_db.version_info WHERE key = 'version'\")\n         import_db_version = version_info['value']\n-    except sqlite3.OperationalError:\n+    except (sqlite3.OperationalError, KeyError):\n         import_db_version = 'v2.6.10'\n \n     logger.info(\"Tautulli Database :: Import Tautulli database version: %s\", import_db_version)\n     import_db_version = helpers.version_to_tuple(import_db_version)\n \n     # Get the current number of used ids in the session_history table\n-    session_history_seq = db.select_single('SELECT seq FROM sqlite_sequence WHERE name = \"session_history\"')\n+    session_history_seq = db.select_single(\"SELECT seq FROM sqlite_sequence WHERE name = 'session_history'\")\n     session_history_rows = session_history_seq.get('seq', 0)\n \n     session_history_tables = ('session_history', 'session_history_metadata', 'session_history_media_info')\n \n     if method == 'merge':\n         logger.info(\"Tautulli Database :: Creating temporary database tables to re-index grouped session history.\")\n         for table_name in session_history_tables:\n-            db.action('CREATE TABLE {table}_copy AS SELECT * FROM import_db.{table}'.format(table=table_name))\n-            db.action('UPDATE {table}_copy SET id = id + ?'.format(table=table_name),\n+            db.action(\"CREATE TABLE {table}_copy AS SELECT * FROM import_db.{table}\".format(table=table_name))\n+            db.action(\"UPDATE {table}_copy SET id = id + ?\".format(table=table_name),\n                       [session_history_rows])\n             if table_name == 'session_history':\n-                db.action('UPDATE {table}_copy SET reference_id = reference_id + ?'.format(table=table_name),\n+                db.action(\"UPDATE {table}_copy SET reference_id = reference_id + ?\".format(table=table_name),\n                           [session_history_rows])\n \n     # Migrate section_id from session_history_metadata to session_history\n@@ -128,28 +128,28 @@ def import_tautulli_db(database=None, method=None, backup=False):\n         else:\n             from_db_name = 'import_db'\n             copy = ''\n-        db.action('ALTER TABLE {from_db}.session_history{copy} '\n-                  'ADD COLUMN section_id INTEGER'.format(from_db=from_db_name,\n+        db.action(\"ALTER TABLE {from_db}.session_history{copy} \"\n+                  \"ADD COLUMN section_id INTEGER\".format(from_db=from_db_name,\n                                                          copy=copy))\n-        db.action('UPDATE {from_db}.session_history{copy} SET section_id = ('\n-                  'SELECT section_id FROM {from_db}.session_history_metadata{copy} '\n-                  'WHERE {from_db}.session_history_metadata{copy}.id = '\n-                  '{from_db}.session_history{copy}.id)'.format(from_db=from_db_name,\n+        db.action(\"UPDATE {from_db}.session_history{copy} SET section_id = (\"\n+                  \"SELECT section_id FROM {from_db}.session_history_metadata{copy} \"\n+                  \"WHERE {from_db}.session_history_metadata{copy}.id = \"\n+                  \"{from_db}.session_history{copy}.id)\".format(from_db=from_db_name,\n                                                                copy=copy))\n \n     # Keep track of all table columns so that duplicates can be removed after importing\n     table_columns = {}\n \n-    tables = db.select('SELECT name FROM import_db.sqlite_master '\n-                       'WHERE type = \"table\" AND name NOT LIKE \"sqlite_%\"'\n-                       'ORDER BY name')\n+    tables = db.select(\"SELECT name FROM import_db.sqlite_master \"\n+                       \"WHERE type = 'table' AND name NOT LIKE 'sqlite_%'\"\n+                       \"ORDER BY name\")\n     for table in tables:\n         table_name = table['name']\n         if table_name == 'sessions' or table_name == 'version_info':\n             # Skip temporary sessions table\n             continue\n \n-        current_table = db.select('PRAGMA main.table_info({table})'.format(table=table_name))\n+        current_table = db.select(\"PRAGMA main.table_info({table})\".format(table=table_name))\n         if not current_table:\n             # Skip table does not exits\n             continue\n@@ -158,8 +158,8 @@ def import_tautulli_db(database=None, method=None, backup=False):\n \n         if method == 'overwrite':\n             # Clear the table and reset the autoincrement ids\n-            db.action('DELETE FROM {table}'.format(table=table_name))\n-            db.action('DELETE FROM sqlite_sequence WHERE name = ?', [table_name])\n+            db.action(\"DELETE FROM {table}\".format(table=table_name))\n+            db.action(\"DELETE FROM sqlite_sequence WHERE name = ?\", [table_name])\n \n         if method == 'merge' and table_name in session_history_tables:\n             from_db_name = 'main'\n@@ -170,7 +170,7 @@ def import_tautulli_db(database=None, method=None, backup=False):\n \n         # Get the list of columns to import\n         current_columns = [c['name'] for c in current_table]\n-        import_table = db.select('PRAGMA {from_db}.table_info({from_table})'.format(from_db=from_db_name,\n+        import_table = db.select(\"PRAGMA {from_db}.table_info({from_table})\".format(from_db=from_db_name,\n                                                                                     from_table=from_table_name))\n \n         if method == 'merge' and table_name not in session_history_tables:\n@@ -182,29 +182,29 @@ def import_tautulli_db(database=None, method=None, backup=False):\n         insert_columns = ', '.join(import_columns)\n \n         # Insert the data with ignore instead of replace to be safe\n-        db.action('INSERT OR IGNORE INTO {table} ({columns}) '\n-                  'SELECT {columns} FROM {from_db}.{from_table}'.format(table=table_name,\n+        db.action(\"INSERT OR IGNORE INTO {table} ({columns}) \"\n+                  \"SELECT {columns} FROM {from_db}.{from_table}\".format(table=table_name,\n                                                                         columns=insert_columns,\n                                                                         from_db=from_db_name,\n                                                                         from_table=from_table_name))\n \n-    db.connection.execute('DETACH import_db')\n+    db.connection.execute(\"DETACH import_db\")\n \n     if method == 'merge':\n         for table_name, columns in sorted(table_columns.items()):\n             duplicate_columns = ', '.join([c for c in columns if c not in ('id', 'reference_id')])\n             logger.info(\"Tautulli Database :: Removing duplicate rows from database table '%s'.\", table_name)\n             if table_name in session_history_tables[1:]:\n-                db.action('DELETE FROM {table} WHERE id NOT IN '\n-                          '(SELECT id FROM session_history)'.format(table=table_name))\n+                db.action(\"DELETE FROM {table} WHERE id NOT IN \"\n+                          \"(SELECT id FROM session_history)\".format(table=table_name))\n             else:\n-                db.action('DELETE FROM {table} WHERE id NOT IN '\n-                          '(SELECT MIN(id) FROM {table} GROUP BY {columns})'.format(table=table_name,\n+                db.action(\"DELETE FROM {table} WHERE id NOT IN \"\n+                          \"(SELECT MIN(id) FROM {table} GROUP BY {columns})\".format(table=table_name,\n                                                                                     columns=duplicate_columns))\n \n         logger.info(\"Tautulli Database :: Deleting temporary database tables.\")\n         for table_name in session_history_tables:\n-            db.action('DROP TABLE {table}_copy'.format(table=table_name))\n+            db.action(\"DROP TABLE {table}_copy\".format(table=table_name))\n \n     vacuum()\n \n@@ -217,7 +217,7 @@ def import_tautulli_db(database=None, method=None, backup=False):\n \n def integrity_check():\n     monitor_db = MonitorDatabase()\n-    result = monitor_db.select_single('PRAGMA integrity_check')\n+    result = monitor_db.select_single(\"PRAGMA integrity_check\")\n     return result\n \n \n@@ -227,7 +227,7 @@ def clear_table(table=None):\n \n         logger.debug(\"Tautulli Database :: Clearing database table '%s'.\" % table)\n         try:\n-            monitor_db.action('DELETE FROM %s' % table)\n+            monitor_db.action(\"DELETE FROM %s\" % table)\n             vacuum()\n             return True\n         except Exception as e:\n@@ -286,7 +286,7 @@ def delete_user_history(user_id=None):\n         monitor_db = MonitorDatabase()\n \n         # Get all history associated with the user_id\n-        result = monitor_db.select('SELECT id FROM session_history WHERE user_id = ?',\n+        result = monitor_db.select(\"SELECT id FROM session_history WHERE user_id = ?\",\n                                    [user_id])\n         row_ids = [row['id'] for row in result]\n \n@@ -299,7 +299,7 @@ def delete_library_history(section_id=None):\n         monitor_db = MonitorDatabase()\n \n         # Get all history associated with the section_id\n-        result = monitor_db.select('SELECT id FROM session_history WHERE section_id = ?',\n+        result = monitor_db.select(\"SELECT id FROM session_history WHERE section_id = ?\",\n                                    [section_id])\n         row_ids = [row['id'] for row in result]\n \n@@ -312,7 +312,7 @@ def vacuum():\n \n     logger.info(\"Tautulli Database :: Vacuuming database.\")\n     try:\n-        monitor_db.action('VACUUM')\n+        monitor_db.action(\"VACUUM\")\n     except Exception as e:\n         logger.error(\"Tautulli Database :: Failed to vacuum database: %s\" % e)\n \n@@ -322,7 +322,7 @@ def optimize():\n \n     logger.info(\"Tautulli Database :: Optimizing database.\")\n     try:\n-        monitor_db.action('PRAGMA optimize')\n+        monitor_db.action(\"PRAGMA optimize\")\n     except Exception as e:\n         logger.error(\"Tautulli Database :: Failed to optimize database: %s\" % e)\n \n@@ -362,7 +362,7 @@ def make_backup(cleanup=False, scheduler=False):\n         os.makedirs(backup_folder)\n \n     db = MonitorDatabase()\n-    db.connection.execute('BEGIN IMMEDIATE')\n+    db.connection.execute(\"BEGIN IMMEDIATE\")\n     shutil.copyfile(db_filename(), backup_file_fp)\n     db.connection.rollback()\n \n@@ -496,6 +496,6 @@ def upsert(self, table_name, value_dict, key_dict):\n \n     def last_insert_id(self):\n         # Get the last insert row id\n-        result = self.select_single(query='SELECT last_insert_rowid() AS last_id')\n+        result = self.select_single(query=\"SELECT last_insert_rowid() AS last_id\")\n         if result:\n             return result.get('last_id', None)\n\\ No newline at end of file"}, {"sha": "3db32a51d3c359fa96e26bf76e3fd829da999857", "filename": "plexpy/datafactory.py", "status": "modified", "additions": 552, "deletions": 552, "changes": 1104, "blob_url": "https://github.com/Tautulli/Tautulli/blob/ea6c6078df410f333a060016dfce18c21ad134c9/plexpy%2Fdatafactory.py", "raw_url": "https://github.com/Tautulli/Tautulli/raw/ea6c6078df410f333a060016dfce18c21ad134c9/plexpy%2Fdatafactory.py", "contents_url": "https://api.github.com/repos/Tautulli/Tautulli/contents/plexpy%2Fdatafactory.py?ref=ea6c6078df410f333a060016dfce18c21ad134c9", "patch": "@@ -93,61 +93,61 @@ def get_datatables_history(self, kwargs=None, custom_where=None, grouping=None,\n         group_by = ['session_history.reference_id'] if grouping else ['session_history.id']\n \n         columns = [\n-            'session_history.reference_id',\n-            'session_history.id AS row_id',\n-            'MAX(started) AS date',\n-            'MIN(started) AS started',\n-            'MAX(stopped) AS stopped',\n-            'SUM(CASE WHEN stopped > 0 THEN (stopped - started) ELSE 0 END) - \\\n-             SUM(CASE WHEN paused_counter IS NULL THEN 0 ELSE paused_counter END) AS play_duration',\n-            'SUM(CASE WHEN paused_counter IS NULL THEN 0 ELSE paused_counter END) AS paused_counter',\n-            'session_history.view_offset',\n-            'session_history.user_id',\n-            'session_history.user',\n-            '(CASE WHEN users.friendly_name IS NULL OR TRIM(users.friendly_name) = \"\" \\\n-             THEN users.username ELSE users.friendly_name END) AS friendly_name',\n-            'users.thumb AS user_thumb',\n-            'users.custom_avatar_url AS custom_thumb',\n-            'platform',\n-            'product',\n-            'player',\n-            'ip_address',\n-            'machine_id',\n-            'location',\n-            'secure',\n-            'relayed',\n-            'session_history.media_type',\n-            '(CASE WHEN session_history_metadata.live = 1 THEN \\'live\\' ELSE session_history.media_type END) \\\n-             AS media_type_live',\n-            'session_history_metadata.rating_key',\n-            'session_history_metadata.parent_rating_key',\n-            'session_history_metadata.grandparent_rating_key',\n-            'session_history_metadata.full_title',\n-            'session_history_metadata.title',\n-            'session_history_metadata.parent_title',\n-            'session_history_metadata.grandparent_title',\n-            'session_history_metadata.original_title',\n-            'session_history_metadata.year',\n-            'session_history_metadata.media_index',\n-            'session_history_metadata.parent_media_index',\n-            'session_history_metadata.thumb',\n-            'session_history_metadata.parent_thumb',\n-            'session_history_metadata.grandparent_thumb',\n-            'session_history_metadata.live',\n-            'session_history_metadata.added_at',\n-            'session_history_metadata.originally_available_at',\n-            'session_history_metadata.guid',\n-            'MAX((CASE WHEN (view_offset IS NULL OR view_offset = \"\") THEN 0.1 ELSE view_offset * 1.0 END) / \\\n-             (CASE WHEN (session_history_metadata.duration IS NULL OR session_history_metadata.duration = \"\") \\\n-             THEN 1.0 ELSE session_history_metadata.duration * 1.0 END) * 100) AS percent_complete',\n-            'session_history_metadata.duration',\n-            'session_history_metadata.marker_credits_first',\n-            'session_history_metadata.marker_credits_final',\n-            'session_history_media_info.transcode_decision',\n-            'COUNT(*) AS group_count',\n-            'GROUP_CONCAT(session_history.id) AS group_ids',\n-            'NULL AS state',\n-            'NULL AS session_key'\n+            \"session_history.reference_id\",\n+            \"session_history.id AS row_id\",\n+            \"MAX(started) AS date\",\n+            \"MIN(started) AS started\",\n+            \"MAX(stopped) AS stopped\",\n+            \"SUM(CASE WHEN stopped > 0 THEN (stopped - started) ELSE 0 END) - \\\n+             SUM(CASE WHEN paused_counter IS NULL THEN 0 ELSE paused_counter END) AS play_duration\",\n+            \"SUM(CASE WHEN paused_counter IS NULL THEN 0 ELSE paused_counter END) AS paused_counter\",\n+            \"session_history.view_offset\",\n+            \"session_history.user_id\",\n+            \"session_history.user\",\n+            \"(CASE WHEN users.friendly_name IS NULL OR TRIM(users.friendly_name) = '' \\\n+             THEN users.username ELSE users.friendly_name END) AS friendly_name\",\n+            \"users.thumb AS user_thumb\",\n+            \"users.custom_avatar_url AS custom_thumb\",\n+            \"platform\",\n+            \"product\",\n+            \"player\",\n+            \"ip_address\",\n+            \"machine_id\",\n+            \"location\",\n+            \"secure\",\n+            \"relayed\",\n+            \"session_history.media_type\",\n+            \"(CASE WHEN session_history_metadata.live = 1 THEN 'live' ELSE session_history.media_type END) \\\n+             AS media_type_live\",\n+            \"session_history_metadata.rating_key\",\n+            \"session_history_metadata.parent_rating_key\",\n+            \"session_history_metadata.grandparent_rating_key\",\n+            \"session_history_metadata.full_title\",\n+            \"session_history_metadata.title\",\n+            \"session_history_metadata.parent_title\",\n+            \"session_history_metadata.grandparent_title\",\n+            \"session_history_metadata.original_title\",\n+            \"session_history_metadata.year\",\n+            \"session_history_metadata.media_index\",\n+            \"session_history_metadata.parent_media_index\",\n+            \"session_history_metadata.thumb\",\n+            \"session_history_metadata.parent_thumb\",\n+            \"session_history_metadata.grandparent_thumb\",\n+            \"session_history_metadata.live\",\n+            \"session_history_metadata.added_at\",\n+            \"session_history_metadata.originally_available_at\",\n+            \"session_history_metadata.guid\",\n+            \"MAX((CASE WHEN (view_offset IS NULL OR view_offset = '') THEN 0.1 ELSE view_offset * 1.0 END) / \\\n+             (CASE WHEN (session_history_metadata.duration IS NULL OR session_history_metadata.duration = '') \\\n+             THEN 1.0 ELSE session_history_metadata.duration * 1.0 END) * 100) AS percent_complete\",\n+            \"session_history_metadata.duration\",\n+            \"session_history_metadata.marker_credits_first\",\n+            \"session_history_metadata.marker_credits_final\",\n+            \"session_history_media_info.transcode_decision\",\n+            \"COUNT(*) AS group_count\",\n+            \"GROUP_CONCAT(session_history.id) AS group_ids\",\n+            \"NULL AS state\",\n+            \"NULL AS session_key\"\n             ]\n \n         if include_activity:\n@@ -157,60 +157,60 @@ def get_datatables_history(self, kwargs=None, custom_where=None, grouping=None,\n             group_by_union = ['session_key']\n \n             columns_union = [\n-                'NULL AS reference_id',\n-                'NULL AS row_id',\n-                'started AS date',\n-                'started',\n-                'stopped',\n-                'SUM(CASE WHEN stopped > 0 THEN (stopped - started) ELSE (strftime(\"%s\", \"now\") - started) END) - \\\n-                 SUM(CASE WHEN paused_counter IS NULL THEN 0 ELSE paused_counter END) AS play_duration',\n-                'SUM(CASE WHEN paused_counter IS NULL THEN 0 ELSE paused_counter END) AS paused_counter',\n-                'view_offset',\n-                'user_id',\n-                'user',\n-                '(CASE WHEN friendly_name IS NULL OR TRIM(friendly_name) = \"\" \\\n-                 THEN user ELSE friendly_name END) AS friendly_name',\n-                'NULL AS user_thumb',\n-                'NULL AS custom_thumb',\n-                'platform',\n-                'product',\n-                'player',\n-                'ip_address',\n-                'machine_id',\n-                'location',\n-                'secure',\n-                'relayed',\n-                'media_type',\n-                '(CASE WHEN live = 1 THEN \\'live\\' ELSE media_type END) AS media_type_live',\n-                'rating_key',\n-                'parent_rating_key',\n-                'grandparent_rating_key',\n-                'full_title',\n-                'title',\n-                'parent_title',\n-                'grandparent_title',\n-                'original_title',\n-                'year',\n-                'media_index',\n-                'parent_media_index',\n-                'thumb',\n-                'parent_thumb',\n-                'grandparent_thumb',\n-                'live',\n-                'added_at',\n-                'originally_available_at',\n-                'guid',\n-                'MAX((CASE WHEN (view_offset IS NULL OR view_offset = \"\") THEN 0.1 ELSE view_offset * 1.0 END) / \\\n-                 (CASE WHEN (duration IS NULL OR duration = \"\") \\\n-                 THEN 1.0 ELSE duration * 1.0 END) * 100) AS percent_complete',\n-                'duration',\n-                'NULL AS marker_credits_first',\n-                'NULL AS marker_credits_final',\n-                'transcode_decision',\n-                'NULL AS group_count',\n-                'NULL AS group_ids',\n-                'state',\n-                'session_key'\n+                \"NULL AS reference_id\",\n+                \"NULL AS row_id\",\n+                \"started AS date\",\n+                \"started\",\n+                \"stopped\",\n+                \"SUM(CASE WHEN stopped > 0 THEN (stopped - started) ELSE (strftime('%s', 'now') - started) END) - \\\n+                 SUM(CASE WHEN paused_counter IS NULL THEN 0 ELSE paused_counter END) AS play_duration\",\n+                \"SUM(CASE WHEN paused_counter IS NULL THEN 0 ELSE paused_counter END) AS paused_counter\",\n+                \"view_offset\",\n+                \"user_id\",\n+                \"user\",\n+                \"(CASE WHEN friendly_name IS NULL OR TRIM(friendly_name) = '' \\\n+                 THEN user ELSE friendly_name END) AS friendly_name\",\n+                \"NULL AS user_thumb\",\n+                \"NULL AS custom_thumb\",\n+                \"platform\",\n+                \"product\",\n+                \"player\",\n+                \"ip_address\",\n+                \"machine_id\",\n+                \"location\",\n+                \"secure\",\n+                \"relayed\",\n+                \"media_type\",\n+                \"(CASE WHEN live = 1 THEN 'live' ELSE media_type END) AS media_type_live\",\n+                \"rating_key\",\n+                \"parent_rating_key\",\n+                \"grandparent_rating_key\",\n+                \"full_title\",\n+                \"title\",\n+                \"parent_title\",\n+                \"grandparent_title\",\n+                \"original_title\",\n+                \"year\",\n+                \"media_index\",\n+                \"parent_media_index\",\n+                \"thumb\",\n+                \"parent_thumb\",\n+                \"grandparent_thumb\",\n+                \"live\",\n+                \"added_at\",\n+                \"originally_available_at\",\n+                \"guid\",\n+                \"MAX((CASE WHEN (view_offset IS NULL OR view_offset = '') THEN 0.1 ELSE view_offset * 1.0 END) / \\\n+                 (CASE WHEN (duration IS NULL OR duration = '') \\\n+                 THEN 1.0 ELSE duration * 1.0 END) * 100) AS percent_complete\",\n+                \"duration\",\n+                \"NULL AS marker_credits_first\",\n+                \"NULL AS marker_credits_final\",\n+                \"transcode_decision\",\n+                \"NULL AS group_count\",\n+                \"NULL AS group_ids\",\n+                \"state\",\n+                \"session_key\"\n                 ]\n \n         else:\n@@ -392,20 +392,20 @@ def get_home_stats(self, grouping=None, time_range=30, stats_type='plays',\n             if stat == 'top_movies':\n                 top_movies = []\n                 try:\n-                    query = 'SELECT sh.id, shm.full_title, shm.year, sh.rating_key, shm.thumb, sh.section_id, ' \\\n-                            'shm.art, sh.media_type, shm.content_rating, shm.labels, sh.started, shm.live, shm.guid, ' \\\n-                            'MAX(sh.started) AS last_watch, COUNT(sh.id) AS total_plays, SUM(sh.d) AS total_duration ' \\\n-                            'FROM (SELECT *, SUM(CASE WHEN stopped > 0 THEN (stopped - started) - ' \\\n-                            '       (CASE WHEN paused_counter IS NULL THEN 0 ELSE paused_counter END) ELSE 0 END) ' \\\n-                            '       AS d ' \\\n-                            '   FROM session_history ' \\\n-                            '   WHERE session_history.stopped >= %s ' \\\n-                            '       AND session_history.media_type = \"movie\" %s ' \\\n-                            '   GROUP BY %s) AS sh ' \\\n-                            'JOIN session_history_metadata AS shm ON shm.id = sh.id ' \\\n-                            'GROUP BY shm.full_title, shm.year ' \\\n-                            'ORDER BY %s DESC, sh.started DESC ' \\\n-                            'LIMIT %s OFFSET %s ' % (timestamp, where_id, group_by, sort_type, stats_count, stats_start)\n+                    query = \"SELECT sh.id, shm.full_title, shm.year, sh.rating_key, shm.thumb, sh.section_id, \" \\\n+                            \"shm.art, sh.media_type, shm.content_rating, shm.labels, sh.started, shm.live, shm.guid, \" \\\n+                            \"MAX(sh.started) AS last_watch, COUNT(sh.id) AS total_plays, SUM(sh.d) AS total_duration \" \\\n+                            \"FROM (SELECT *, SUM(CASE WHEN stopped > 0 THEN (stopped - started) - \" \\\n+                            \"       (CASE WHEN paused_counter IS NULL THEN 0 ELSE paused_counter END) ELSE 0 END) \" \\\n+                            \"       AS d \" \\\n+                            \"   FROM session_history \" \\\n+                            \"   WHERE session_history.stopped >= %s \" \\\n+                            \"       AND session_history.media_type = 'movie' %s \" \\\n+                            \"   GROUP BY %s) AS sh \" \\\n+                            \"JOIN session_history_metadata AS shm ON shm.id = sh.id \" \\\n+                            \"GROUP BY shm.full_title, shm.year \" \\\n+                            \"ORDER BY %s DESC, sh.started DESC \" \\\n+                            \"LIMIT %s OFFSET %s \" % (timestamp, where_id, group_by, sort_type, stats_count, stats_start)\n                     result = monitor_db.select(query)\n                 except Exception as e:\n                     logger.warn(\"Tautulli DataFactory :: Unable to execute database query for get_home_stats: top_movies: %s.\" % e)\n@@ -444,21 +444,21 @@ def get_home_stats(self, grouping=None, time_range=30, stats_type='plays',\n             elif stat == 'popular_movies':\n                 popular_movies = []\n                 try:\n-                    query = 'SELECT sh.id, shm.full_title, shm.year, sh.rating_key, shm.thumb, sh.section_id, ' \\\n-                            'shm.art, sh.media_type, shm.content_rating, shm.labels, sh.started, shm.live, shm.guid, ' \\\n-                            'COUNT(DISTINCT sh.user_id) AS users_watched, ' \\\n-                            'MAX(sh.started) AS last_watch, COUNT(sh.id) as total_plays, SUM(sh.d) AS total_duration ' \\\n-                            'FROM (SELECT *, SUM(CASE WHEN stopped > 0 THEN (stopped - started) - ' \\\n-                            '       (CASE WHEN paused_counter IS NULL THEN 0 ELSE paused_counter END) ELSE 0 END) ' \\\n-                            '       AS d ' \\\n-                            '   FROM session_history ' \\\n-                            '   WHERE session_history.stopped >= %s ' \\\n-                            '       AND session_history.media_type = \"movie\" %s ' \\\n-                            '   GROUP BY %s) AS sh ' \\\n-                            'JOIN session_history_metadata AS shm ON shm.id = sh.id ' \\\n-                            'GROUP BY shm.full_title, shm.year ' \\\n-                            'ORDER BY users_watched DESC, %s DESC, sh.started DESC ' \\\n-                            'LIMIT %s OFFSET %s ' % (timestamp, where_id, group_by, sort_type, stats_count, stats_start)\n+                    query = \"SELECT sh.id, shm.full_title, shm.year, sh.rating_key, shm.thumb, sh.section_id, \" \\\n+                            \"shm.art, sh.media_type, shm.content_rating, shm.labels, sh.started, shm.live, shm.guid, \" \\\n+                            \"COUNT(DISTINCT sh.user_id) AS users_watched, \" \\\n+                            \"MAX(sh.started) AS last_watch, COUNT(sh.id) as total_plays, SUM(sh.d) AS total_duration \" \\\n+                            \"FROM (SELECT *, SUM(CASE WHEN stopped > 0 THEN (stopped - started) - \" \\\n+                            \"       (CASE WHEN paused_counter IS NULL THEN 0 ELSE paused_counter END) ELSE 0 END) \" \\\n+                            \"       AS d \" \\\n+                            \"   FROM session_history \" \\\n+                            \"   WHERE session_history.stopped >= %s \" \\\n+                            \"       AND session_history.media_type = 'movie' %s \" \\\n+                            \"   GROUP BY %s) AS sh \" \\\n+                            \"JOIN session_history_metadata AS shm ON shm.id = sh.id \" \\\n+                            \"GROUP BY shm.full_title, shm.year \" \\\n+                            \"ORDER BY users_watched DESC, %s DESC, sh.started DESC \" \\\n+                            \"LIMIT %s OFFSET %s \" % (timestamp, where_id, group_by, sort_type, stats_count, stats_start)\n                     result = monitor_db.select(query)\n                 except Exception as e:\n                     logger.warn(\"Tautulli DataFactory :: Unable to execute database query for get_home_stats: popular_movies: %s.\" % e)\n@@ -495,22 +495,22 @@ def get_home_stats(self, grouping=None, time_range=30, stats_type='plays',\n             elif stat == 'top_tv':\n                 top_tv = []\n                 try:\n-                    query = 'SELECT sh.id, shm.grandparent_title, sh.grandparent_rating_key, ' \\\n-                            'shm.grandparent_thumb, sh.section_id, ' \\\n-                            'shm.year, sh.rating_key, shm.art, sh.media_type, ' \\\n-                            'shm.content_rating, shm.labels, sh.started, shm.live, shm.guid, ' \\\n-                            'MAX(sh.started) AS last_watch, COUNT(sh.id) AS total_plays, SUM(sh.d) AS total_duration ' \\\n-                            'FROM (SELECT *, SUM(CASE WHEN stopped > 0 THEN (stopped - started) - ' \\\n-                            '       (CASE WHEN paused_counter IS NULL THEN 0 ELSE paused_counter END) ELSE 0 END) ' \\\n-                            '       AS d ' \\\n-                            '   FROM session_history ' \\\n-                            '   WHERE session_history.stopped >= %s ' \\\n-                            '       AND session_history.media_type = \"episode\" %s ' \\\n-                            '   GROUP BY %s) AS sh ' \\\n-                            'JOIN session_history_metadata AS shm ON shm.id = sh.id ' \\\n-                            'GROUP BY shm.grandparent_title ' \\\n-                            'ORDER BY %s DESC, sh.started DESC ' \\\n-                            'LIMIT %s OFFSET %s ' % (timestamp, where_id, group_by, sort_type, stats_count, stats_start)\n+                    query = \"SELECT sh.id, shm.grandparent_title, sh.grandparent_rating_key, \" \\\n+                            \"shm.grandparent_thumb, sh.section_id, \" \\\n+                            \"shm.year, sh.rating_key, shm.art, sh.media_type, \" \\\n+                            \"shm.content_rating, shm.labels, sh.started, shm.live, shm.guid, \" \\\n+                            \"MAX(sh.started) AS last_watch, COUNT(sh.id) AS total_plays, SUM(sh.d) AS total_duration \" \\\n+                            \"FROM (SELECT *, SUM(CASE WHEN stopped > 0 THEN (stopped - started) - \" \\\n+                            \"       (CASE WHEN paused_counter IS NULL THEN 0 ELSE paused_counter END) ELSE 0 END) \" \\\n+                            \"       AS d \" \\\n+                            \"   FROM session_history \" \\\n+                            \"   WHERE session_history.stopped >= %s \" \\\n+                            \"       AND session_history.media_type = 'episode' %s \" \\\n+                            \"   GROUP BY %s) AS sh \" \\\n+                            \"JOIN session_history_metadata AS shm ON shm.id = sh.id \" \\\n+                            \"GROUP BY shm.grandparent_title \" \\\n+                            \"ORDER BY %s DESC, sh.started DESC \" \\\n+                            \"LIMIT %s OFFSET %s \" % (timestamp, where_id, group_by, sort_type, stats_count, stats_start)\n                     result = monitor_db.select(query)\n                 except Exception as e:\n                     logger.warn(\"Tautulli DataFactory :: Unable to execute database query for get_home_stats: top_tv: %s.\" % e)\n@@ -549,23 +549,23 @@ def get_home_stats(self, grouping=None, time_range=30, stats_type='plays',\n             elif stat == 'popular_tv':\n                 popular_tv = []\n                 try:\n-                    query = 'SELECT sh.id, shm.grandparent_title, sh.grandparent_rating_key, ' \\\n-                            'shm.grandparent_thumb, sh.section_id, ' \\\n-                            'shm.year, sh.rating_key, shm.art, sh.media_type, ' \\\n-                            'shm.content_rating, shm.labels, sh.started, shm.live, shm.guid, ' \\\n-                            'COUNT(DISTINCT sh.user_id) AS users_watched, ' \\\n-                            'MAX(sh.started) AS last_watch, COUNT(sh.id) as total_plays, SUM(sh.d) AS total_duration ' \\\n-                            'FROM (SELECT *, SUM(CASE WHEN stopped > 0 THEN (stopped - started) - ' \\\n-                            '       (CASE WHEN paused_counter IS NULL THEN 0 ELSE paused_counter END) ELSE 0 END) ' \\\n-                            '       AS d ' \\\n-                            '   FROM session_history ' \\\n-                            '   WHERE session_history.stopped >= %s ' \\\n-                            '       AND session_history.media_type = \"episode\" %s ' \\\n-                            '   GROUP BY %s) AS sh ' \\\n-                            'JOIN session_history_metadata AS shm ON shm.id = sh.id ' \\\n-                            'GROUP BY shm.grandparent_title ' \\\n-                            'ORDER BY users_watched DESC, %s DESC, sh.started DESC ' \\\n-                            'LIMIT %s OFFSET %s ' % (timestamp, where_id, group_by, sort_type, stats_count, stats_start)\n+                    query = \"SELECT sh.id, shm.grandparent_title, sh.grandparent_rating_key, \" \\\n+                            \"shm.grandparent_thumb, sh.section_id, \" \\\n+                            \"shm.year, sh.rating_key, shm.art, sh.media_type, \" \\\n+                            \"shm.content_rating, shm.labels, sh.started, shm.live, shm.guid, \" \\\n+                            \"COUNT(DISTINCT sh.user_id) AS users_watched, \" \\\n+                            \"MAX(sh.started) AS last_watch, COUNT(sh.id) as total_plays, SUM(sh.d) AS total_duration \" \\\n+                            \"FROM (SELECT *, SUM(CASE WHEN stopped > 0 THEN (stopped - started) - \" \\\n+                            \"       (CASE WHEN paused_counter IS NULL THEN 0 ELSE paused_counter END) ELSE 0 END) \" \\\n+                            \"       AS d \" \\\n+                            \"   FROM session_history \" \\\n+                            \"   WHERE session_history.stopped >= %s \" \\\n+                            \"       AND session_history.media_type = 'episode' %s \" \\\n+                            \"   GROUP BY %s) AS sh \" \\\n+                            \"JOIN session_history_metadata AS shm ON shm.id = sh.id \" \\\n+                            \"GROUP BY shm.grandparent_title \" \\\n+                            \"ORDER BY users_watched DESC, %s DESC, sh.started DESC \" \\\n+                            \"LIMIT %s OFFSET %s \" % (timestamp, where_id, group_by, sort_type, stats_count, stats_start)\n                     result = monitor_db.select(query)\n                 except Exception as e:\n                     logger.warn(\"Tautulli DataFactory :: Unable to execute database query for get_home_stats: popular_tv: %s.\" % e)\n@@ -602,21 +602,21 @@ def get_home_stats(self, grouping=None, time_range=30, stats_type='plays',\n             elif stat == 'top_music':\n                 top_music = []\n                 try:\n-                    query = 'SELECT sh.id, shm.grandparent_title, shm.original_title, shm.year, ' \\\n-                            'sh.grandparent_rating_key, shm.grandparent_thumb, sh.section_id, ' \\\n-                            'shm.art, sh.media_type, shm.content_rating, shm.labels, sh.started, shm.live, shm.guid, ' \\\n-                            'MAX(sh.started) AS last_watch, COUNT(sh.id) AS total_plays, SUM(sh.d) AS total_duration ' \\\n-                            'FROM (SELECT *, SUM(CASE WHEN stopped > 0 THEN (stopped - started) - ' \\\n-                            '       (CASE WHEN paused_counter IS NULL THEN 0 ELSE paused_counter END) ELSE 0 END) ' \\\n-                            '       AS d ' \\\n-                            '   FROM session_history ' \\\n-                            '   WHERE session_history.stopped >= %s ' \\\n-                            '       AND session_history.media_type = \"track\" %s ' \\\n-                            '   GROUP BY %s) AS sh ' \\\n-                            'JOIN session_history_metadata AS shm ON shm.id = sh.id ' \\\n-                            'GROUP BY shm.original_title, shm.grandparent_title ' \\\n-                            'ORDER BY %s DESC, sh.started DESC ' \\\n-                            'LIMIT %s OFFSET %s ' % (timestamp, where_id, group_by, sort_type, stats_count, stats_start)\n+                    query = \"SELECT sh.id, shm.grandparent_title, shm.original_title, shm.year, \" \\\n+                            \"sh.grandparent_rating_key, shm.grandparent_thumb, sh.section_id, \" \\\n+                            \"shm.art, sh.media_type, shm.content_rating, shm.labels, sh.started, shm.live, shm.guid, \" \\\n+                            \"MAX(sh.started) AS last_watch, COUNT(sh.id) AS total_plays, SUM(sh.d) AS total_duration \" \\\n+                            \"FROM (SELECT *, SUM(CASE WHEN stopped > 0 THEN (stopped - started) - \" \\\n+                            \"       (CASE WHEN paused_counter IS NULL THEN 0 ELSE paused_counter END) ELSE 0 END) \" \\\n+                            \"       AS d \" \\\n+                            \"   FROM session_history \" \\\n+                            \"   WHERE session_history.stopped >= %s \" \\\n+                            \"       AND session_history.media_type = 'track' %s \" \\\n+                            \"   GROUP BY %s) AS sh \" \\\n+                            \"JOIN session_history_metadata AS shm ON shm.id = sh.id \" \\\n+                            \"GROUP BY shm.original_title, shm.grandparent_title \" \\\n+                            \"ORDER BY %s DESC, sh.started DESC \" \\\n+                            \"LIMIT %s OFFSET %s \" % (timestamp, where_id, group_by, sort_type, stats_count, stats_start)\n                     result = monitor_db.select(query)\n                 except Exception as e:\n                     logger.warn(\"Tautulli DataFactory :: Unable to execute database query for get_home_stats: top_music: %s.\" % e)\n@@ -655,22 +655,22 @@ def get_home_stats(self, grouping=None, time_range=30, stats_type='plays',\n             elif stat == 'popular_music':\n                 popular_music = []\n                 try:\n-                    query = 'SELECT sh.id, shm.grandparent_title, shm.original_title, shm.year, ' \\\n-                            'sh.grandparent_rating_key, shm.grandparent_thumb, sh.section_id, ' \\\n-                            'shm.art, sh.media_type, shm.content_rating, shm.labels, sh.started, shm.live, shm.guid, ' \\\n-                            'COUNT(DISTINCT sh.user_id) AS users_watched, ' \\\n-                            'MAX(sh.started) AS last_watch, COUNT(sh.id) as total_plays, SUM(sh.d) AS total_duration ' \\\n-                            'FROM (SELECT *, SUM(CASE WHEN stopped > 0 THEN (stopped - started) - ' \\\n-                            '       (CASE WHEN paused_counter IS NULL THEN 0 ELSE paused_counter END) ELSE 0 END) ' \\\n-                            '       AS d ' \\\n-                            '   FROM session_history ' \\\n-                            '   WHERE session_history.stopped >= %s ' \\\n-                            '       AND session_history.media_type = \"track\" %s ' \\\n-                            '   GROUP BY %s) AS sh ' \\\n-                            'JOIN session_history_metadata AS shm ON shm.id = sh.id ' \\\n-                            'GROUP BY shm.original_title, shm.grandparent_title ' \\\n-                            'ORDER BY users_watched DESC, %s DESC, sh.started DESC ' \\\n-                            'LIMIT %s OFFSET %s ' % (timestamp, where_id, group_by, sort_type, stats_count, stats_start)\n+                    query = \"SELECT sh.id, shm.grandparent_title, shm.original_title, shm.year, \" \\\n+                            \"sh.grandparent_rating_key, shm.grandparent_thumb, sh.section_id, \" \\\n+                            \"shm.art, sh.media_type, shm.content_rating, shm.labels, sh.started, shm.live, shm.guid, \" \\\n+                            \"COUNT(DISTINCT sh.user_id) AS users_watched, \" \\\n+                            \"MAX(sh.started) AS last_watch, COUNT(sh.id) as total_plays, SUM(sh.d) AS total_duration \" \\\n+                            \"FROM (SELECT *, SUM(CASE WHEN stopped > 0 THEN (stopped - started) - \" \\\n+                            \"       (CASE WHEN paused_counter IS NULL THEN 0 ELSE paused_counter END) ELSE 0 END) \" \\\n+                            \"       AS d \" \\\n+                            \"   FROM session_history \" \\\n+                            \"   WHERE session_history.stopped >= %s \" \\\n+                            \"       AND session_history.media_type = 'track' %s \" \\\n+                            \"   GROUP BY %s) AS sh \" \\\n+                            \"JOIN session_history_metadata AS shm ON shm.id = sh.id \" \\\n+                            \"GROUP BY shm.original_title, shm.grandparent_title \" \\\n+                            \"ORDER BY users_watched DESC, %s DESC, sh.started DESC \" \\\n+                            \"LIMIT %s OFFSET %s \" % (timestamp, where_id, group_by, sort_type, stats_count, stats_start)\n                     result = monitor_db.select(query)\n                 except Exception as e:\n                     logger.warn(\"Tautulli DataFactory :: Unable to execute database query for get_home_stats: popular_music: %s.\" % e)\n@@ -707,28 +707,28 @@ def get_home_stats(self, grouping=None, time_range=30, stats_type='plays',\n             elif stat == 'top_libraries':\n                 top_libraries = []\n                 try:\n-                    query = 'SELECT sh.id, shm.title, shm.grandparent_title, shm.full_title, shm.year, ' \\\n-                            'shm.media_index, shm.parent_media_index, ' \\\n-                            'sh.rating_key, shm.grandparent_rating_key, shm.thumb, shm.grandparent_thumb, ' \\\n-                            'sh.user, sh.user_id, sh.player, sh.section_id, ' \\\n-                            'shm.art, sh.media_type, shm.content_rating, shm.labels, shm.live, shm.guid, ' \\\n-                            'ls.section_name, ls.section_type, ' \\\n-                            'ls.thumb AS library_thumb, ls.custom_thumb_url AS custom_thumb, ' \\\n-                            'ls.art AS library_art, ls.custom_art_url AS custom_art, ' \\\n-                            'sh.started, ' \\\n-                            'MAX(sh.started) AS last_watch, COUNT(sh.id) AS total_plays, SUM(sh.d) AS total_duration ' \\\n-                            'FROM (SELECT *, SUM(CASE WHEN stopped > 0 THEN (stopped - started) - ' \\\n-                            '       (CASE WHEN paused_counter IS NULL THEN 0 ELSE paused_counter END) ELSE 0 END) ' \\\n-                            '       AS d ' \\\n-                            '   FROM session_history ' \\\n-                            '   WHERE session_history.stopped >= %s %s ' \\\n-                            '   GROUP BY %s) AS sh ' \\\n-                            'JOIN session_history_metadata AS shm ON shm.id = sh.id ' \\\n-                            'LEFT OUTER JOIN (SELECT * FROM library_sections WHERE deleted_section = 0) ' \\\n-                            '   AS ls ON sh.section_id = ls.section_id ' \\\n-                            'GROUP BY sh.section_id ' \\\n-                            'ORDER BY %s DESC, sh.started DESC ' \\\n-                            'LIMIT %s OFFSET %s ' % (timestamp, where_id, group_by, sort_type, stats_count, stats_start)\n+                    query = \"SELECT sh.id, shm.title, shm.grandparent_title, shm.full_title, shm.year, \" \\\n+                            \"shm.media_index, shm.parent_media_index, \" \\\n+                            \"sh.rating_key, shm.grandparent_rating_key, shm.thumb, shm.grandparent_thumb, \" \\\n+                            \"sh.user, sh.user_id, sh.player, sh.section_id, \" \\\n+                            \"shm.art, sh.media_type, shm.content_rating, shm.labels, shm.live, shm.guid, \" \\\n+                            \"ls.section_name, ls.section_type, \" \\\n+                            \"ls.thumb AS library_thumb, ls.custom_thumb_url AS custom_thumb, \" \\\n+                            \"ls.art AS library_art, ls.custom_art_url AS custom_art, \" \\\n+                            \"sh.started, \" \\\n+                            \"MAX(sh.started) AS last_watch, COUNT(sh.id) AS total_plays, SUM(sh.d) AS total_duration \" \\\n+                            \"FROM (SELECT *, SUM(CASE WHEN stopped > 0 THEN (stopped - started) - \" \\\n+                            \"       (CASE WHEN paused_counter IS NULL THEN 0 ELSE paused_counter END) ELSE 0 END) \" \\\n+                            \"       AS d \" \\\n+                            \"   FROM session_history \" \\\n+                            \"   WHERE session_history.stopped >= %s %s \" \\\n+                            \"   GROUP BY %s) AS sh \" \\\n+                            \"JOIN session_history_metadata AS shm ON shm.id = sh.id \" \\\n+                            \"LEFT OUTER JOIN (SELECT * FROM library_sections WHERE deleted_section = 0) \" \\\n+                            \"   AS ls ON sh.section_id = ls.section_id \" \\\n+                            \"GROUP BY sh.section_id \" \\\n+                            \"ORDER BY %s DESC, sh.started DESC \" \\\n+                            \"LIMIT %s OFFSET %s \" % (timestamp, where_id, group_by, sort_type, stats_count, stats_start)\n                     result = monitor_db.select(query)\n                 except Exception as e:\n                     logger.warn(\"Tautulli DataFactory :: Unable to execute database query for get_home_stats: top_libraries: %s.\" % e)\n@@ -795,28 +795,28 @@ def get_home_stats(self, grouping=None, time_range=30, stats_type='plays',\n             elif stat == 'top_users':\n                 top_users = []\n                 try:\n-                    query = 'SELECT sh.id, shm.title, shm.grandparent_title, shm.full_title, shm.year, ' \\\n-                            'shm.media_index, shm.parent_media_index, ' \\\n-                            'sh.rating_key, shm.grandparent_rating_key, shm.thumb, shm.grandparent_thumb, ' \\\n-                            'sh.user, sh.user_id, sh.player, sh.section_id, ' \\\n-                            'shm.art, sh.media_type, shm.content_rating, shm.labels, shm.live, shm.guid, ' \\\n-                            'u.thumb AS user_thumb, u.custom_avatar_url AS custom_thumb, ' \\\n-                            'sh.started, ' \\\n-                            '(CASE WHEN u.friendly_name IS NULL OR TRIM(u.friendly_name) = \"\"' \\\n-                            '   THEN u.username ELSE u.friendly_name END) ' \\\n-                            '   AS friendly_name, ' \\\n-                            'MAX(sh.started) AS last_watch, COUNT(sh.id) AS total_plays, SUM(sh.d) AS total_duration ' \\\n-                            'FROM (SELECT *, SUM(CASE WHEN stopped > 0 THEN (stopped - started) - ' \\\n-                            '       (CASE WHEN paused_counter IS NULL THEN 0 ELSE paused_counter END) ELSE 0 END) ' \\\n-                            '       AS d ' \\\n-                            '   FROM session_history ' \\\n-                            '   WHERE session_history.stopped >= %s %s ' \\\n-                            '   GROUP BY %s) AS sh ' \\\n-                            'JOIN session_history_metadata AS shm ON shm.id = sh.id ' \\\n-                            'LEFT OUTER JOIN users AS u ON sh.user_id = u.user_id ' \\\n-                            'GROUP BY sh.user_id ' \\\n-                            'ORDER BY %s DESC, sh.started DESC ' \\\n-                            'LIMIT %s OFFSET %s ' % (timestamp, where_id, group_by, sort_type, stats_count, stats_start)\n+                    query = \"SELECT sh.id, shm.title, shm.grandparent_title, shm.full_title, shm.year, \" \\\n+                            \"shm.media_index, shm.parent_media_index, \" \\\n+                            \"sh.rating_key, shm.grandparent_rating_key, shm.thumb, shm.grandparent_thumb, \" \\\n+                            \"sh.user, sh.user_id, sh.player, sh.section_id, \" \\\n+                            \"shm.art, sh.media_type, shm.content_rating, shm.labels, shm.live, shm.guid, \" \\\n+                            \"u.thumb AS user_thumb, u.custom_avatar_url AS custom_thumb, \" \\\n+                            \"sh.started, \" \\\n+                            \"(CASE WHEN u.friendly_name IS NULL OR TRIM(u.friendly_name) = ''\" \\\n+                            \"   THEN u.username ELSE u.friendly_name END) \" \\\n+                            \"   AS friendly_name, \" \\\n+                            \"MAX(sh.started) AS last_watch, COUNT(sh.id) AS total_plays, SUM(sh.d) AS total_duration \" \\\n+                            \"FROM (SELECT *, SUM(CASE WHEN stopped > 0 THEN (stopped - started) - \" \\\n+                            \"       (CASE WHEN paused_counter IS NULL THEN 0 ELSE paused_counter END) ELSE 0 END) \" \\\n+                            \"       AS d \" \\\n+                            \"   FROM session_history \" \\\n+                            \"   WHERE session_history.stopped >= %s %s \" \\\n+                            \"   GROUP BY %s) AS sh \" \\\n+                            \"JOIN session_history_metadata AS shm ON shm.id = sh.id \" \\\n+                            \"LEFT OUTER JOIN users AS u ON sh.user_id = u.user_id \" \\\n+                            \"GROUP BY sh.user_id \" \\\n+                            \"ORDER BY %s DESC, sh.started DESC \" \\\n+                            \"LIMIT %s OFFSET %s \" % (timestamp, where_id, group_by, sort_type, stats_count, stats_start)\n                     result = monitor_db.select(query)\n                 except Exception as e:\n                     logger.warn(\"Tautulli DataFactory :: Unable to execute database query for get_home_stats: top_users: %s.\" % e)\n@@ -873,17 +873,17 @@ def get_home_stats(self, grouping=None, time_range=30, stats_type='plays',\n                 top_platform = []\n \n                 try:\n-                    query = 'SELECT sh.platform, sh.started, ' \\\n-                            'MAX(sh.started) AS last_watch, COUNT(sh.id) AS total_plays, SUM(sh.d) AS total_duration ' \\\n-                            'FROM (SELECT *, SUM(CASE WHEN stopped > 0 THEN (stopped - started) - ' \\\n-                            '       (CASE WHEN paused_counter IS NULL THEN 0 ELSE paused_counter END) ELSE 0 END) ' \\\n-                            '       AS d ' \\\n-                            '   FROM session_history ' \\\n-                            '   WHERE session_history.stopped >= %s %s ' \\\n-                            '   GROUP BY %s) AS sh ' \\\n-                            'GROUP BY sh.platform ' \\\n-                            'ORDER BY %s DESC, sh.started DESC ' \\\n-                            'LIMIT %s OFFSET %s ' % (timestamp, where_id, group_by, sort_type, stats_count, stats_start)\n+                    query = \"SELECT sh.platform, sh.started, \" \\\n+                            \"MAX(sh.started) AS last_watch, COUNT(sh.id) AS total_plays, SUM(sh.d) AS total_duration \" \\\n+                            \"FROM (SELECT *, SUM(CASE WHEN stopped > 0 THEN (stopped - started) - \" \\\n+                            \"       (CASE WHEN paused_counter IS NULL THEN 0 ELSE paused_counter END) ELSE 0 END) \" \\\n+                            \"       AS d \" \\\n+                            \"   FROM session_history \" \\\n+                            \"   WHERE session_history.stopped >= %s %s \" \\\n+                            \"   GROUP BY %s) AS sh \" \\\n+                            \"GROUP BY sh.platform \" \\\n+                            \"ORDER BY %s DESC, sh.started DESC \" \\\n+                            \"LIMIT %s OFFSET %s \" % (timestamp, where_id, group_by, sort_type, stats_count, stats_start)\n                     result = monitor_db.select(query)\n                 except Exception as e:\n                     logger.warn(\"Tautulli DataFactory :: Unable to execute database query for get_home_stats: top_platforms: %s.\" % e)\n@@ -924,65 +924,65 @@ def get_home_stats(self, grouping=None, time_range=30, stats_type='plays',\n \n                 if plexpy.CONFIG.WATCHED_MARKER == 1:\n                     watched_threshold = (\n-                        '(CASE WHEN shm.marker_credits_final IS NULL '\n-                        'THEN sh._duration * (CASE WHEN sh.media_type = \"movie\" THEN %d ELSE %d END) / 100.0 '\n-                        'ELSE shm.marker_credits_final END) '\n-                        'AS watched_threshold'\n+                        \"(CASE WHEN shm.marker_credits_final IS NULL \"\n+                        \"THEN sh._duration * (CASE WHEN sh.media_type = 'movie' THEN %d ELSE %d END) / 100.0 \"\n+                        \"ELSE shm.marker_credits_final END) \"\n+                        \"AS watched_threshold\"\n                     ) % (movie_watched_percent, tv_watched_percent)\n-                    watched_where = '_view_offset >= watched_threshold'\n+                    watched_where = \"_view_offset >= watched_threshold\"\n                 elif plexpy.CONFIG.WATCHED_MARKER == 2:\n                     watched_threshold = (\n-                        '(CASE WHEN shm.marker_credits_first IS NULL '\n-                        'THEN sh._duration * (CASE WHEN sh.media_type = \"movie\" THEN %d ELSE %d END) / 100.0 '\n-                        'ELSE shm.marker_credits_first END) '\n-                        'AS watched_threshold'\n+                        \"(CASE WHEN shm.marker_credits_first IS NULL \"\n+                        \"THEN sh._duration * (CASE WHEN sh.media_type = 'movie' THEN %d ELSE %d END) / 100.0 \"\n+                        \"ELSE shm.marker_credits_first END) \"\n+                        \"AS watched_threshold\"\n                     ) % (movie_watched_percent, tv_watched_percent)\n-                    watched_where = '_view_offset >= watched_threshold'\n+                    watched_where = \"_view_offset >= watched_threshold\"\n                 elif plexpy.CONFIG.WATCHED_MARKER == 3:\n                     watched_threshold = (\n-                        'MIN('\n-                        '(CASE WHEN shm.marker_credits_first IS NULL '\n-                        'THEN sh._duration * (CASE WHEN sh.media_type = \"movie\" THEN %d ELSE %d END) / 100.0 '\n-                        'ELSE shm.marker_credits_first END), '\n-                        'sh._duration * (CASE WHEN sh.media_type = \"movie\" THEN %d ELSE %d END) / 100.0) '\n-                        'AS watched_threshold'\n+                        \"MIN(\"\n+                        \"(CASE WHEN shm.marker_credits_first IS NULL \"\n+                        \"THEN sh._duration * (CASE WHEN sh.media_type = 'movie' THEN %d ELSE %d END) / 100.0 \"\n+                        \"ELSE shm.marker_credits_first END), \"\n+                        \"sh._duration * (CASE WHEN sh.media_type = 'movie' THEN %d ELSE %d END) / 100.0) \"\n+                        \"AS watched_threshold\"\n                     ) % (movie_watched_percent, tv_watched_percent, movie_watched_percent, tv_watched_percent)\n-                    watched_where = '_view_offset >= watched_threshold'\n+                    watched_where = \"_view_offset >= watched_threshold\"\n                 else:\n-                    watched_threshold = 'NULL AS watched_threshold'\n+                    watched_threshold = \"NULL AS watched_threshold\"\n                     watched_where = (\n-                        'sh.media_type == \"movie\" AND percent_complete >= %d '\n-                        'OR sh.media_type == \"episode\" AND percent_complete >= %d'\n+                        \"sh.media_type == 'movie' AND percent_complete >= %d \"\n+                        \"OR sh.media_type == 'episode' AND percent_complete >= %d\"\n                     ) % (movie_watched_percent, tv_watched_percent)\n \n                 last_watched = []\n                 try:\n-                    query = 'SELECT sh.id, shm.title, shm.grandparent_title, shm.full_title, shm.year, ' \\\n-                            'shm.media_index, shm.parent_media_index, ' \\\n-                            'sh.rating_key, shm.grandparent_rating_key, shm.thumb, shm.grandparent_thumb, ' \\\n-                            'sh.user, sh.user_id, u.custom_avatar_url as user_thumb, sh.player, sh.section_id, ' \\\n-                            'shm.art, sh.media_type, shm.content_rating, shm.labels, shm.live, shm.guid, ' \\\n-                            '(CASE WHEN u.friendly_name IS NULL OR TRIM(u.friendly_name) = \"\"' \\\n-                            '   THEN u.username ELSE u.friendly_name END) ' \\\n-                            '   AS friendly_name, ' \\\n-                            'MAX(sh.started) AS last_watch, sh._view_offset, sh._duration, ' \\\n-                            '(sh._view_offset / sh._duration * 100) AS percent_complete, ' \\\n-                            '%s ' \\\n-                            'FROM (SELECT *, MAX(session_history.id), ' \\\n-                            '   (CASE WHEN view_offset IS NULL THEN 0.1 ELSE view_offset * 1.0 END) AS _view_offset, ' \\\n-                            '   (CASE WHEN duration IS NULL THEN 1.0 ELSE duration * 1.0 END) AS _duration ' \\\n-                            '   FROM session_history ' \\\n-                            '   JOIN session_history_metadata ON session_history_metadata.id = session_history.id ' \\\n-                            '   WHERE session_history.stopped >= %s ' \\\n-                            '       AND (session_history.media_type = \"movie\" ' \\\n-                            '           OR session_history.media_type = \"episode\") %s ' \\\n-                            '   GROUP BY %s) AS sh ' \\\n-                            'JOIN session_history_metadata AS shm ON shm.id = sh.id ' \\\n-                            'LEFT OUTER JOIN users AS u ON sh.user_id = u.user_id ' \\\n-                            'WHERE %s ' \\\n-                            'GROUP BY sh.id ' \\\n-                            'ORDER BY last_watch DESC ' \\\n-                            'LIMIT %s OFFSET %s' % (watched_threshold,\n+                    query = \"SELECT sh.id, shm.title, shm.grandparent_title, shm.full_title, shm.year, \" \\\n+                            \"shm.media_index, shm.parent_media_index, \" \\\n+                            \"sh.rating_key, shm.grandparent_rating_key, shm.thumb, shm.grandparent_thumb, \" \\\n+                            \"sh.user, sh.user_id, u.custom_avatar_url as user_thumb, sh.player, sh.section_id, \" \\\n+                            \"shm.art, sh.media_type, shm.content_rating, shm.labels, shm.live, shm.guid, \" \\\n+                            \"(CASE WHEN u.friendly_name IS NULL OR TRIM(u.friendly_name) = ''\" \\\n+                            \"   THEN u.username ELSE u.friendly_name END) \" \\\n+                            \"   AS friendly_name, \" \\\n+                            \"MAX(sh.started) AS last_watch, sh._view_offset, sh._duration, \" \\\n+                            \"(sh._view_offset / sh._duration * 100) AS percent_complete, \" \\\n+                            \"%s \" \\\n+                            \"FROM (SELECT *, MAX(session_history.id), \" \\\n+                            \"   (CASE WHEN view_offset IS NULL THEN 0.1 ELSE view_offset * 1.0 END) AS _view_offset, \" \\\n+                            \"   (CASE WHEN duration IS NULL THEN 1.0 ELSE duration * 1.0 END) AS _duration \" \\\n+                            \"   FROM session_history \" \\\n+                            \"   JOIN session_history_metadata ON session_history_metadata.id = session_history.id \" \\\n+                            \"   WHERE session_history.stopped >= %s \" \\\n+                            \"       AND (session_history.media_type = 'movie' \" \\\n+                            \"           OR session_history.media_type = 'episode') %s \" \\\n+                            \"   GROUP BY %s) AS sh \" \\\n+                            \"JOIN session_history_metadata AS shm ON shm.id = sh.id \" \\\n+                            \"LEFT OUTER JOIN users AS u ON sh.user_id = u.user_id \" \\\n+                            \"WHERE %s \" \\\n+                            \"GROUP BY sh.id \" \\\n+                            \"ORDER BY last_watch DESC \" \\\n+                            \"LIMIT %s OFFSET %s\" % (watched_threshold,\n                                                     timestamp, where_id, group_by, watched_where,\n                                                     stats_count, stats_start)\n                     result = monitor_db.select(query)\n@@ -1068,10 +1068,10 @@ def calc_most_concurrent(title, result):\n                 most_concurrent = []\n \n                 try:\n-                    base_query = 'SELECT sh.started, sh.stopped ' \\\n-                                 'FROM session_history AS sh ' \\\n-                                 'JOIN session_history_media_info AS shmi ON sh.id = shmi.id ' \\\n-                                 'WHERE sh.stopped >= %s ' % timestamp\n+                    base_query = \"SELECT sh.started, sh.stopped \" \\\n+                                 \"FROM session_history AS sh \" \\\n+                                 \"JOIN session_history_media_info AS shmi ON sh.id = shmi.id \" \\\n+                                 \"WHERE sh.stopped >= %s \" % timestamp\n \n                     title = 'Concurrent Streams'\n                     query = base_query\n@@ -1081,21 +1081,21 @@ def calc_most_concurrent(title, result):\n \n                     title = 'Concurrent Transcodes'\n                     query = base_query \\\n-                          + 'AND shmi.transcode_decision = \"transcode\" '\n+                          + \"AND shmi.transcode_decision = 'transcode' \"\n                     result = monitor_db.select(query)\n                     if result:\n                         most_concurrent.append(calc_most_concurrent(title, result))\n \n                     title = 'Concurrent Direct Streams'\n                     query = base_query \\\n-                          + 'AND shmi.transcode_decision = \"copy\" '\n+                          + \"AND shmi.transcode_decision = 'copy' \"\n                     result = monitor_db.select(query)\n                     if result:\n                         most_concurrent.append(calc_most_concurrent(title, result))\n \n                     title = 'Concurrent Direct Plays'\n                     query = base_query \\\n-                          + 'AND shmi.transcode_decision = \"direct play\" '\n+                          + \"AND shmi.transcode_decision = 'direct play' \"\n                     result = monitor_db.select(query)\n                     if result:\n                         most_concurrent.append(calc_most_concurrent(title, result))\n@@ -1120,21 +1120,21 @@ def get_library_stats(self, library_cards=[]):\n         library_stats = []\n \n         try:\n-            query = 'SELECT ls.id, ls.section_id, ls.section_name, ls.section_type, ls.thumb AS library_thumb, ' \\\n-                    'ls.custom_thumb_url AS custom_thumb, ls.art AS library_art, ls.custom_art_url AS custom_art, ' \\\n-                    'ls.count, ls.parent_count, ls.child_count, ' \\\n-                    'sh.id, shm.title, shm.grandparent_title, shm.full_title, shm.year, ' \\\n-                    'shm.media_index, shm.parent_media_index, ' \\\n-                    'sh.rating_key, shm.grandparent_rating_key, shm.thumb, shm.grandparent_thumb, ' \\\n-                    'sh.user, sh.user_id, sh.player, ' \\\n-                    'shm.art, sh.media_type, shm.content_rating, shm.labels, shm.live, shm.guid, ' \\\n-                    'MAX(sh.started) AS last_watch ' \\\n-                    'FROM library_sections AS ls ' \\\n-                    'LEFT OUTER JOIN session_history AS sh ON ls.section_id = sh.section_id ' \\\n-                    'LEFT OUTER JOIN session_history_metadata AS shm ON sh.id = shm.id ' \\\n-                    'WHERE ls.section_id IN (%s) AND ls.deleted_section = 0 ' \\\n-                    'GROUP BY ls.id ' \\\n-                    'ORDER BY ls.section_type, ls.count DESC, ls.parent_count DESC, ls.child_count DESC ' % ','.join(library_cards)\n+            query = \"SELECT ls.id, ls.section_id, ls.section_name, ls.section_type, ls.thumb AS library_thumb, \" \\\n+                    \"ls.custom_thumb_url AS custom_thumb, ls.art AS library_art, ls.custom_art_url AS custom_art, \" \\\n+                    \"ls.count, ls.parent_count, ls.child_count, \" \\\n+                    \"sh.id, shm.title, shm.grandparent_title, shm.full_title, shm.year, \" \\\n+                    \"shm.media_index, shm.parent_media_index, \" \\\n+                    \"sh.rating_key, shm.grandparent_rating_key, shm.thumb, shm.grandparent_thumb, \" \\\n+                    \"sh.user, sh.user_id, sh.player, \" \\\n+                    \"shm.art, sh.media_type, shm.content_rating, shm.labels, shm.live, shm.guid, \" \\\n+                    \"MAX(sh.started) AS last_watch \" \\\n+                    \"FROM library_sections AS ls \" \\\n+                    \"LEFT OUTER JOIN session_history AS sh ON ls.section_id = sh.section_id \" \\\n+                    \"LEFT OUTER JOIN session_history_metadata AS shm ON sh.id = shm.id \" \\\n+                    \"WHERE ls.section_id IN (%s) AND ls.deleted_section = 0 \" \\\n+                    \"GROUP BY ls.id \" \\\n+                    \"ORDER BY ls.section_type, ls.count DESC, ls.parent_count DESC, ls.child_count DESC \" % \",\".join(library_cards)\n             result = monitor_db.select(query)\n         except Exception as e:\n             logger.warn(\"Tautulli DataFactory :: Unable to execute database query for get_library_stats: %s.\" % e)\n@@ -1228,15 +1228,15 @@ def get_watch_time_stats(self, rating_key=None, media_type=None, grouping=None,\n             try:\n                 if days > 0:\n                     if str(rating_key).isdigit():\n-                        query = 'SELECT (SUM(stopped - started) - ' \\\n-                                'SUM(CASE WHEN paused_counter IS NULL THEN 0 ELSE paused_counter END)) AS total_time, ' \\\n-                                'COUNT(DISTINCT %s) AS total_plays, section_id ' \\\n-                                'FROM session_history ' \\\n-                                'JOIN session_history_metadata ON session_history_metadata.id = session_history.id ' \\\n-                                'WHERE stopped >= ? ' \\\n-                                'AND (session_history.grandparent_rating_key IN (%s) ' \\\n-                                'OR session_history.parent_rating_key IN (%s) ' \\\n-                                'OR session_history.rating_key IN (%s))' % (\n+                        query = \"SELECT (SUM(stopped - started) - \" \\\n+                                \"SUM(CASE WHEN paused_counter IS NULL THEN 0 ELSE paused_counter END)) AS total_time, \" \\\n+                                \"COUNT(DISTINCT %s) AS total_plays, section_id \" \\\n+                                \"FROM session_history \" \\\n+                                \"JOIN session_history_metadata ON session_history_metadata.id = session_history.id \" \\\n+                                \"WHERE stopped >= ? \" \\\n+                                \"AND (session_history.grandparent_rating_key IN (%s) \" \\\n+                                \"OR session_history.parent_rating_key IN (%s) \" \\\n+                                \"OR session_history.rating_key IN (%s))\" % (\n                                     group_by, rating_keys_arg, rating_keys_arg, rating_keys_arg\n                                 )\n                         \n@@ -1245,14 +1245,14 @@ def get_watch_time_stats(self, rating_key=None, media_type=None, grouping=None,\n                         result = []\n                 else:\n                     if str(rating_key).isdigit():\n-                        query = 'SELECT (SUM(stopped - started) - ' \\\n-                                'SUM(CASE WHEN paused_counter IS NULL THEN 0 ELSE paused_counter END)) AS total_time, ' \\\n-                                'COUNT(DISTINCT %s) AS total_plays, section_id ' \\\n-                                'FROM session_history ' \\\n-                                'JOIN session_history_metadata ON session_history_metadata.id = session_history.id ' \\\n-                                'WHERE (session_history.grandparent_rating_key IN (%s) ' \\\n-                                'OR session_history.parent_rating_key IN (%s) ' \\\n-                                'OR session_history.rating_key IN (%s))' % (\n+                        query = \"SELECT (SUM(stopped - started) - \" \\\n+                                \"SUM(CASE WHEN paused_counter IS NULL THEN 0 ELSE paused_counter END)) AS total_time, \" \\\n+                                \"COUNT(DISTINCT %s) AS total_plays, section_id \" \\\n+                                \"FROM session_history \" \\\n+                                \"JOIN session_history_metadata ON session_history_metadata.id = session_history.id \" \\\n+                                \"WHERE (session_history.grandparent_rating_key IN (%s) \" \\\n+                                \"OR session_history.parent_rating_key IN (%s) \" \\\n+                                \"OR session_history.rating_key IN (%s))\" % (\n                                     group_by, rating_keys_arg, rating_keys_arg, rating_keys_arg\n                                 )\n                         \n@@ -1308,20 +1308,20 @@ def get_user_stats(self, rating_key=None, media_type=None, grouping=None):\n \n         try:\n             if str(rating_key).isdigit():\n-                query = 'SELECT (CASE WHEN users.friendly_name IS NULL OR TRIM(users.friendly_name) = \"\" ' \\\n-                        'THEN users.username ELSE users.friendly_name END) AS friendly_name, ' \\\n-                        'users.user_id, users.username, users.thumb, users.custom_avatar_url AS custom_thumb, ' \\\n-                        'COUNT(DISTINCT %s) AS total_plays, (SUM(stopped - started) - ' \\\n-                        'SUM(CASE WHEN paused_counter IS NULL THEN 0 ELSE paused_counter END)) AS total_time, ' \\\n-                        'section_id ' \\\n-                        'FROM session_history ' \\\n-                        'JOIN session_history_metadata ON session_history_metadata.id = session_history.id ' \\\n-                        'JOIN users ON users.user_id = session_history.user_id ' \\\n-                        'WHERE (session_history.grandparent_rating_key IN (%s) ' \\\n-                        'OR session_history.parent_rating_key IN (%s) ' \\\n-                        'OR session_history.rating_key IN (%s)) ' \\\n-                        'GROUP BY users.user_id ' \\\n-                        'ORDER BY total_plays DESC, total_time DESC' % (\n+                query = \"SELECT (CASE WHEN users.friendly_name IS NULL OR TRIM(users.friendly_name) = '' \" \\\n+                        \"THEN users.username ELSE users.friendly_name END) AS friendly_name, \" \\\n+                        \"users.user_id, users.username, users.thumb, users.custom_avatar_url AS custom_thumb, \" \\\n+                        \"COUNT(DISTINCT %s) AS total_plays, (SUM(stopped - started) - \" \\\n+                        \"SUM(CASE WHEN paused_counter IS NULL THEN 0 ELSE paused_counter END)) AS total_time, \" \\\n+                        \"section_id \" \\\n+                        \"FROM session_history \" \\\n+                        \"JOIN session_history_metadata ON session_history_metadata.id = session_history.id \" \\\n+                        \"JOIN users ON users.user_id = session_history.user_id \" \\\n+                        \"WHERE (session_history.grandparent_rating_key IN (%s) \" \\\n+                        \"OR session_history.parent_rating_key IN (%s) \" \\\n+                        \"OR session_history.rating_key IN (%s)) \" \\\n+                        \"GROUP BY users.user_id \" \\\n+                        \"ORDER BY total_plays DESC, total_time DESC\" % (\n                             group_by, rating_keys_arg, rating_keys_arg, rating_keys_arg\n                         )\n \n@@ -1362,53 +1362,53 @@ def get_stream_details(self, row_id=None, session_key=None):\n         user_cond = ''\n         table = 'session_history' if row_id else 'sessions'\n         if session.get_session_user_id():\n-            user_cond = 'AND %s.user_id = %s ' % (table, session.get_session_user_id())\n+            user_cond = \"AND %s.user_id = %s \" % (table, session.get_session_user_id())\n \n         if row_id:\n-            query = 'SELECT bitrate, video_full_resolution, ' \\\n-                    'optimized_version, optimized_version_profile, optimized_version_title, ' \\\n-                    'synced_version, synced_version_profile, ' \\\n-                    'container, video_codec, video_bitrate, video_width, video_height, video_framerate, ' \\\n-                    'video_dynamic_range, aspect_ratio, ' \\\n-                    'audio_codec, audio_bitrate, audio_channels, audio_language, audio_language_code, ' \\\n-                    'subtitle_codec, subtitle_forced, subtitle_language, ' \\\n-                    'stream_bitrate, stream_video_full_resolution, quality_profile, stream_container_decision, stream_container, ' \\\n-                    'stream_video_decision, stream_video_codec, stream_video_bitrate, stream_video_width, stream_video_height, ' \\\n-                    'stream_video_framerate, stream_video_dynamic_range, ' \\\n-                    'stream_audio_decision, stream_audio_codec, stream_audio_bitrate, stream_audio_channels, ' \\\n-                    'stream_audio_language, stream_audio_language_code, ' \\\n-                    'subtitles, stream_subtitle_decision, stream_subtitle_codec, stream_subtitle_forced, stream_subtitle_language, ' \\\n-                    'transcode_hw_decoding, transcode_hw_encoding, ' \\\n-                    'video_decision, audio_decision, transcode_decision, width, height, container, ' \\\n-                    'transcode_container, transcode_video_codec, transcode_audio_codec, transcode_audio_channels, ' \\\n-                    'transcode_width, transcode_height, ' \\\n-                    'session_history_metadata.media_type, title, grandparent_title, original_title ' \\\n-                    'FROM session_history_media_info ' \\\n-                    'JOIN session_history ON session_history_media_info.id = session_history.id ' \\\n-                    'JOIN session_history_metadata ON session_history_media_info.id = session_history_metadata.id ' \\\n-                    'WHERE session_history_media_info.id = ? %s' % user_cond\n+            query = \"SELECT bitrate, video_full_resolution, \" \\\n+                    \"optimized_version, optimized_version_profile, optimized_version_title, \" \\\n+                    \"synced_version, synced_version_profile, \" \\\n+                    \"container, video_codec, video_bitrate, video_width, video_height, video_framerate, \" \\\n+                    \"video_dynamic_range, aspect_ratio, \" \\\n+                    \"audio_codec, audio_bitrate, audio_channels, audio_language, audio_language_code, \" \\\n+                    \"subtitle_codec, subtitle_forced, subtitle_language, \" \\\n+                    \"stream_bitrate, stream_video_full_resolution, quality_profile, stream_container_decision, stream_container, \" \\\n+                    \"stream_video_decision, stream_video_codec, stream_video_bitrate, stream_video_width, stream_video_height, \" \\\n+                    \"stream_video_framerate, stream_video_dynamic_range, \" \\\n+                    \"stream_audio_decision, stream_audio_codec, stream_audio_bitrate, stream_audio_channels, \" \\\n+                    \"stream_audio_language, stream_audio_language_code, \" \\\n+                    \"subtitles, stream_subtitle_decision, stream_subtitle_codec, stream_subtitle_forced, stream_subtitle_language, \" \\\n+                    \"transcode_hw_decoding, transcode_hw_encoding, \" \\\n+                    \"video_decision, audio_decision, transcode_decision, width, height, container, \" \\\n+                    \"transcode_container, transcode_video_codec, transcode_audio_codec, transcode_audio_channels, \" \\\n+                    \"transcode_width, transcode_height, \" \\\n+                    \"session_history_metadata.media_type, title, grandparent_title, original_title \" \\\n+                    \"FROM session_history_media_info \" \\\n+                    \"JOIN session_history ON session_history_media_info.id = session_history.id \" \\\n+                    \"JOIN session_history_metadata ON session_history_media_info.id = session_history_metadata.id \" \\\n+                    \"WHERE session_history_media_info.id = ? %s\" % user_cond\n             result = monitor_db.select(query, args=[row_id])\n         elif session_key:\n-            query = 'SELECT bitrate, video_full_resolution, ' \\\n-                    'optimized_version, optimized_version_profile, optimized_version_title, ' \\\n-                    'synced_version, synced_version_profile, ' \\\n-                    'container, video_codec, video_bitrate, video_width, video_height, video_framerate, ' \\\n-                    'video_dynamic_range, aspect_ratio, ' \\\n-                    'audio_codec, audio_bitrate, audio_channels, audio_language, audio_language_code, ' \\\n-                    'subtitle_codec, subtitle_forced, subtitle_language, ' \\\n-                    'stream_bitrate, stream_video_full_resolution, quality_profile, stream_container_decision, stream_container, ' \\\n-                    'stream_video_decision, stream_video_codec, stream_video_bitrate, stream_video_width, stream_video_height, ' \\\n-                    'stream_video_framerate, stream_video_dynamic_range, ' \\\n-                    'stream_audio_decision, stream_audio_codec, stream_audio_bitrate, stream_audio_channels, ' \\\n-                    'stream_audio_language, stream_audio_language_code, ' \\\n-                    'subtitles, stream_subtitle_decision, stream_subtitle_codec, stream_subtitle_forced, stream_subtitle_language, ' \\\n-                    'transcode_hw_decoding, transcode_hw_encoding, ' \\\n-                    'video_decision, audio_decision, transcode_decision, width, height, container, ' \\\n-                    'transcode_container, transcode_video_codec, transcode_audio_codec, transcode_audio_channels, ' \\\n-                    'transcode_width, transcode_height, ' \\\n-                    'media_type, title, grandparent_title, original_title ' \\\n-                    'FROM sessions ' \\\n-                    'WHERE session_key = ? %s' % user_cond\n+            query = \"SELECT bitrate, video_full_resolution, \" \\\n+                    \"optimized_version, optimized_version_profile, optimized_version_title, \" \\\n+                    \"synced_version, synced_version_profile, \" \\\n+                    \"container, video_codec, video_bitrate, video_width, video_height, video_framerate, \" \\\n+                    \"video_dynamic_range, aspect_ratio, \" \\\n+                    \"audio_codec, audio_bitrate, audio_channels, audio_language, audio_language_code, \" \\\n+                    \"subtitle_codec, subtitle_forced, subtitle_language, \" \\\n+                    \"stream_bitrate, stream_video_full_resolution, quality_profile, stream_container_decision, stream_container, \" \\\n+                    \"stream_video_decision, stream_video_codec, stream_video_bitrate, stream_video_width, stream_video_height, \" \\\n+                    \"stream_video_framerate, stream_video_dynamic_range, \" \\\n+                    \"stream_audio_decision, stream_audio_codec, stream_audio_bitrate, stream_audio_channels, \" \\\n+                    \"stream_audio_language, stream_audio_language_code, \" \\\n+                    \"subtitles, stream_subtitle_decision, stream_subtitle_codec, stream_subtitle_forced, stream_subtitle_language, \" \\\n+                    \"transcode_hw_decoding, transcode_hw_encoding, \" \\\n+                    \"video_decision, audio_decision, transcode_decision, width, height, container, \" \\\n+                    \"transcode_container, transcode_video_codec, transcode_audio_codec, transcode_audio_channels, \" \\\n+                    \"transcode_width, transcode_height, \" \\\n+                    \"media_type, title, grandparent_title, original_title \" \\\n+                    \"FROM sessions \" \\\n+                    \"WHERE session_key = ? %s\" % user_cond\n             result = monitor_db.select(query, args=[session_key])\n         else:\n             return None\n@@ -1499,43 +1499,43 @@ def get_metadata_details(self, rating_key='', guid=''):\n \n         if rating_key or guid:\n             if guid:\n-                where = 'session_history_metadata.guid LIKE ?'\n+                where = \"session_history_metadata.guid LIKE ?\"\n                 args = [guid.split('?')[0] + '%']  # SQLite LIKE wildcard\n             else:\n-                where = 'session_history_metadata.rating_key = ?'\n+                where = \"session_history_metadata.rating_key = ?\"\n                 args = [rating_key]\n \n-            query = 'SELECT session_history.section_id, session_history_metadata.id, ' \\\n-                    'session_history_metadata.rating_key, session_history_metadata.parent_rating_key, ' \\\n-                    'session_history_metadata.grandparent_rating_key, session_history_metadata.title, ' \\\n-                    'session_history_metadata.parent_title, session_history_metadata.grandparent_title, ' \\\n-                    'session_history_metadata.original_title, session_history_metadata.full_title, ' \\\n-                    'library_sections.section_name, ' \\\n-                    'session_history_metadata.media_index, session_history_metadata.parent_media_index, ' \\\n-                    'session_history_metadata.thumb, ' \\\n-                    'session_history_metadata.parent_thumb, session_history_metadata.grandparent_thumb, ' \\\n-                    'session_history_metadata.art, session_history_metadata.media_type, session_history_metadata.year, ' \\\n-                    'session_history_metadata.originally_available_at, session_history_metadata.added_at, ' \\\n-                    'session_history_metadata.updated_at, session_history_metadata.last_viewed_at, ' \\\n-                    'session_history_metadata.content_rating, session_history_metadata.summary, ' \\\n-                    'session_history_metadata.tagline, session_history_metadata.rating, session_history_metadata.duration, ' \\\n-                    'session_history_metadata.guid, session_history_metadata.directors, session_history_metadata.writers, ' \\\n-                    'session_history_metadata.actors, session_history_metadata.genres, session_history_metadata.studio, ' \\\n-                    'session_history_metadata.labels, ' \\\n-                    'session_history_media_info.container, session_history_media_info.bitrate, ' \\\n-                    'session_history_media_info.video_codec, session_history_media_info.video_resolution, ' \\\n-                    'session_history_media_info.video_full_resolution, ' \\\n-                    'session_history_media_info.video_framerate, session_history_media_info.audio_codec, ' \\\n-                    'session_history_media_info.audio_channels, session_history_metadata.live, ' \\\n-                    'session_history_metadata.channel_call_sign, session_history_metadata.channel_identifier, ' \\\n-                    'session_history_metadata.channel_thumb ' \\\n-                    'FROM session_history_metadata ' \\\n-                    'JOIN library_sections ON session_history.section_id = library_sections.section_id ' \\\n-                    'JOIN session_history ON session_history_metadata.id = session_history.id ' \\\n-                    'JOIN session_history_media_info ON session_history_metadata.id = session_history_media_info.id ' \\\n-                    'WHERE %s ' \\\n-                    'ORDER BY session_history_metadata.id DESC ' \\\n-                    'LIMIT 1' % where\n+            query = \"SELECT session_history.section_id, session_history_metadata.id, \" \\\n+                    \"session_history_metadata.rating_key, session_history_metadata.parent_rating_key, \" \\\n+                    \"session_history_metadata.grandparent_rating_key, session_history_metadata.title, \" \\\n+                    \"session_history_metadata.parent_title, session_history_metadata.grandparent_title, \" \\\n+                    \"session_history_metadata.original_title, session_history_metadata.full_title, \" \\\n+                    \"library_sections.section_name, \" \\\n+                    \"session_history_metadata.media_index, session_history_metadata.parent_media_index, \" \\\n+                    \"session_history_metadata.thumb, \" \\\n+                    \"session_history_metadata.parent_thumb, session_history_metadata.grandparent_thumb, \" \\\n+                    \"session_history_metadata.art, session_history_metadata.media_type, session_history_metadata.year, \" \\\n+                    \"session_history_metadata.originally_available_at, session_history_metadata.added_at, \" \\\n+                    \"session_history_metadata.updated_at, session_history_metadata.last_viewed_at, \" \\\n+                    \"session_history_metadata.content_rating, session_history_metadata.summary, \" \\\n+                    \"session_history_metadata.tagline, session_history_metadata.rating, session_history_metadata.duration, \" \\\n+                    \"session_history_metadata.guid, session_history_metadata.directors, session_history_metadata.writers, \" \\\n+                    \"session_history_metadata.actors, session_history_metadata.genres, session_history_metadata.studio, \" \\\n+                    \"session_history_metadata.labels, \" \\\n+                    \"session_history_media_info.container, session_history_media_info.bitrate, \" \\\n+                    \"session_history_media_info.video_codec, session_history_media_info.video_resolution, \" \\\n+                    \"session_history_media_info.video_full_resolution, \" \\\n+                    \"session_history_media_info.video_framerate, session_history_media_info.audio_codec, \" \\\n+                    \"session_history_media_info.audio_channels, session_history_metadata.live, \" \\\n+                    \"session_history_metadata.channel_call_sign, session_history_metadata.channel_identifier, \" \\\n+                    \"session_history_metadata.channel_thumb \" \\\n+                    \"FROM session_history_metadata \" \\\n+                    \"JOIN library_sections ON session_history.section_id = library_sections.section_id \" \\\n+                    \"JOIN session_history ON session_history_metadata.id = session_history.id \" \\\n+                    \"JOIN session_history_media_info ON session_history_metadata.id = session_history_media_info.id \" \\\n+                    \"WHERE %s \" \\\n+                    \"ORDER BY session_history_metadata.id DESC \" \\\n+                    \"LIMIT 1\" % where\n             result = monitor_db.select(query=query, args=args)\n         else:\n             result = []\n@@ -1614,14 +1614,14 @@ def get_total_duration(self, custom_where=None):\n         where, args = datatables.build_custom_where(custom_where=custom_where)\n \n         try:\n-            query = 'SELECT SUM(CASE WHEN stopped > 0 THEN (stopped - started) ELSE 0 END) - ' \\\n-                    'SUM(CASE WHEN paused_counter IS NULL THEN 0 ELSE paused_counter END) AS total_duration, ' \\\n-                    '(CASE WHEN session_history_metadata.live = 1 THEN \"live\" ELSE session_history.media_type END) ' \\\n-                    'AS media_type_live ' \\\n-                    'FROM session_history ' \\\n-                    'JOIN session_history_metadata ON session_history_metadata.id = session_history.id ' \\\n-                    'JOIN session_history_media_info ON session_history_media_info.id = session_history.id ' \\\n-                    '%s ' % where\n+            query = \"SELECT SUM(CASE WHEN stopped > 0 THEN (stopped - started) ELSE 0 END) - \" \\\n+                    \"SUM(CASE WHEN paused_counter IS NULL THEN 0 ELSE paused_counter END) AS total_duration, \" \\\n+                    \"(CASE WHEN session_history_metadata.live = 1 THEN 'live' ELSE session_history.media_type END) \" \\\n+                    \"AS media_type_live \" \\\n+                    \"FROM session_history \" \\\n+                    \"JOIN session_history_metadata ON session_history_metadata.id = session_history.id \" \\\n+                    \"JOIN session_history_media_info ON session_history_media_info.id = session_history.id \" \\\n+                    \"%s \" % where\n             result = monitor_db.select(query, args=args)\n         except Exception as e:\n             logger.warn(\"Tautulli DataFactory :: Unable to execute database query for get_total_duration: %s.\" % e)\n@@ -1644,7 +1644,7 @@ def get_session_ip(self, session_key=''):\n \n         if session_key:\n             try:\n-                query = 'SELECT ip_address FROM sessions WHERE session_key = %d %s' % (int(session_key), user_cond)\n+                query = \"SELECT ip_address FROM sessions WHERE session_key = %d %s\" % (int(session_key), user_cond)\n                 result = monitor_db.select(query)\n             except Exception as e:\n                 logger.warn(\"Tautulli DataFactory :: Unable to execute database query for get_session_ip: %s.\" % e)\n@@ -1694,19 +1694,19 @@ def get_img_info(self, img=None, rating_key=None, width=None, height=None,\n \n         where = ''\n         if where_params:\n-            where = 'WHERE ' + ' AND '.join([w + ' = ?' for w in where_params])\n+            where = \"WHERE \" + \" AND \".join([w + \" = ?\" for w in where_params])\n \n         if order_by:\n-            order_by = 'ORDER BY ' + order_by + ' DESC'\n+            order_by = \"ORDER BY \" + order_by + \" DESC\"\n \n         if service == 'imgur':\n-            query = 'SELECT imgur_title AS img_title, imgur_url AS img_url FROM imgur_lookup ' \\\n-                    'JOIN image_hash_lookup ON imgur_lookup.img_hash = image_hash_lookup.img_hash ' \\\n-                    '%s %s' % (where, order_by)\n+            query = \"SELECT imgur_title AS img_title, imgur_url AS img_url FROM imgur_lookup \" \\\n+                    \"JOIN image_hash_lookup ON imgur_lookup.img_hash = image_hash_lookup.img_hash \" \\\n+                    \"%s %s\" % (where, order_by)\n         elif service == 'cloudinary':\n-            query = 'SELECT cloudinary_title AS img_title, cloudinary_url AS img_url FROM cloudinary_lookup ' \\\n-                    'JOIN image_hash_lookup ON cloudinary_lookup.img_hash = image_hash_lookup.img_hash ' \\\n-                    '%s %s' % (where, order_by)\n+            query = \"SELECT cloudinary_title AS img_title, cloudinary_url AS img_url FROM cloudinary_lookup \" \\\n+                    \"JOIN image_hash_lookup ON cloudinary_lookup.img_hash = image_hash_lookup.img_hash \" \\\n+                    \"%s %s\" % (where, order_by)\n         else:\n             logger.warn(\"Tautulli DataFactory :: Unable to execute database query for get_img_info: \"\n                         \"service not provided.\")\n@@ -1754,14 +1754,14 @@ def delete_img_info(self, rating_key=None, service='', delete_all=False):\n         args = []\n         log_msg = ''\n         if rating_key:\n-            where = 'WHERE rating_key = ?'\n+            where = \"WHERE rating_key = ?\"\n             args = [rating_key]\n             log_msg = ' for rating_key %s' % rating_key\n \n         if service.lower() == 'imgur':\n             # Delete from Imgur\n-            query = 'SELECT imgur_title, delete_hash, fallback FROM imgur_lookup ' \\\n-                    'JOIN image_hash_lookup ON imgur_lookup.img_hash = image_hash_lookup.img_hash %s' % where\n+            query = \"SELECT imgur_title, delete_hash, fallback FROM imgur_lookup \" \\\n+                    \"JOIN image_hash_lookup ON imgur_lookup.img_hash = image_hash_lookup.img_hash %s\" % where\n             results = monitor_db.select(query, args=args)\n \n             for imgur_info in results:\n@@ -1772,15 +1772,15 @@ def delete_img_info(self, rating_key=None, service='', delete_all=False):\n \n             logger.info(\"Tautulli DataFactory :: Deleting Imgur info%s from the database.\"\n                         % log_msg)\n-            result = monitor_db.action('DELETE FROM imgur_lookup WHERE img_hash '\n-                                       'IN (SELECT img_hash FROM image_hash_lookup %s)' % where,\n+            result = monitor_db.action(\"DELETE FROM imgur_lookup WHERE img_hash \"\n+                                       \"IN (SELECT img_hash FROM image_hash_lookup %s)\" % where,\n                                        args)\n \n         elif service.lower() == 'cloudinary':\n             # Delete from Cloudinary\n-            query = 'SELECT cloudinary_title, rating_key, fallback FROM cloudinary_lookup ' \\\n-                    'JOIN image_hash_lookup ON cloudinary_lookup.img_hash = image_hash_lookup.img_hash %s ' \\\n-                    'GROUP BY rating_key' % where\n+            query = \"SELECT cloudinary_title, rating_key, fallback FROM cloudinary_lookup \" \\\n+                    \"JOIN image_hash_lookup ON cloudinary_lookup.img_hash = image_hash_lookup.img_hash %s \" \\\n+                    \"GROUP BY rating_key\" % where\n             results = monitor_db.select(query, args=args)\n \n             if delete_all:\n@@ -1791,8 +1791,8 @@ def delete_img_info(self, rating_key=None, service='', delete_all=False):\n \n             logger.info(\"Tautulli DataFactory :: Deleting Cloudinary info%s from the database.\"\n                         % log_msg)\n-            result = monitor_db.action('DELETE FROM cloudinary_lookup WHERE img_hash '\n-                                       'IN (SELECT img_hash FROM image_hash_lookup %s)' % where,\n+            result = monitor_db.action(\"DELETE FROM cloudinary_lookup WHERE img_hash \"\n+                                       \"IN (SELECT img_hash FROM image_hash_lookup %s)\" % where,\n                                        args)\n \n         else:\n@@ -1883,15 +1883,15 @@ def delete_lookup_info(self, rating_key='', service='', delete_all=False):\n         if rating_key:\n             logger.info(\"Tautulli DataFactory :: Deleting lookup info for rating_key %s from the database.\"\n                         % rating_key)\n-            result_themoviedb = monitor_db.action('DELETE FROM themoviedb_lookup WHERE rating_key = ?', [rating_key])\n-            result_tvmaze = monitor_db.action('DELETE FROM tvmaze_lookup WHERE rating_key = ?', [rating_key])\n-            result_musicbrainz = monitor_db.action('DELETE FROM musicbrainz_lookup WHERE rating_key = ?', [rating_key])\n+            result_themoviedb = monitor_db.action(\"DELETE FROM themoviedb_lookup WHERE rating_key = ?\", [rating_key])\n+            result_tvmaze = monitor_db.action(\"DELETE FROM tvmaze_lookup WHERE rating_key = ?\", [rating_key])\n+            result_musicbrainz = monitor_db.action(\"DELETE FROM musicbrainz_lookup WHERE rating_key = ?\", [rating_key])\n             return bool(result_themoviedb or result_tvmaze or result_musicbrainz)\n         elif service and delete_all:\n             if service.lower() in ('themoviedb', 'tvmaze', 'musicbrainz'):\n                 logger.info(\"Tautulli DataFactory :: Deleting all lookup info for '%s' from the database.\"\n                             % service)\n-                result = monitor_db.action('DELETE FROM %s_lookup' % service.lower())\n+                result = monitor_db.action(\"DELETE FROM %s_lookup\" % service.lower())\n                 return bool(result)\n             else:\n                 logger.error(\"Tautulli DataFactory :: Unable to delete lookup info: invalid service '%s' provided.\"\n@@ -1901,13 +1901,13 @@ def get_search_query(self, rating_key=''):\n         monitor_db = database.MonitorDatabase()\n \n         if rating_key:\n-            query = 'SELECT rating_key, parent_rating_key, grandparent_rating_key, title, parent_title, grandparent_title, ' \\\n-                    'media_index, parent_media_index, year, media_type ' \\\n-                    'FROM session_history_metadata ' \\\n-                    'WHERE rating_key = ? ' \\\n-                    'OR parent_rating_key = ? ' \\\n-                    'OR grandparent_rating_key = ? ' \\\n-                    'LIMIT 1'\n+            query = \"SELECT rating_key, parent_rating_key, grandparent_rating_key, title, parent_title, grandparent_title, \" \\\n+                    \"media_index, parent_media_index, year, media_type \" \\\n+                    \"FROM session_history_metadata \" \\\n+                    \"WHERE rating_key = ? \" \\\n+                    \"OR parent_rating_key = ? \" \\\n+                    \"OR grandparent_rating_key = ? \" \\\n+                    \"LIMIT 1\"\n             result = monitor_db.select(query=query, args=[rating_key, rating_key, rating_key])\n         else:\n             result = []\n@@ -1974,12 +1974,12 @@ def get_rating_keys_list(self, rating_key='', media_type=''):\n \n         # Get the grandparent rating key\n         try:\n-            query = 'SELECT rating_key, parent_rating_key, grandparent_rating_key ' \\\n-                    'FROM session_history_metadata ' \\\n-                    'WHERE rating_key = ? ' \\\n-                    'OR parent_rating_key = ? ' \\\n-                    'OR grandparent_rating_key = ? ' \\\n-                    'LIMIT 1'\n+            query = \"SELECT rating_key, parent_rating_key, grandparent_rating_key \" \\\n+                    \"FROM session_history_metadata \" \\\n+                    \"WHERE rating_key = ? \" \\\n+                    \"OR parent_rating_key = ? \" \\\n+                    \"OR grandparent_rating_key = ? \" \\\n+                    \"LIMIT 1\"\n             result = monitor_db.select(query=query, args=[rating_key, rating_key, rating_key])\n \n             grandparent_rating_key = result[0]['grandparent_rating_key']\n@@ -1988,12 +1988,12 @@ def get_rating_keys_list(self, rating_key='', media_type=''):\n             logger.warn(\"Tautulli DataFactory :: Unable to execute database query for get_rating_keys_list: %s.\" % e)\n             return {}\n \n-        query = 'SELECT rating_key, parent_rating_key, grandparent_rating_key, title, parent_title, grandparent_title, ' \\\n-                'media_index, parent_media_index ' \\\n-                'FROM session_history_metadata ' \\\n-                'WHERE {0} = ? ' \\\n-                'GROUP BY {1} ' \\\n-                'ORDER BY {1} DESC '\n+        query = \"SELECT rating_key, parent_rating_key, grandparent_rating_key, title, parent_title, grandparent_title, \" \\\n+                \"media_index, parent_media_index \" \\\n+                \"FROM session_history_metadata \" \\\n+                \"WHERE {0} = ? \" \\\n+                \"GROUP BY {1} \" \\\n+                \"ORDER BY {1} DESC \"\n \n         # get grandparent_rating_keys\n         grandparents = {}\n@@ -2070,13 +2070,13 @@ def get_pairs(old, new):\n                     if metadata['media_type'] == 'show' or metadata['media_type'] == 'artist':\n                         # check grandparent_rating_key (2 tables)\n                         query = (\n-                            'SELECT id FROM session_history '\n-                            'WHERE grandparent_rating_key = ? '\n+                            \"SELECT id FROM session_history \"\n+                            \"WHERE grandparent_rating_key = ? \"\n                         )\n                         args = [old_key]\n \n                         if _UPDATE_METADATA_IDS['grandparent_rating_key_ids']:\n-                            query += 'AND id NOT IN (%s)' % ','.join(_UPDATE_METADATA_IDS['grandparent_rating_key_ids'])\n+                            query += \"AND id NOT IN (%s)\" % \",\".join(_UPDATE_METADATA_IDS['grandparent_rating_key_ids'])\n \n                         ids = [str(row['id']) for row in monitor_db.select(query, args)]\n                         if ids:\n@@ -2085,26 +2085,26 @@ def get_pairs(old, new):\n                             continue\n \n                         monitor_db.action(\n-                            'UPDATE session_history SET grandparent_rating_key = ? '\n-                            'WHERE id IN (%s)' % ','.join(ids),\n+                            \"UPDATE session_history SET grandparent_rating_key = ? \"\n+                            \"WHERE id IN (%s)\" % \",\".join(ids),\n                             [new_key]\n                         )\n                         monitor_db.action(\n-                            'UPDATE session_history_metadata SET grandparent_rating_key = ? '\n-                            'WHERE id IN (%s)' % ','.join(ids),\n+                            \"UPDATE session_history_metadata SET grandparent_rating_key = ? \"\n+                            \"WHERE id IN (%s)\" % \",\".join(ids),\n                             [new_key]\n                         )\n \n                     elif metadata['media_type'] == 'season' or metadata['media_type'] == 'album':\n                         # check parent_rating_key (2 tables)\n                         query = (\n-                            'SELECT id FROM session_history '\n-                            'WHERE parent_rating_key = ? '\n+                            \"SELECT id FROM session_history \"\n+                            \"WHERE parent_rating_key = ? \"\n                         )\n                         args = [old_key]\n \n                         if _UPDATE_METADATA_IDS['parent_rating_key_ids']:\n-                            query += 'AND id NOT IN (%s)' % ','.join(_UPDATE_METADATA_IDS['parent_rating_key_ids'])\n+                            query += \"AND id NOT IN (%s)\" % \",\".join(_UPDATE_METADATA_IDS['parent_rating_key_ids'])\n \n                         ids = [str(row['id']) for row in monitor_db.select(query, args)]\n                         if ids:\n@@ -2113,26 +2113,26 @@ def get_pairs(old, new):\n                             continue\n \n                         monitor_db.action(\n-                            'UPDATE session_history SET parent_rating_key = ? '\n-                            'WHERE id IN (%s)' % ','.join(ids),\n+                            \"UPDATE session_history SET parent_rating_key = ? \"\n+                            \"WHERE id IN (%s)\" % \",\".join(ids),\n                             [new_key]\n                         )\n                         monitor_db.action(\n-                            'UPDATE session_history_metadata SET parent_rating_key = ? '\n-                            'WHERE id IN (%s)' % ','.join(ids),\n+                            \"UPDATE session_history_metadata SET parent_rating_key = ? \"\n+                            \"WHERE id IN (%s)\" % \",\".join(ids),\n                             [new_key]\n                         )\n \n                     else:\n                         # check rating_key (2 tables)\n                         query = (\n-                            'SELECT id FROM session_history '\n-                            'WHERE rating_key = ? '\n+                            \"SELECT id FROM session_history \"\n+                            \"WHERE rating_key = ? \"\n                         )\n                         args = [old_key]\n \n                         if _UPDATE_METADATA_IDS['rating_key_ids']:\n-                            query += 'AND id NOT IN (%s)' % ','.join(_UPDATE_METADATA_IDS['rating_key_ids'])\n+                            query += \"AND id NOT IN (%s)\" % \",\".join(_UPDATE_METADATA_IDS['rating_key_ids'])\n \n                         ids = [str(row['id']) for row in monitor_db.select(query, args)]\n                         if ids:\n@@ -2141,13 +2141,13 @@ def get_pairs(old, new):\n                             continue\n \n                         monitor_db.action(\n-                            'UPDATE session_history SET rating_key = ? '\n-                            'WHERE id IN (%s)' % ','.join(ids),\n+                            \"UPDATE session_history SET rating_key = ? \"\n+                            \"WHERE id IN (%s)\" % \",\".join(ids),\n                             [new_key]\n                         )\n                         monitor_db.action(\n-                            'UPDATE session_history_media_info SET rating_key = ? '\n-                            'WHERE id IN (%s)' % ','.join(ids),\n+                            \"UPDATE session_history_media_info SET rating_key = ? \"\n+                            \"WHERE id IN (%s)\" % \",\".join(ids),\n                             [new_key]\n                         )\n \n@@ -2181,21 +2181,21 @@ def update_metadata_details(self, old_rating_key='', new_rating_key='', metadata\n \n             monitor_db = database.MonitorDatabase()\n \n-            query = 'UPDATE session_history SET section_id = ? ' \\\n-                    'WHERE id IN (%s)' % ','.join(ids)\n+            query = \"UPDATE session_history SET section_id = ? \" \\\n+                    \"WHERE id IN (%s)\" % \",\".join(ids)\n             args = [metadata['section_id']]\n             monitor_db.action(query=query, args=args)\n \n             # Update the session_history_metadata table\n-            query = 'UPDATE session_history_metadata SET rating_key = ?, parent_rating_key = ?, ' \\\n-                    'grandparent_rating_key = ?, title = ?, parent_title = ?, grandparent_title = ?, ' \\\n-                    'original_title = ?, full_title = ?, ' \\\n-                    'media_index = ?, parent_media_index = ?, thumb = ?, parent_thumb = ?, ' \\\n-                    'grandparent_thumb = ?, art = ?, media_type = ?, year = ?, originally_available_at = ?, ' \\\n-                    'added_at = ?, updated_at = ?, last_viewed_at = ?, content_rating = ?, summary = ?, ' \\\n-                    'tagline = ?, rating = ?, duration = ?, guid = ?, directors = ?, writers = ?, actors = ?, ' \\\n-                    'genres = ?, studio = ?, labels = ? ' \\\n-                    'WHERE id IN (%s)' % ','.join(ids)\n+            query = \"UPDATE session_history_metadata SET rating_key = ?, parent_rating_key = ?, \" \\\n+                    \"grandparent_rating_key = ?, title = ?, parent_title = ?, grandparent_title = ?, \" \\\n+                    \"original_title = ?, full_title = ?, \" \\\n+                    \"media_index = ?, parent_media_index = ?, thumb = ?, parent_thumb = ?, \" \\\n+                    \"grandparent_thumb = ?, art = ?, media_type = ?, year = ?, originally_available_at = ?, \" \\\n+                    \"added_at = ?, updated_at = ?, last_viewed_at = ?, content_rating = ?, summary = ?, \" \\\n+                    \"tagline = ?, rating = ?, duration = ?, guid = ?, directors = ?, writers = ?, actors = ?, \" \\\n+                    \"genres = ?, studio = ?, labels = ? \" \\\n+                    \"WHERE id IN (%s)\" % \",\".join(ids)\n \n             args = [metadata['rating_key'], metadata['parent_rating_key'], metadata['grandparent_rating_key'],\n                     metadata['title'], metadata['parent_title'], metadata['grandparent_title'],\n@@ -2212,19 +2212,19 @@ def update_metadata_details(self, old_rating_key='', new_rating_key='', metadata\n     def get_notification_log(self, kwargs=None):\n         data_tables = datatables.DataTables()\n \n-        columns = ['notify_log.id',\n-                   'notify_log.timestamp',\n-                   'notify_log.session_key',\n-                   'notify_log.rating_key',\n-                   'notify_log.user_id',\n-                   'notify_log.user',\n-                   'notify_log.notifier_id',\n-                   'notify_log.agent_id',\n-                   'notify_log.agent_name',\n-                   'notify_log.notify_action',\n-                   'notify_log.subject_text',\n-                   'notify_log.body_text',\n-                   'notify_log.success'\n+        columns = [\"notify_log.id\",\n+                   \"notify_log.timestamp\",\n+                   \"notify_log.session_key\",\n+                   \"notify_log.rating_key\",\n+                   \"notify_log.user_id\",\n+                   \"notify_log.user\",\n+                   \"notify_log.notifier_id\",\n+                   \"notify_log.agent_id\",\n+                   \"notify_log.agent_name\",\n+                   \"notify_log.notify_action\",\n+                   \"notify_log.subject_text\",\n+                   \"notify_log.body_text\",\n+                   \"notify_log.success\"\n                    ]\n         try:\n             query = data_tables.ssp_query(table_name='notify_log',\n@@ -2281,8 +2281,8 @@ def delete_notification_log(self):\n \n         try:\n             logger.info(\"Tautulli DataFactory :: Clearing notification logs from database.\")\n-            monitor_db.action('DELETE FROM notify_log')\n-            monitor_db.action('VACUUM')\n+            monitor_db.action(\"DELETE FROM notify_log\")\n+            monitor_db.action(\"VACUUM\")\n             return True\n         except Exception as e:\n             logger.warn(\"Tautulli DataFactory :: Unable to execute database query for delete_notification_log: %s.\" % e)\n@@ -2291,18 +2291,18 @@ def delete_notification_log(self):\n     def get_newsletter_log(self, kwargs=None):\n         data_tables = datatables.DataTables()\n \n-        columns = ['newsletter_log.id',\n-                   'newsletter_log.timestamp',\n-                   'newsletter_log.newsletter_id',\n-                   'newsletter_log.agent_id',\n-                   'newsletter_log.agent_name',\n-                   'newsletter_log.notify_action',\n-                   'newsletter_log.subject_text',\n-                   'newsletter_log.body_text',\n-                   'newsletter_log.start_date',\n-                   'newsletter_log.end_date',\n-                   'newsletter_log.uuid',\n-                   'newsletter_log.success'\n+        columns = [\"newsletter_log.id\",\n+                   \"newsletter_log.timestamp\",\n+                   \"newsletter_log.newsletter_id\",\n+                   \"newsletter_log.agent_id\",\n+                   \"newsletter_log.agent_name\",\n+                   \"newsletter_log.notify_action\",\n+                   \"newsletter_log.subject_text\",\n+                   \"newsletter_log.body_text\",\n+                   \"newsletter_log.start_date\",\n+                   \"newsletter_log.end_date\",\n+                   \"newsletter_log.uuid\",\n+                   \"newsletter_log.success\"\n                    ]\n         try:\n             query = data_tables.ssp_query(table_name='newsletter_log',\n@@ -2353,8 +2353,8 @@ def delete_newsletter_log(self):\n \n         try:\n             logger.info(\"Tautulli DataFactory :: Clearing newsletter logs from database.\")\n-            monitor_db.action('DELETE FROM newsletter_log')\n-            monitor_db.action('VACUUM')\n+            monitor_db.action(\"DELETE FROM newsletter_log\")\n+            monitor_db.action(\"VACUUM\")\n             return True\n         except Exception as e:\n             logger.warn(\"Tautulli DataFactory :: Unable to execute database query for delete_newsletter_log: %s.\" % e)\n@@ -2365,15 +2365,15 @@ def get_user_devices(self, user_id='', history_only=True):\n \n         if user_id:\n             if history_only:\n-                query = 'SELECT machine_id FROM session_history ' \\\n-                        'WHERE user_id = ? ' \\\n-                        'GROUP BY machine_id'\n+                query = \"SELECT machine_id FROM session_history \" \\\n+                        \"WHERE user_id = ? \" \\\n+                        \"GROUP BY machine_id\"\n             else:\n-                query = 'SELECT * FROM (' \\\n-                        'SELECT user_id, machine_id FROM session_history ' \\\n-                        'UNION SELECT user_id, machine_id from sessions_continued) ' \\\n-                        'WHERE user_id = ? ' \\\n-                        'GROUP BY machine_id'\n+                query = \"SELECT * FROM (\" \\\n+                        \"SELECT user_id, machine_id FROM session_history \" \\\n+                        \"UNION SELECT user_id, machine_id from sessions_continued) \" \\\n+                        \"WHERE user_id = ? \" \\\n+                        \"GROUP BY machine_id\"\n \n             try:\n                 result = monitor_db.select(query=query, args=[user_id])\n@@ -2390,7 +2390,7 @@ def get_recently_added_item(self, rating_key=''):\n \n         if rating_key:\n             try:\n-                query = 'SELECT * FROM recently_added WHERE rating_key = ?'\n+                query = \"SELECT * FROM recently_added WHERE rating_key = ?\"\n                 result = monitor_db.select(query=query, args=[rating_key])\n             except Exception as e:\n                 logger.warn(\"Tautulli DataFactory :: Unable to execute database query for get_recently_added_item: %s.\" % e)"}, {"sha": "3a48c6d72d2c638a0e7e0cca15411586bec61182", "filename": "plexpy/exporter.py", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/Tautulli/Tautulli/blob/ea6c6078df410f333a060016dfce18c21ad134c9/plexpy%2Fexporter.py", "raw_url": "https://github.com/Tautulli/Tautulli/raw/ea6c6078df410f333a060016dfce18c21ad134c9/plexpy%2Fexporter.py", "contents_url": "https://api.github.com/repos/Tautulli/Tautulli/contents/plexpy%2Fexporter.py?ref=ea6c6078df410f333a060016dfce18c21ad134c9", "patch": "@@ -1837,7 +1837,7 @@ def export(self):\n \n         threading.Thread(target=self._real_export).start()\n \n-        return True\n+        return self.export_id\n \n     def add_export(self):\n         keys = {\n@@ -2291,9 +2291,9 @@ def _export_obj(self):\n \n def get_export(export_id):\n     db = database.MonitorDatabase()\n-    result = db.select_single('SELECT timestamp, title, file_format, thumb_level, art_level, '\n-                              'individual_files, complete '\n-                              'FROM exports WHERE id = ?',\n+    result = db.select_single(\"SELECT timestamp, title, file_format, thumb_level, art_level, \"\n+                              \"individual_files, complete \"\n+                              \"FROM exports WHERE id = ?\",\n                               [export_id])\n \n     if result:\n@@ -2324,7 +2324,7 @@ def delete_export(export_id):\n         if deleted:\n             logger.info(\"Tautulli Exporter :: Deleting export_id %s from the database.\", export_id)\n             db = database.MonitorDatabase()\n-            result = db.action('DELETE FROM exports WHERE id = ?', args=[export_id])\n+            result = db.action(\"DELETE FROM exports WHERE id = ?\", args=[export_id])\n \n         return deleted\n     else:\n@@ -2349,7 +2349,7 @@ def delete_all_exports():\n \n def cancel_exports():\n     db = database.MonitorDatabase()\n-    db.action('UPDATE exports SET complete = -1 WHERE complete = 0')\n+    db.action(\"UPDATE exports SET complete = -1 WHERE complete = 0\")\n \n \n def get_export_datatable(section_id=None, user_id=None, rating_key=None, kwargs=None):\n@@ -2368,27 +2368,27 @@ def get_export_datatable(section_id=None, user_id=None, rating_key=None, kwargs=\n     if rating_key:\n         custom_where.append(['exports.rating_key', rating_key])\n \n-    columns = ['exports.id AS export_id',\n-               'exports.timestamp',\n-               'exports.section_id',\n-               'exports.user_id',\n-               'exports.rating_key',\n-               'exports.media_type',\n-               'CASE WHEN exports.media_type = \"photoalbum\" THEN \"Photo Album\" ELSE '\n-               'UPPER(SUBSTR(exports.media_type, 1, 1)) || SUBSTR(exports.media_type, 2) END '\n-               'AS media_type_title',\n-               'exports.title',\n-               'exports.file_format',\n-               'exports.metadata_level',\n-               'exports.media_info_level',\n-               'exports.thumb_level',\n-               'exports.art_level',\n-               'exports.custom_fields',\n-               'exports.individual_files',\n-               'exports.file_size',\n-               'exports.complete',\n-               'exports.total_items',\n-               'exports.exported_items'\n+    columns = [\"exports.id AS export_id\",\n+               \"exports.timestamp\",\n+               \"exports.section_id\",\n+               \"exports.user_id\",\n+               \"exports.rating_key\",\n+               \"exports.media_type\",\n+               \"CASE WHEN exports.media_type = 'photoalbum' THEN 'Photo Album' ELSE \"\n+               \"UPPER(SUBSTR(exports.media_type, 1, 1)) || SUBSTR(exports.media_type, 2) END \"\n+               \"AS media_type_title\",\n+               \"exports.title\",\n+               \"exports.file_format\",\n+               \"exports.metadata_level\",\n+               \"exports.media_info_level\",\n+               \"exports.thumb_level\",\n+               \"exports.art_level\",\n+               \"exports.custom_fields\",\n+               \"exports.individual_files\",\n+               \"exports.file_size\",\n+               \"exports.complete\",\n+               \"exports.total_items\",\n+               \"exports.exported_items\"\n                ]\n     try:\n         query = data_tables.ssp_query(table_name='exports',"}, {"sha": "49dfee57b89717617b3cdedb9171520540aa41a3", "filename": "plexpy/graphs.py", "status": "modified", "additions": 405, "deletions": 405, "changes": 810, "blob_url": "https://github.com/Tautulli/Tautulli/blob/ea6c6078df410f333a060016dfce18c21ad134c9/plexpy%2Fgraphs.py", "raw_url": "https://github.com/Tautulli/Tautulli/raw/ea6c6078df410f333a060016dfce18c21ad134c9/plexpy%2Fgraphs.py", "contents_url": "https://api.github.com/repos/Tautulli/Tautulli/contents/plexpy%2Fgraphs.py?ref=ea6c6078df410f333a060016dfce18c21ad134c9", "patch": "@@ -64,42 +64,42 @@ def get_total_plays_per_day(self, time_range='30', y_axis='plays', user_id=None,\n \n         try:\n             if y_axis == 'plays':\n-                query = 'SELECT sh.date_played, ' \\\n-                        'SUM(CASE WHEN sh.media_type = \"episode\" AND shm.live = 0 THEN 1 ELSE 0 END) AS tv_count, ' \\\n-                        'SUM(CASE WHEN sh.media_type = \"movie\" AND shm.live = 0 THEN 1 ELSE 0 END) AS movie_count, ' \\\n-                        'SUM(CASE WHEN sh.media_type = \"track\" AND shm.live = 0 THEN 1 ELSE 0 END) AS music_count, ' \\\n-                        'SUM(shm.live) AS live_count ' \\\n-                        'FROM (SELECT *,' \\\n-                        '      date(started, \"unixepoch\", \"localtime\") AS date_played ' \\\n-                        '    FROM session_history ' \\\n-                        '    WHERE session_history.stopped >= %s %s ' \\\n-                        '    GROUP BY date_played, %s) AS sh ' \\\n-                        'JOIN session_history_metadata AS shm ON shm.id = sh.id ' \\\n-                        'GROUP BY sh.date_played ' \\\n-                        'ORDER BY sh.started' % (timestamp, user_cond, group_by)\n+                query = \"SELECT sh.date_played, \" \\\n+                        \"SUM(CASE WHEN sh.media_type = 'episode' AND shm.live = 0 THEN 1 ELSE 0 END) AS tv_count, \" \\\n+                        \"SUM(CASE WHEN sh.media_type = 'movie' AND shm.live = 0 THEN 1 ELSE 0 END) AS movie_count, \" \\\n+                        \"SUM(CASE WHEN sh.media_type = 'track' AND shm.live = 0 THEN 1 ELSE 0 END) AS music_count, \" \\\n+                        \"SUM(shm.live) AS live_count \" \\\n+                        \"FROM (SELECT *,\" \\\n+                        \"      date(started, 'unixepoch', 'localtime') AS date_played \" \\\n+                        \"    FROM session_history \" \\\n+                        \"    WHERE session_history.stopped >= %s %s \" \\\n+                        \"    GROUP BY date_played, %s) AS sh \" \\\n+                        \"JOIN session_history_metadata AS shm ON shm.id = sh.id \" \\\n+                        \"GROUP BY sh.date_played \" \\\n+                        \"ORDER BY sh.started\" % (timestamp, user_cond, group_by)\n \n                 result = monitor_db.select(query)\n             else:\n-                query = 'SELECT sh.date_played, ' \\\n-                        'SUM(CASE WHEN sh.media_type = \"episode\" AND shm.live = 0 ' \\\n-                        '  THEN sh.d ELSE 0 END) AS tv_count, ' \\\n-                        'SUM(CASE WHEN sh.media_type = \"movie\" AND shm.live = 0 ' \\\n-                        '  THEN sh.d ELSE 0 END) AS movie_count, ' \\\n-                        'SUM(CASE WHEN sh.media_type = \"track\" AND shm.live = 0 ' \\\n-                        '  THEN sh.d ELSE 0 END) AS music_count, ' \\\n-                        'SUM(CASE WHEN shm.live = 1 ' \\\n-                        '  THEN sh.d ELSE 0 END) AS live_count ' \\\n-                        'FROM (SELECT *,' \\\n-                        '      date(started, \"unixepoch\", \"localtime\") AS date_played,' \\\n-                        '      SUM(CASE WHEN stopped > 0 THEN (stopped - started) - ' \\\n-                        '        (CASE WHEN paused_counter IS NULL THEN 0 ELSE paused_counter END) ELSE 0 END) ' \\\n-                        '        AS d ' \\\n-                        '    FROM session_history ' \\\n-                        '    WHERE session_history.stopped >= %s %s' \\\n-                        '    GROUP BY date_played, %s) AS sh ' \\\n-                        'JOIN session_history_metadata AS shm ON shm.id = sh.id ' \\\n-                        'GROUP BY sh.date_played ' \\\n-                        'ORDER BY sh.started' % (timestamp, user_cond, group_by)\n+                query = \"SELECT sh.date_played, \" \\\n+                        \"SUM(CASE WHEN sh.media_type = 'episode' AND shm.live = 0 \" \\\n+                        \"  THEN sh.d ELSE 0 END) AS tv_count, \" \\\n+                        \"SUM(CASE WHEN sh.media_type = 'movie' AND shm.live = 0 \" \\\n+                        \"  THEN sh.d ELSE 0 END) AS movie_count, \" \\\n+                        \"SUM(CASE WHEN sh.media_type = 'track' AND shm.live = 0 \" \\\n+                        \"  THEN sh.d ELSE 0 END) AS music_count, \" \\\n+                        \"SUM(CASE WHEN shm.live = 1 \" \\\n+                        \"  THEN sh.d ELSE 0 END) AS live_count \" \\\n+                        \"FROM (SELECT *,\" \\\n+                        \"      date(started, 'unixepoch', 'localtime') AS date_played,\" \\\n+                        \"      SUM(CASE WHEN stopped > 0 THEN (stopped - started) - \" \\\n+                        \"        (CASE WHEN paused_counter IS NULL THEN 0 ELSE paused_counter END) ELSE 0 END) \" \\\n+                        \"        AS d \" \\\n+                        \"    FROM session_history \" \\\n+                        \"    WHERE session_history.stopped >= %s %s\" \\\n+                        \"    GROUP BY date_played, %s) AS sh \" \\\n+                        \"JOIN session_history_metadata AS shm ON shm.id = sh.id \" \\\n+                        \"GROUP BY sh.date_played \" \\\n+                        \"ORDER BY sh.started\" % (timestamp, user_cond, group_by)\n \n                 result = monitor_db.select(query)\n         except Exception as e:\n@@ -173,9 +173,9 @@ def get_total_plays_per_dayofweek(self, time_range='30', y_axis='plays', user_id\n \n         user_cond = ''\n         if session.get_session_user_id() and user_id and user_id != str(session.get_session_user_id()):\n-            user_cond = 'AND session_history.user_id = %s ' % session.get_session_user_id()\n+            user_cond = \"AND session_history.user_id = %s \" % session.get_session_user_id()\n         elif user_id and user_id.isdigit():\n-            user_cond = 'AND session_history.user_id = %s ' % user_id\n+            user_cond = \"AND session_history.user_id = %s \" % user_id\n \n         if grouping is None:\n             grouping = plexpy.CONFIG.GROUP_HISTORY_TABLES\n@@ -184,58 +184,58 @@ def get_total_plays_per_dayofweek(self, time_range='30', y_axis='plays', user_id\n \n         try:\n             if y_axis == 'plays':\n-                query = 'SELECT sh.daynumber, ' \\\n-                        '(CASE sh.daynumber ' \\\n-                        '  WHEN 0 THEN \"Sunday\" ' \\\n-                        '  WHEN 1 THEN \"Monday\" ' \\\n-                        '  WHEN 2 THEN \"Tuesday\" ' \\\n-                        '  WHEN 3 THEN \"Wednesday\" ' \\\n-                        '  WHEN 4 THEN \"Thursday\" ' \\\n-                        '  WHEN 5 THEN \"Friday\" ' \\\n-                        '  ELSE \"Saturday\" END) AS dayofweek, ' \\\n-                        'SUM(CASE WHEN sh.media_type = \"episode\" AND shm.live = 0 THEN 1 ELSE 0 END) AS tv_count, ' \\\n-                        'SUM(CASE WHEN sh.media_type = \"movie\" AND shm.live = 0 THEN 1 ELSE 0 END) AS movie_count, ' \\\n-                        'SUM(CASE WHEN sh.media_type = \"track\" AND shm.live = 0 THEN 1 ELSE 0 END) AS music_count, ' \\\n-                        'SUM(shm.live) AS live_count ' \\\n-                        'FROM (SELECT *, ' \\\n-                        '      CAST(strftime(\"%%w\", date(started, \"unixepoch\", \"localtime\")) AS INTEGER) AS daynumber' \\\n-                        '    FROM session_history ' \\\n-                        '    WHERE session_history.stopped >= %s %s ' \\\n-                        '    GROUP BY daynumber, %s) AS sh ' \\\n-                        'JOIN session_history_metadata AS shm ON shm.id = sh.id ' \\\n-                        'GROUP BY dayofweek ' \\\n-                        'ORDER BY sh.daynumber' % (timestamp, user_cond, group_by)\n+                query = \"SELECT sh.daynumber, \" \\\n+                        \"(CASE sh.daynumber \" \\\n+                        \"  WHEN 0 THEN 'Sunday' \" \\\n+                        \"  WHEN 1 THEN 'Monday' \" \\\n+                        \"  WHEN 2 THEN 'Tuesday' \" \\\n+                        \"  WHEN 3 THEN 'Wednesday' \" \\\n+                        \"  WHEN 4 THEN 'Thursday' \" \\\n+                        \"  WHEN 5 THEN 'Friday' \" \\\n+                        \"  ELSE 'Saturday' END) AS dayofweek, \" \\\n+                        \"SUM(CASE WHEN sh.media_type = 'episode' AND shm.live = 0 THEN 1 ELSE 0 END) AS tv_count, \" \\\n+                        \"SUM(CASE WHEN sh.media_type = 'movie' AND shm.live = 0 THEN 1 ELSE 0 END) AS movie_count, \" \\\n+                        \"SUM(CASE WHEN sh.media_type = 'track' AND shm.live = 0 THEN 1 ELSE 0 END) AS music_count, \" \\\n+                        \"SUM(shm.live) AS live_count \" \\\n+                        \"FROM (SELECT *, \" \\\n+                        \"      CAST(strftime('%%w', date(started, 'unixepoch', 'localtime')) AS INTEGER) AS daynumber\" \\\n+                        \"    FROM session_history \" \\\n+                        \"    WHERE session_history.stopped >= %s %s \" \\\n+                        \"    GROUP BY daynumber, %s) AS sh \" \\\n+                        \"JOIN session_history_metadata AS shm ON shm.id = sh.id \" \\\n+                        \"GROUP BY dayofweek \" \\\n+                        \"ORDER BY sh.daynumber\" % (timestamp, user_cond, group_by)\n \n                 result = monitor_db.select(query)\n             else:\n-                query = 'SELECT sh.daynumber, ' \\\n-                        '(CASE sh.daynumber ' \\\n-                        '  WHEN 0 THEN \"Sunday\" ' \\\n-                        '  WHEN 1 THEN \"Monday\" ' \\\n-                        '  WHEN 2 THEN \"Tuesday\" ' \\\n-                        '  WHEN 3 THEN \"Wednesday\" ' \\\n-                        '  WHEN 4 THEN \"Thursday\" ' \\\n-                        '  WHEN 5 THEN \"Friday\" ' \\\n-                        '  ELSE \"Saturday\" END) AS dayofweek, ' \\\n-                        'SUM(CASE WHEN sh.media_type = \"episode\" AND shm.live = 0 ' \\\n-                        '  THEN sh.d ELSE 0 END) AS tv_count, ' \\\n-                        'SUM(CASE WHEN sh.media_type = \"movie\" AND shm.live = 0 ' \\\n-                        '  THEN sh.d ELSE 0 END) AS movie_count, ' \\\n-                        'SUM(CASE WHEN sh.media_type = \"track\" AND shm.live = 0 ' \\\n-                        '  THEN sh.d ELSE 0 END) AS music_count, ' \\\n-                        'SUM(CASE WHEN shm.live = 1 ' \\\n-                        '  THEN sh.d ELSE 0 END) AS live_count ' \\\n-                        'FROM (SELECT *, ' \\\n-                        '      CAST(strftime(\"%%w\", date(started, \"unixepoch\", \"localtime\")) AS INTEGER) AS daynumber, ' \\\n-                        '      SUM(CASE WHEN stopped > 0 THEN (stopped - started) - ' \\\n-                        '        (CASE WHEN paused_counter IS NULL THEN 0 ELSE paused_counter END) ELSE 0 END) ' \\\n-                        '        AS d ' \\\n-                        '    FROM session_history ' \\\n-                        '    WHERE session_history.stopped >= %s %s' \\\n-                        '    GROUP BY daynumber, %s) AS sh ' \\\n-                        'JOIN session_history_metadata AS shm ON shm.id = sh.id ' \\\n-                        'GROUP BY dayofweek ' \\\n-                        'ORDER BY sh.daynumber' % (timestamp, user_cond, group_by)\n+                query = \"SELECT sh.daynumber, \" \\\n+                        \"(CASE sh.daynumber \" \\\n+                        \"  WHEN 0 THEN 'Sunday' \" \\\n+                        \"  WHEN 1 THEN 'Monday' \" \\\n+                        \"  WHEN 2 THEN 'Tuesday' \" \\\n+                        \"  WHEN 3 THEN 'Wednesday' \" \\\n+                        \"  WHEN 4 THEN 'Thursday' \" \\\n+                        \"  WHEN 5 THEN 'Friday' \" \\\n+                        \"  ELSE 'Saturday' END) AS dayofweek, \" \\\n+                        \"SUM(CASE WHEN sh.media_type = 'episode' AND shm.live = 0 \" \\\n+                        \"  THEN sh.d ELSE 0 END) AS tv_count, \" \\\n+                        \"SUM(CASE WHEN sh.media_type = 'movie' AND shm.live = 0 \" \\\n+                        \"  THEN sh.d ELSE 0 END) AS movie_count, \" \\\n+                        \"SUM(CASE WHEN sh.media_type = 'track' AND shm.live = 0 \" \\\n+                        \"  THEN sh.d ELSE 0 END) AS music_count, \" \\\n+                        \"SUM(CASE WHEN shm.live = 1 \" \\\n+                        \"  THEN sh.d ELSE 0 END) AS live_count \" \\\n+                        \"FROM (SELECT *, \" \\\n+                        \"      CAST(strftime('%%w', date(started, 'unixepoch', 'localtime')) AS INTEGER) AS daynumber, \" \\\n+                        \"      SUM(CASE WHEN stopped > 0 THEN (stopped - started) - \" \\\n+                        \"        (CASE WHEN paused_counter IS NULL THEN 0 ELSE paused_counter END) ELSE 0 END) \" \\\n+                        \"        AS d \" \\\n+                        \"    FROM session_history \" \\\n+                        \"    WHERE session_history.stopped >= %s %s\" \\\n+                        \"    GROUP BY daynumber, %s) AS sh \" \\\n+                        \"JOIN session_history_metadata AS shm ON shm.id = sh.id \" \\\n+                        \"GROUP BY dayofweek \" \\\n+                        \"ORDER BY sh.daynumber\" % (timestamp, user_cond, group_by)\n \n                 result = monitor_db.select(query)\n         except Exception as e:\n@@ -321,42 +321,42 @@ def get_total_plays_per_hourofday(self, time_range='30', y_axis='plays', user_id\n \n         try:\n             if y_axis == 'plays':\n-                query = 'SELECT sh.hourofday, ' \\\n-                        'SUM(CASE WHEN sh.media_type = \"episode\" AND shm.live = 0 THEN 1 ELSE 0 END) AS tv_count, ' \\\n-                        'SUM(CASE WHEN sh.media_type = \"movie\" AND shm.live = 0 THEN 1 ELSE 0 END) AS movie_count, ' \\\n-                        'SUM(CASE WHEN sh.media_type = \"track\" AND shm.live = 0 THEN 1 ELSE 0 END) AS music_count, ' \\\n-                        'SUM(shm.live) AS live_count ' \\\n-                        'FROM (SELECT *, ' \\\n-                        '      strftime(\"%%H\", datetime(started, \"unixepoch\", \"localtime\")) AS hourofday' \\\n-                        '    FROM session_history ' \\\n-                        '    WHERE session_history.stopped >= %s %s ' \\\n-                        '    GROUP BY hourofday, %s) AS sh ' \\\n-                        'JOIN session_history_metadata AS shm ON shm.id = sh.id ' \\\n-                        'GROUP BY sh.hourofday ' \\\n-                        'ORDER BY sh.hourofday' % (timestamp, user_cond, group_by)\n+                query = \"SELECT sh.hourofday, \" \\\n+                        \"SUM(CASE WHEN sh.media_type = 'episode' AND shm.live = 0 THEN 1 ELSE 0 END) AS tv_count, \" \\\n+                        \"SUM(CASE WHEN sh.media_type = 'movie' AND shm.live = 0 THEN 1 ELSE 0 END) AS movie_count, \" \\\n+                        \"SUM(CASE WHEN sh.media_type = 'track' AND shm.live = 0 THEN 1 ELSE 0 END) AS music_count, \" \\\n+                        \"SUM(shm.live) AS live_count \" \\\n+                        \"FROM (SELECT *, \" \\\n+                        \"      strftime('%%H', datetime(started, 'unixepoch', 'localtime')) AS hourofday\" \\\n+                        \"    FROM session_history \" \\\n+                        \"    WHERE session_history.stopped >= %s %s \" \\\n+                        \"    GROUP BY hourofday, %s) AS sh \" \\\n+                        \"JOIN session_history_metadata AS shm ON shm.id = sh.id \" \\\n+                        \"GROUP BY sh.hourofday \" \\\n+                        \"ORDER BY sh.hourofday\" % (timestamp, user_cond, group_by)\n \n                 result = monitor_db.select(query)\n             else:\n-                query = 'SELECT sh.hourofday, ' \\\n-                        'SUM(CASE WHEN sh.media_type = \"episode\" AND shm.live = 0 ' \\\n-                        '  THEN sh.d ELSE 0 END) AS tv_count, ' \\\n-                        'SUM(CASE WHEN sh.media_type = \"movie\" AND shm.live = 0 ' \\\n-                        '  THEN sh.d ELSE 0 END) AS movie_count, ' \\\n-                        'SUM(CASE WHEN sh.media_type = \"track\" AND shm.live = 0 ' \\\n-                        '  THEN sh.d ELSE 0 END) AS music_count, ' \\\n-                        'SUM(CASE WHEN shm.live = 1 ' \\\n-                        '  THEN sh.d ELSE 0 END) AS live_count ' \\\n-                        'FROM (SELECT *, ' \\\n-                        '      strftime(\"%%H\", datetime(started, \"unixepoch\", \"localtime\")) AS hourofday, ' \\\n-                        '      SUM(CASE WHEN stopped > 0 THEN (stopped - started) - ' \\\n-                        '        (CASE WHEN paused_counter IS NULL THEN 0 ELSE paused_counter END) ELSE 0 END) ' \\\n-                        '        AS d ' \\\n-                        '    FROM session_history ' \\\n-                        '    WHERE session_history.stopped >= %s %s' \\\n-                        '    GROUP BY hourofday, %s) AS sh ' \\\n-                        'JOIN session_history_metadata AS shm ON shm.id = sh.id ' \\\n-                        'GROUP BY sh.hourofday ' \\\n-                        'ORDER BY sh.hourofday' % (timestamp, user_cond, group_by)\n+                query = \"SELECT sh.hourofday, \" \\\n+                        \"SUM(CASE WHEN sh.media_type = 'episode' AND shm.live = 0 \" \\\n+                        \"  THEN sh.d ELSE 0 END) AS tv_count, \" \\\n+                        \"SUM(CASE WHEN sh.media_type = 'movie' AND shm.live = 0 \" \\\n+                        \"  THEN sh.d ELSE 0 END) AS movie_count, \" \\\n+                        \"SUM(CASE WHEN sh.media_type = 'track' AND shm.live = 0 \" \\\n+                        \"  THEN sh.d ELSE 0 END) AS music_count, \" \\\n+                        \"SUM(CASE WHEN shm.live = 1 \" \\\n+                        \"  THEN sh.d ELSE 0 END) AS live_count \" \\\n+                        \"FROM (SELECT *, \" \\\n+                        \"      strftime('%%H', datetime(started, 'unixepoch', 'localtime')) AS hourofday, \" \\\n+                        \"      SUM(CASE WHEN stopped > 0 THEN (stopped - started) - \" \\\n+                        \"        (CASE WHEN paused_counter IS NULL THEN 0 ELSE paused_counter END) ELSE 0 END) \" \\\n+                        \"        AS d \" \\\n+                        \"    FROM session_history \" \\\n+                        \"    WHERE session_history.stopped >= %s %s\" \\\n+                        \"    GROUP BY hourofday, %s) AS sh \" \\\n+                        \"JOIN session_history_metadata AS shm ON shm.id = sh.id \" \\\n+                        \"GROUP BY sh.hourofday \" \\\n+                        \"ORDER BY sh.hourofday\" % (timestamp, user_cond, group_by)\n \n                 result = monitor_db.select(query)\n         except Exception as e:\n@@ -440,42 +440,42 @@ def get_total_plays_per_month(self, time_range='12', y_axis='plays', user_id=Non\n \n         try:\n             if y_axis == 'plays':\n-                query = 'SELECT sh.datestring, ' \\\n-                        'SUM(CASE WHEN sh.media_type = \"episode\" AND shm.live = 0 THEN 1 ELSE 0 END) AS tv_count, ' \\\n-                        'SUM(CASE WHEN sh.media_type = \"movie\" AND shm.live = 0 THEN 1 ELSE 0 END) AS movie_count, ' \\\n-                        'SUM(CASE WHEN sh.media_type = \"track\" AND shm.live = 0 THEN 1 ELSE 0 END) AS music_count, ' \\\n-                        'SUM(shm.live) AS live_count ' \\\n-                        'FROM (SELECT *, ' \\\n-                        '      strftime(\"%%Y-%%m\", datetime(started, \"unixepoch\", \"localtime\")) AS datestring' \\\n-                        '    FROM session_history ' \\\n-                        '    WHERE session_history.stopped >= %s %s ' \\\n-                        '    GROUP BY datestring, %s) AS sh ' \\\n-                        'JOIN session_history_metadata AS shm ON shm.id = sh.id ' \\\n-                        'GROUP BY sh.datestring ' \\\n-                        'ORDER BY sh.datestring' % (timestamp, user_cond, group_by)\n+                query = \"SELECT sh.datestring, \" \\\n+                        \"SUM(CASE WHEN sh.media_type = 'episode' AND shm.live = 0 THEN 1 ELSE 0 END) AS tv_count, \" \\\n+                        \"SUM(CASE WHEN sh.media_type = 'movie' AND shm.live = 0 THEN 1 ELSE 0 END) AS movie_count, \" \\\n+                        \"SUM(CASE WHEN sh.media_type = 'track' AND shm.live = 0 THEN 1 ELSE 0 END) AS music_count, \" \\\n+                        \"SUM(shm.live) AS live_count \" \\\n+                        \"FROM (SELECT *, \" \\\n+                        \"      strftime('%%Y-%%m', datetime(started, 'unixepoch', 'localtime')) AS datestring\" \\\n+                        \"    FROM session_history \" \\\n+                        \"    WHERE session_history.stopped >= %s %s \" \\\n+                        \"    GROUP BY datestring, %s) AS sh \" \\\n+                        \"JOIN session_history_metadata AS shm ON shm.id = sh.id \" \\\n+                        \"GROUP BY sh.datestring \" \\\n+                        \"ORDER BY sh.datestring\" % (timestamp, user_cond, group_by)\n \n                 result = monitor_db.select(query)\n             else:\n-                query = 'SELECT sh.datestring, ' \\\n-                        'SUM(CASE WHEN sh.media_type = \"episode\" AND shm.live = 0 ' \\\n-                        '  THEN sh.d ELSE 0 END) AS tv_count, ' \\\n-                        'SUM(CASE WHEN sh.media_type = \"movie\" AND shm.live = 0 ' \\\n-                        '  THEN sh.d ELSE 0 END) AS movie_count, ' \\\n-                        'SUM(CASE WHEN sh.media_type = \"track\" AND shm.live = 0 ' \\\n-                        '  THEN sh.d ELSE 0 END) AS music_count, ' \\\n-                        'SUM(CASE WHEN shm.live = 1 ' \\\n-                        '  THEN sh.d ELSE 0 END) AS live_count ' \\\n-                        'FROM (SELECT *, ' \\\n-                        '      strftime(\"%%Y-%%m\", datetime(started, \"unixepoch\", \"localtime\")) AS datestring, ' \\\n-                        '      SUM(CASE WHEN stopped > 0 THEN (stopped - started) - ' \\\n-                        '        (CASE WHEN paused_counter IS NULL THEN 0 ELSE paused_counter END) ELSE 0 END) ' \\\n-                        '        AS d ' \\\n-                        '    FROM session_history ' \\\n-                        '    WHERE session_history.stopped >= %s %s' \\\n-                        '    GROUP BY datestring, %s) AS sh ' \\\n-                        'JOIN session_history_metadata AS shm ON shm.id = sh.id ' \\\n-                        'GROUP BY sh.datestring ' \\\n-                        'ORDER BY sh.datestring' % (timestamp, user_cond, group_by)\n+                query = \"SELECT sh.datestring, \" \\\n+                        \"SUM(CASE WHEN sh.media_type = 'episode' AND shm.live = 0 \" \\\n+                        \"  THEN sh.d ELSE 0 END) AS tv_count, \" \\\n+                        \"SUM(CASE WHEN sh.media_type = 'movie' AND shm.live = 0 \" \\\n+                        \"  THEN sh.d ELSE 0 END) AS movie_count, \" \\\n+                        \"SUM(CASE WHEN sh.media_type = 'track' AND shm.live = 0 \" \\\n+                        \"  THEN sh.d ELSE 0 END) AS music_count, \" \\\n+                        \"SUM(CASE WHEN shm.live = 1 \" \\\n+                        \"  THEN sh.d ELSE 0 END) AS live_count \" \\\n+                        \"FROM (SELECT *, \" \\\n+                        \"      strftime('%%Y-%%m', datetime(started, 'unixepoch', 'localtime')) AS datestring, \" \\\n+                        \"      SUM(CASE WHEN stopped > 0 THEN (stopped - started) - \" \\\n+                        \"        (CASE WHEN paused_counter IS NULL THEN 0 ELSE paused_counter END) ELSE 0 END) \" \\\n+                        \"        AS d \" \\\n+                        \"    FROM session_history \" \\\n+                        \"    WHERE session_history.stopped >= %s %s\" \\\n+                        \"    GROUP BY datestring, %s) AS sh \" \\\n+                        \"JOIN session_history_metadata AS shm ON shm.id = sh.id \" \\\n+                        \"GROUP BY sh.datestring \" \\\n+                        \"ORDER BY sh.datestring\" % (timestamp, user_cond, group_by)\n \n                 result = monitor_db.select(query)\n         except Exception as e:\n@@ -567,44 +567,44 @@ def get_total_plays_by_top_10_platforms(self, time_range='30', y_axis='plays', u\n \n         try:\n             if y_axis == 'plays':\n-                query = 'SELECT sh.platform, ' \\\n-                        'SUM(CASE WHEN sh.media_type = \"episode\" AND shm.live = 0 THEN 1 ELSE 0 END) AS tv_count, ' \\\n-                        'SUM(CASE WHEN sh.media_type = \"movie\" AND shm.live = 0 THEN 1 ELSE 0 END) AS movie_count, ' \\\n-                        'SUM(CASE WHEN sh.media_type = \"track\" AND shm.live = 0 THEN 1 ELSE 0 END) AS music_count, ' \\\n-                        'SUM(shm.live) AS live_count, ' \\\n-                        'COUNT(sh.id) AS total_count ' \\\n-                        'FROM (SELECT * ' \\\n-                        '    FROM session_history ' \\\n-                        '    WHERE session_history.stopped >= %s %s ' \\\n-                        '    GROUP BY %s) AS sh ' \\\n-                        'JOIN session_history_metadata AS shm ON shm.id = sh.id ' \\\n-                        'GROUP BY sh.platform ' \\\n-                        'ORDER BY total_count DESC, sh.platform ASC ' \\\n-                        'LIMIT 10' % (timestamp, user_cond, group_by)\n+                query = \"SELECT sh.platform, \" \\\n+                        \"SUM(CASE WHEN sh.media_type = 'episode' AND shm.live = 0 THEN 1 ELSE 0 END) AS tv_count, \" \\\n+                        \"SUM(CASE WHEN sh.media_type = 'movie' AND shm.live = 0 THEN 1 ELSE 0 END) AS movie_count, \" \\\n+                        \"SUM(CASE WHEN sh.media_type = 'track' AND shm.live = 0 THEN 1 ELSE 0 END) AS music_count, \" \\\n+                        \"SUM(shm.live) AS live_count, \" \\\n+                        \"COUNT(sh.id) AS total_count \" \\\n+                        \"FROM (SELECT * \" \\\n+                        \"    FROM session_history \" \\\n+                        \"    WHERE session_history.stopped >= %s %s \" \\\n+                        \"    GROUP BY %s) AS sh \" \\\n+                        \"JOIN session_history_metadata AS shm ON shm.id = sh.id \" \\\n+                        \"GROUP BY sh.platform \" \\\n+                        \"ORDER BY total_count DESC, sh.platform ASC \" \\\n+                        \"LIMIT 10\" % (timestamp, user_cond, group_by)\n \n                 result = monitor_db.select(query)\n             else:\n-                query = 'SELECT sh.platform, ' \\\n-                        'SUM(CASE WHEN sh.media_type = \"episode\" AND shm.live = 0 ' \\\n-                        '  THEN sh.d ELSE 0 END) AS tv_count, ' \\\n-                        'SUM(CASE WHEN sh.media_type = \"movie\" AND shm.live = 0 ' \\\n-                        '  THEN sh.d ELSE 0 END) AS movie_count, ' \\\n-                        'SUM(CASE WHEN sh.media_type = \"track\" AND shm.live = 0 ' \\\n-                        '  THEN sh.d ELSE 0 END) AS music_count, ' \\\n-                        'SUM(CASE WHEN shm.live = 1 ' \\\n-                        '  THEN sh.d ELSE 0 END) AS live_count, ' \\\n-                        'SUM(sh.d) AS total_duration ' \\\n-                        'FROM (SELECT *, ' \\\n-                        '      SUM(CASE WHEN stopped > 0 THEN (stopped - started) - ' \\\n-                        '        (CASE WHEN paused_counter IS NULL THEN 0 ELSE paused_counter END) ELSE 0 END) ' \\\n-                        '        AS d ' \\\n-                        '    FROM session_history ' \\\n-                        '    WHERE session_history.stopped >= %s %s' \\\n-                        '    GROUP BY %s) AS sh ' \\\n-                        'JOIN session_history_metadata AS shm ON shm.id = sh.id ' \\\n-                        'GROUP BY sh.platform ' \\\n-                        'ORDER BY total_duration DESC ' \\\n-                        'LIMIT 10' % (timestamp, user_cond, group_by)\n+                query = \"SELECT sh.platform, \" \\\n+                        \"SUM(CASE WHEN sh.media_type = 'episode' AND shm.live = 0 \" \\\n+                        \"  THEN sh.d ELSE 0 END) AS tv_count, \" \\\n+                        \"SUM(CASE WHEN sh.media_type = 'movie' AND shm.live = 0 \" \\\n+                        \"  THEN sh.d ELSE 0 END) AS movie_count, \" \\\n+                        \"SUM(CASE WHEN sh.media_type = 'track' AND shm.live = 0 \" \\\n+                        \"  THEN sh.d ELSE 0 END) AS music_count, \" \\\n+                        \"SUM(CASE WHEN shm.live = 1 \" \\\n+                        \"  THEN sh.d ELSE 0 END) AS live_count, \" \\\n+                        \"SUM(sh.d) AS total_duration \" \\\n+                        \"FROM (SELECT *, \" \\\n+                        \"      SUM(CASE WHEN stopped > 0 THEN (stopped - started) - \" \\\n+                        \"        (CASE WHEN paused_counter IS NULL THEN 0 ELSE paused_counter END) ELSE 0 END) \" \\\n+                        \"        AS d \" \\\n+                        \"    FROM session_history \" \\\n+                        \"    WHERE session_history.stopped >= %s %s\" \\\n+                        \"    GROUP BY %s) AS sh \" \\\n+                        \"JOIN session_history_metadata AS shm ON shm.id = sh.id \" \\\n+                        \"GROUP BY sh.platform \" \\\n+                        \"ORDER BY total_duration DESC \" \\\n+                        \"LIMIT 10\" % (timestamp, user_cond, group_by)\n \n                 result = monitor_db.select(query)\n         except Exception as e:\n@@ -666,50 +666,50 @@ def get_total_plays_by_top_10_users(self, time_range='30', y_axis='plays', user_\n \n         try:\n             if y_axis == 'plays':\n-                query = 'SELECT u.user_id, u.username, ' \\\n-                        '(CASE WHEN u.friendly_name IS NULL OR TRIM(u.friendly_name) = \"\" ' \\\n-                        '  THEN u.username ELSE u.friendly_name END) AS friendly_name,' \\\n-                        'SUM(CASE WHEN sh.media_type = \"episode\" AND shm.live = 0 THEN 1 ELSE 0 END) AS tv_count, ' \\\n-                        'SUM(CASE WHEN sh.media_type = \"movie\" AND shm.live = 0 THEN 1 ELSE 0 END) AS movie_count, ' \\\n-                        'SUM(CASE WHEN sh.media_type = \"track\" AND shm.live = 0 THEN 1 ELSE 0 END) AS music_count, ' \\\n-                        'SUM(shm.live) AS live_count, ' \\\n-                        'COUNT(sh.id) AS total_count ' \\\n-                        'FROM (SELECT * ' \\\n-                        '    FROM session_history ' \\\n-                        '    WHERE session_history.stopped >= %s %s ' \\\n-                        '    GROUP BY %s) AS sh ' \\\n-                        'JOIN session_history_metadata AS shm ON shm.id = sh.id ' \\\n-                        'JOIN users AS u ON u.user_id = sh.user_id ' \\\n-                        'GROUP BY sh.user_id ' \\\n-                        'ORDER BY total_count DESC ' \\\n-                        'LIMIT 10' % (timestamp, user_cond, group_by)\n+                query = \"SELECT u.user_id, u.username, \" \\\n+                        \"(CASE WHEN u.friendly_name IS NULL OR TRIM(u.friendly_name) = '' \" \\\n+                        \"  THEN u.username ELSE u.friendly_name END) AS friendly_name,\" \\\n+                        \"SUM(CASE WHEN sh.media_type = 'episode' AND shm.live = 0 THEN 1 ELSE 0 END) AS tv_count, \" \\\n+                        \"SUM(CASE WHEN sh.media_type = 'movie' AND shm.live = 0 THEN 1 ELSE 0 END) AS movie_count, \" \\\n+                        \"SUM(CASE WHEN sh.media_type = 'track' AND shm.live = 0 THEN 1 ELSE 0 END) AS music_count, \" \\\n+                        \"SUM(shm.live) AS live_count, \" \\\n+                        \"COUNT(sh.id) AS total_count \" \\\n+                        \"FROM (SELECT * \" \\\n+                        \"    FROM session_history \" \\\n+                        \"    WHERE session_history.stopped >= %s %s \" \\\n+                        \"    GROUP BY %s) AS sh \" \\\n+                        \"JOIN session_history_metadata AS shm ON shm.id = sh.id \" \\\n+                        \"JOIN users AS u ON u.user_id = sh.user_id \" \\\n+                        \"GROUP BY sh.user_id \" \\\n+                        \"ORDER BY total_count DESC \" \\\n+                        \"LIMIT 10\" % (timestamp, user_cond, group_by)\n \n                 result = monitor_db.select(query)\n             else:\n-                query = 'SELECT u.user_id, u.username, ' \\\n-                        '(CASE WHEN u.friendly_name IS NULL OR TRIM(u.friendly_name) = \"\" ' \\\n-                        ' THEN u.username ELSE u.friendly_name END) AS friendly_name,' \\\n-                        'SUM(CASE WHEN sh.media_type = \"episode\" AND shm.live = 0 ' \\\n-                        '  THEN sh.d ELSE 0 END) AS tv_count, ' \\\n-                        'SUM(CASE WHEN sh.media_type = \"movie\" AND shm.live = 0 ' \\\n-                        '  THEN sh.d ELSE 0 END) AS movie_count, ' \\\n-                        'SUM(CASE WHEN sh.media_type = \"track\" AND shm.live = 0 ' \\\n-                        '  THEN sh.d ELSE 0 END) AS music_count, ' \\\n-                        'SUM(CASE WHEN shm.live = 1 ' \\\n-                        '  THEN sh.d ELSE 0 END) AS live_count, ' \\\n-                        'SUM(sh.d) AS total_duration ' \\\n-                        'FROM (SELECT *, ' \\\n-                        '      SUM(CASE WHEN stopped > 0 THEN (stopped - started) - ' \\\n-                        '         (CASE WHEN paused_counter IS NULL THEN 0 ELSE paused_counter END) ELSE 0 END) ' \\\n-                        '         AS d ' \\\n-                        '    FROM session_history ' \\\n-                        '    WHERE session_history.stopped >= %s %s' \\\n-                        '    GROUP BY %s) AS sh ' \\\n-                        'JOIN session_history_metadata AS shm ON shm.id = sh.id ' \\\n-                        'JOIN users AS u ON u.user_id = sh.user_id ' \\\n-                        'GROUP BY sh.user_id ' \\\n-                        'ORDER BY total_duration DESC ' \\\n-                        'LIMIT 10' % (timestamp, user_cond, group_by)\n+                query = \"SELECT u.user_id, u.username, \" \\\n+                        \"(CASE WHEN u.friendly_name IS NULL OR TRIM(u.friendly_name) = '' \" \\\n+                        \" THEN u.username ELSE u.friendly_name END) AS friendly_name,\" \\\n+                        \"SUM(CASE WHEN sh.media_type = 'episode' AND shm.live = 0 \" \\\n+                        \"  THEN sh.d ELSE 0 END) AS tv_count, \" \\\n+                        \"SUM(CASE WHEN sh.media_type = 'movie' AND shm.live = 0 \" \\\n+                        \"  THEN sh.d ELSE 0 END) AS movie_count, \" \\\n+                        \"SUM(CASE WHEN sh.media_type = 'track' AND shm.live = 0 \" \\\n+                        \"  THEN sh.d ELSE 0 END) AS music_count, \" \\\n+                        \"SUM(CASE WHEN shm.live = 1 \" \\\n+                        \"  THEN sh.d ELSE 0 END) AS live_count, \" \\\n+                        \"SUM(sh.d) AS total_duration \" \\\n+                        \"FROM (SELECT *, \" \\\n+                        \"      SUM(CASE WHEN stopped > 0 THEN (stopped - started) - \" \\\n+                        \"         (CASE WHEN paused_counter IS NULL THEN 0 ELSE paused_counter END) ELSE 0 END) \" \\\n+                        \"         AS d \" \\\n+                        \"    FROM session_history \" \\\n+                        \"    WHERE session_history.stopped >= %s %s\" \\\n+                        \"    GROUP BY %s) AS sh \" \\\n+                        \"JOIN session_history_metadata AS shm ON shm.id = sh.id \" \\\n+                        \"JOIN users AS u ON u.user_id = sh.user_id \" \\\n+                        \"GROUP BY sh.user_id \" \\\n+                        \"ORDER BY total_duration DESC \" \\\n+                        \"LIMIT 10\" % (timestamp, user_cond, group_by)\n \n                 result = monitor_db.select(query)\n         except Exception as e:\n@@ -776,36 +776,36 @@ def get_total_plays_per_stream_type(self, time_range='30', y_axis='plays', user_\n \n         try:\n             if y_axis == 'plays':\n-                query = 'SELECT sh.date_played, ' \\\n-                        'SUM(CASE WHEN shmi.transcode_decision = \"direct play\" THEN 1 ELSE 0 END) AS dp_count, ' \\\n-                        'SUM(CASE WHEN shmi.transcode_decision = \"copy\" THEN 1 ELSE 0 END) AS ds_count, ' \\\n-                        'SUM(CASE WHEN shmi.transcode_decision = \"transcode\" THEN 1 ELSE 0 END) AS tc_count ' \\\n-                        'FROM (SELECT *, ' \\\n-                        '      date(started, \"unixepoch\", \"localtime\") AS date_played ' \\\n-                        '    FROM session_history ' \\\n-                        '    WHERE session_history.stopped >= %s %s ' \\\n-                        '    GROUP BY date_played, %s) AS sh ' \\\n-                        'JOIN session_history_media_info AS shmi ON shmi.id = sh.id ' \\\n-                        'GROUP BY sh.date_played ' \\\n-                        'ORDER BY sh.started' % (timestamp, user_cond, group_by)\n+                query = \"SELECT sh.date_played, \" \\\n+                        \"SUM(CASE WHEN shmi.transcode_decision = 'direct play' THEN 1 ELSE 0 END) AS dp_count, \" \\\n+                        \"SUM(CASE WHEN shmi.transcode_decision = 'copy' THEN 1 ELSE 0 END) AS ds_count, \" \\\n+                        \"SUM(CASE WHEN shmi.transcode_decision = 'transcode' THEN 1 ELSE 0 END) AS tc_count \" \\\n+                        \"FROM (SELECT *, \" \\\n+                        \"      date(started, 'unixepoch', 'localtime') AS date_played \" \\\n+                        \"    FROM session_history \" \\\n+                        \"    WHERE session_history.stopped >= %s %s \" \\\n+                        \"    GROUP BY date_played, %s) AS sh \" \\\n+                        \"JOIN session_history_media_info AS shmi ON shmi.id = sh.id \" \\\n+                        \"GROUP BY sh.date_played \" \\\n+                        \"ORDER BY sh.started\" % (timestamp, user_cond, group_by)\n \n                 result = monitor_db.select(query)\n             else:\n-                query = 'SELECT sh.date_played, ' \\\n-                        'SUM(CASE WHEN shmi.transcode_decision = \"direct play\" THEN sh.d ELSE 0 END) AS dp_count, ' \\\n-                        'SUM(CASE WHEN shmi.transcode_decision = \"copy\" THEN sh.d ELSE 0 END) AS ds_count, ' \\\n-                        'SUM(CASE WHEN shmi.transcode_decision = \"transcode\" THEN sh.d ELSE 0 END) AS tc_count ' \\\n-                        'FROM (SELECT *, ' \\\n-                        '      date(started, \"unixepoch\", \"localtime\") AS date_played,' \\\n-                        '      SUM(CASE WHEN stopped > 0 THEN (stopped - started) - ' \\\n-                        '        (CASE WHEN paused_counter IS NULL THEN 0 ELSE paused_counter END) ELSE 0 END) ' \\\n-                        '        AS d ' \\\n-                        '    FROM session_history ' \\\n-                        '    WHERE session_history.stopped >= %s %s' \\\n-                        '    GROUP BY date_played, %s) AS sh ' \\\n-                        'JOIN session_history_media_info AS shmi ON shmi.id = sh.id ' \\\n-                        'GROUP BY sh.date_played ' \\\n-                        'ORDER BY sh.started' % (timestamp, user_cond, group_by)\n+                query = \"SELECT sh.date_played, \" \\\n+                        \"SUM(CASE WHEN shmi.transcode_decision = 'direct play' THEN sh.d ELSE 0 END) AS dp_count, \" \\\n+                        \"SUM(CASE WHEN shmi.transcode_decision = 'copy' THEN sh.d ELSE 0 END) AS ds_count, \" \\\n+                        \"SUM(CASE WHEN shmi.transcode_decision = 'transcode' THEN sh.d ELSE 0 END) AS tc_count \" \\\n+                        \"FROM (SELECT *, \" \\\n+                        \"      date(started, 'unixepoch', 'localtime') AS date_played,\" \\\n+                        \"      SUM(CASE WHEN stopped > 0 THEN (stopped - started) - \" \\\n+                        \"        (CASE WHEN paused_counter IS NULL THEN 0 ELSE paused_counter END) ELSE 0 END) \" \\\n+                        \"        AS d \" \\\n+                        \"    FROM session_history \" \\\n+                        \"    WHERE session_history.stopped >= %s %s\" \\\n+                        \"    GROUP BY date_played, %s) AS sh \" \\\n+                        \"JOIN session_history_media_info AS shmi ON shmi.id = sh.id \" \\\n+                        \"GROUP BY sh.date_played \" \\\n+                        \"ORDER BY sh.started\" % (timestamp, user_cond, group_by)\n \n                 result = monitor_db.select(query)\n         except Exception as e:\n@@ -873,40 +873,40 @@ def get_total_plays_by_source_resolution(self, time_range='30', y_axis='plays',\n \n         try:\n             if y_axis == 'plays':\n-                query = 'SELECT shmi.video_full_resolution AS resolution, ' \\\n-                        'SUM(CASE WHEN shmi.transcode_decision = \"direct play\" THEN 1 ELSE 0 END) AS dp_count, ' \\\n-                        'SUM(CASE WHEN shmi.transcode_decision = \"copy\" THEN 1 ELSE 0 END) AS ds_count, ' \\\n-                        'SUM(CASE WHEN shmi.transcode_decision = \"transcode\" THEN 1 ELSE 0 END) AS tc_count, ' \\\n-                        'COUNT(sh.id) AS total_count ' \\\n-                        'FROM (SELECT * ' \\\n-                        '    FROM session_history ' \\\n-                        '    WHERE session_history.stopped >= %s ' \\\n-                        '    AND session_history.media_type IN (\"movie\", \"episode\") %s ' \\\n-                        '    GROUP BY %s) AS sh ' \\\n-                        'JOIN session_history_media_info AS shmi ON shmi.id = sh.id ' \\\n-                        'GROUP BY resolution ' \\\n-                        'ORDER BY total_count DESC ' \\\n-                        'LIMIT 10' % (timestamp, user_cond, group_by)\n+                query = \"SELECT shmi.video_full_resolution AS resolution, \" \\\n+                        \"SUM(CASE WHEN shmi.transcode_decision = 'direct play' THEN 1 ELSE 0 END) AS dp_count, \" \\\n+                        \"SUM(CASE WHEN shmi.transcode_decision = 'copy' THEN 1 ELSE 0 END) AS ds_count, \" \\\n+                        \"SUM(CASE WHEN shmi.transcode_decision = 'transcode' THEN 1 ELSE 0 END) AS tc_count, \" \\\n+                        \"COUNT(sh.id) AS total_count \" \\\n+                        \"FROM (SELECT * \" \\\n+                        \"    FROM session_history \" \\\n+                        \"    WHERE session_history.stopped >= %s \" \\\n+                        \"    AND session_history.media_type IN ('movie', 'episode') %s \" \\\n+                        \"    GROUP BY %s) AS sh \" \\\n+                        \"JOIN session_history_media_info AS shmi ON shmi.id = sh.id \" \\\n+                        \"GROUP BY resolution \" \\\n+                        \"ORDER BY total_count DESC \" \\\n+                        \"LIMIT 10\" % (timestamp, user_cond, group_by)\n \n                 result = monitor_db.select(query)\n             else:\n-                query = 'SELECT shmi.video_full_resolution AS resolution,' \\\n-                        'SUM(CASE WHEN shmi.transcode_decision = \"direct play\" THEN sh.d ELSE 0 END) AS dp_count, ' \\\n-                        'SUM(CASE WHEN shmi.transcode_decision = \"copy\" THEN sh.d ELSE 0 END) AS ds_count, ' \\\n-                        'SUM(CASE WHEN shmi.transcode_decision = \"transcode\" THEN sh.d ELSE 0 END) AS tc_count, ' \\\n-                        'SUM(sh.d) AS total_duration ' \\\n-                        'FROM (SELECT *, ' \\\n-                        '      SUM(CASE WHEN stopped > 0 THEN (stopped - started) - ' \\\n-                        '        (CASE WHEN paused_counter IS NULL THEN 0 ELSE paused_counter END) ELSE 0 END) ' \\\n-                        '        AS d ' \\\n-                        '    FROM session_history ' \\\n-                        '    WHERE session_history.stopped >= %s ' \\\n-                        '    AND session_history.media_type IN (\"movie\", \"episode\") %s ' \\\n-                        '    GROUP BY %s) AS sh ' \\\n-                        'JOIN session_history_media_info AS shmi ON shmi.id = sh.id ' \\\n-                        'GROUP BY resolution ' \\\n-                        'ORDER BY total_duration DESC ' \\\n-                        'LIMIT 10' % (timestamp, user_cond, group_by)\n+                query = \"SELECT shmi.video_full_resolution AS resolution,\" \\\n+                        \"SUM(CASE WHEN shmi.transcode_decision = 'direct play' THEN sh.d ELSE 0 END) AS dp_count, \" \\\n+                        \"SUM(CASE WHEN shmi.transcode_decision = 'copy' THEN sh.d ELSE 0 END) AS ds_count, \" \\\n+                        \"SUM(CASE WHEN shmi.transcode_decision = 'transcode' THEN sh.d ELSE 0 END) AS tc_count, \" \\\n+                        \"SUM(sh.d) AS total_duration \" \\\n+                        \"FROM (SELECT *, \" \\\n+                        \"      SUM(CASE WHEN stopped > 0 THEN (stopped - started) - \" \\\n+                        \"        (CASE WHEN paused_counter IS NULL THEN 0 ELSE paused_counter END) ELSE 0 END) \" \\\n+                        \"        AS d \" \\\n+                        \"    FROM session_history \" \\\n+                        \"    WHERE session_history.stopped >= %s \" \\\n+                        \"    AND session_history.media_type IN ('movie', 'episode') %s \" \\\n+                        \"    GROUP BY %s) AS sh \" \\\n+                        \"JOIN session_history_media_info AS shmi ON shmi.id = sh.id \" \\\n+                        \"GROUP BY resolution \" \\\n+                        \"ORDER BY total_duration DESC \" \\\n+                        \"LIMIT 10\" % (timestamp, user_cond, group_by)\n \n                 result = monitor_db.select(query)\n         except Exception as e:\n@@ -954,66 +954,66 @@ def get_total_plays_by_stream_resolution(self, time_range='30', y_axis='plays',\n \n         try:\n             if y_axis == 'plays':\n-                query = 'SELECT ' \\\n-                        '(CASE WHEN shmi.stream_video_full_resolution IS NULL THEN ' \\\n-                        '  (CASE WHEN shmi.video_decision = \"transcode\" THEN ' \\\n-                        '    (CASE ' \\\n-                        '      WHEN shmi.transcode_height <= 360 THEN \"SD\" ' \\\n-                        '      WHEN shmi.transcode_height <= 480 THEN \"480\" ' \\\n-                        '      WHEN shmi.transcode_height <= 576 THEN \"576\" ' \\\n-                        '      WHEN shmi.transcode_height <= 720 THEN \"720\" ' \\\n-                        '      WHEN shmi.transcode_height <= 1080 THEN \"1080\" ' \\\n-                        '      WHEN shmi.transcode_height <= 1440 THEN \"QHD\" ' \\\n-                        '      WHEN shmi.transcode_height <= 2160 THEN \"4k\" ' \\\n-                        '      ELSE \"unknown\" END)' \\\n-                        '    ELSE shmi.video_full_resolution END) ' \\\n-                        '  ELSE shmi.stream_video_full_resolution END) AS resolution, ' \\\n-                        'SUM(CASE WHEN shmi.transcode_decision = \"direct play\" THEN 1 ELSE 0 END) AS dp_count, ' \\\n-                        'SUM(CASE WHEN shmi.transcode_decision = \"copy\" THEN 1 ELSE 0 END) AS ds_count, ' \\\n-                        'SUM(CASE WHEN shmi.transcode_decision = \"transcode\" THEN 1 ELSE 0 END) AS tc_count, ' \\\n-                        'COUNT(sh.id) AS total_count ' \\\n-                        'FROM (SELECT * ' \\\n-                        '    FROM session_history ' \\\n-                        '    WHERE session_history.stopped >= %s ' \\\n-                        '    AND session_history.media_type IN (\"movie\", \"episode\") %s ' \\\n-                        '    GROUP BY %s) AS sh ' \\\n-                        'JOIN session_history_media_info AS shmi ON shmi.id = sh.id ' \\\n-                        'GROUP BY resolution ' \\\n-                        'ORDER BY total_count DESC ' \\\n-                        'LIMIT 10' % (timestamp, user_cond, group_by)\n+                query = \"SELECT \" \\\n+                        \"(CASE WHEN shmi.stream_video_full_resolution IS NULL THEN \" \\\n+                        \"  (CASE WHEN shmi.video_decision = 'transcode' THEN \" \\\n+                        \"    (CASE \" \\\n+                        \"      WHEN shmi.transcode_height <= 360 THEN 'SD' \" \\\n+                        \"      WHEN shmi.transcode_height <= 480 THEN '480' \" \\\n+                        \"      WHEN shmi.transcode_height <= 576 THEN '576' \" \\\n+                        \"      WHEN shmi.transcode_height <= 720 THEN '720' \" \\\n+                        \"      WHEN shmi.transcode_height <= 1080 THEN '1080' \" \\\n+                        \"      WHEN shmi.transcode_height <= 1440 THEN 'QHD' \" \\\n+                        \"      WHEN shmi.transcode_height <= 2160 THEN '4k' \" \\\n+                        \"      ELSE 'unknown' END)\" \\\n+                        \"    ELSE shmi.video_full_resolution END) \" \\\n+                        \"  ELSE shmi.stream_video_full_resolution END) AS resolution, \" \\\n+                        \"SUM(CASE WHEN shmi.transcode_decision = 'direct play' THEN 1 ELSE 0 END) AS dp_count, \" \\\n+                        \"SUM(CASE WHEN shmi.transcode_decision = 'copy' THEN 1 ELSE 0 END) AS ds_count, \" \\\n+                        \"SUM(CASE WHEN shmi.transcode_decision = 'transcode' THEN 1 ELSE 0 END) AS tc_count, \" \\\n+                        \"COUNT(sh.id) AS total_count \" \\\n+                        \"FROM (SELECT * \" \\\n+                        \"    FROM session_history \" \\\n+                        \"    WHERE session_history.stopped >= %s \" \\\n+                        \"    AND session_history.media_type IN ('movie', 'episode') %s \" \\\n+                        \"    GROUP BY %s) AS sh \" \\\n+                        \"JOIN session_history_media_info AS shmi ON shmi.id = sh.id \" \\\n+                        \"GROUP BY resolution \" \\\n+                        \"ORDER BY total_count DESC \" \\\n+                        \"LIMIT 10\" % (timestamp, user_cond, group_by)\n \n                 result = monitor_db.select(query)\n             else:\n-                query = 'SELECT ' \\\n-                        '(CASE WHEN shmi.stream_video_full_resolution IS NULL THEN ' \\\n-                        '  (CASE WHEN shmi.video_decision = \"transcode\" THEN ' \\\n-                        '    (CASE ' \\\n-                        '      WHEN shmi.transcode_height <= 360 THEN \"SD\" ' \\\n-                        '      WHEN shmi.transcode_height <= 480 THEN \"480\" ' \\\n-                        '      WHEN shmi.transcode_height <= 576 THEN \"576\" ' \\\n-                        '      WHEN shmi.transcode_height <= 720 THEN \"720\" ' \\\n-                        '      WHEN shmi.transcode_height <= 1080 THEN \"1080\" ' \\\n-                        '      WHEN shmi.transcode_height <= 1440 THEN \"QHD\" ' \\\n-                        '      WHEN shmi.transcode_height <= 2160 THEN \"4k\" ' \\\n-                        '      ELSE \"unknown\" END)' \\\n-                        '    ELSE shmi.video_full_resolution END) ' \\\n-                        '  ELSE shmi.stream_video_full_resolution END) AS resolution, ' \\\n-                        'SUM(CASE WHEN shmi.transcode_decision = \"direct play\" THEN sh.d ELSE 0 END) AS dp_count, ' \\\n-                        'SUM(CASE WHEN shmi.transcode_decision = \"copy\" THEN sh.d ELSE 0 END) AS ds_count, ' \\\n-                        'SUM(CASE WHEN shmi.transcode_decision = \"transcode\" THEN sh.d ELSE 0 END) AS tc_count, ' \\\n-                        'SUM(sh.d) AS total_duration ' \\\n-                        'FROM (SELECT *, ' \\\n-                        '      SUM(CASE WHEN stopped > 0 THEN (stopped - started) - ' \\\n-                        '        (CASE WHEN paused_counter IS NULL THEN 0 ELSE paused_counter END) ELSE 0 END) ' \\\n-                        '        AS d ' \\\n-                        '    FROM session_history ' \\\n-                        '    WHERE session_history.stopped >= %s ' \\\n-                        '    AND session_history.media_type IN (\"movie\", \"episode\") %s ' \\\n-                        '    GROUP BY %s) AS sh ' \\\n-                        'JOIN session_history_media_info AS shmi ON shmi.id = sh.id ' \\\n-                        'GROUP BY resolution ' \\\n-                        'ORDER BY total_duration DESC ' \\\n-                        'LIMIT 10' % (timestamp, user_cond, group_by)\n+                query = \"SELECT \" \\\n+                        \"(CASE WHEN shmi.stream_video_full_resolution IS NULL THEN \" \\\n+                        \"  (CASE WHEN shmi.video_decision = 'transcode' THEN \" \\\n+                        \"    (CASE \" \\\n+                        \"      WHEN shmi.transcode_height <= 360 THEN 'SD' \" \\\n+                        \"      WHEN shmi.transcode_height <= 480 THEN '480' \" \\\n+                        \"      WHEN shmi.transcode_height <= 576 THEN '576' \" \\\n+                        \"      WHEN shmi.transcode_height <= 720 THEN '720' \" \\\n+                        \"      WHEN shmi.transcode_height <= 1080 THEN '1080' \" \\\n+                        \"      WHEN shmi.transcode_height <= 1440 THEN 'QHD' \" \\\n+                        \"      WHEN shmi.transcode_height <= 2160 THEN '4k' \" \\\n+                        \"      ELSE 'unknown' END)\" \\\n+                        \"    ELSE shmi.video_full_resolution END) \" \\\n+                        \"  ELSE shmi.stream_video_full_resolution END) AS resolution, \" \\\n+                        \"SUM(CASE WHEN shmi.transcode_decision = 'direct play' THEN sh.d ELSE 0 END) AS dp_count, \" \\\n+                        \"SUM(CASE WHEN shmi.transcode_decision = 'copy' THEN sh.d ELSE 0 END) AS ds_count, \" \\\n+                        \"SUM(CASE WHEN shmi.transcode_decision = 'transcode' THEN sh.d ELSE 0 END) AS tc_count, \" \\\n+                        \"SUM(sh.d) AS total_duration \" \\\n+                        \"FROM (SELECT *, \" \\\n+                        \"      SUM(CASE WHEN stopped > 0 THEN (stopped - started) - \" \\\n+                        \"        (CASE WHEN paused_counter IS NULL THEN 0 ELSE paused_counter END) ELSE 0 END) \" \\\n+                        \"        AS d \" \\\n+                        \"    FROM session_history \" \\\n+                        \"    WHERE session_history.stopped >= %s \" \\\n+                        \"    AND session_history.media_type IN ('movie', 'episode') %s \" \\\n+                        \"    GROUP BY %s) AS sh \" \\\n+                        \"JOIN session_history_media_info AS shmi ON shmi.id = sh.id \" \\\n+                        \"GROUP BY resolution \" \\\n+                        \"ORDER BY total_duration DESC \" \\\n+                        \"LIMIT 10\" % (timestamp, user_cond, group_by)\n \n                 result = monitor_db.select(query)\n         except Exception as e:\n@@ -1061,38 +1061,38 @@ def get_stream_type_by_top_10_platforms(self, time_range='30', y_axis='plays', u\n \n         try:\n             if y_axis == 'plays':\n-                query = 'SELECT sh.platform, ' \\\n-                        'SUM(CASE WHEN shmi.transcode_decision = \"direct play\" THEN 1 ELSE 0 END) AS dp_count, ' \\\n-                        'SUM(CASE WHEN shmi.transcode_decision = \"copy\" THEN 1 ELSE 0 END) AS ds_count, ' \\\n-                        'SUM(CASE WHEN shmi.transcode_decision = \"transcode\" THEN 1 ELSE 0 END) AS tc_count, ' \\\n-                        'COUNT(sh.id) AS total_count ' \\\n-                        'FROM (SELECT * ' \\\n-                        '    FROM session_history ' \\\n-                        '    WHERE session_history.stopped >= %s %s ' \\\n-                        '    GROUP BY %s) AS sh ' \\\n-                        'JOIN session_history_media_info AS shmi ON shmi.id = sh.id ' \\\n-                        'GROUP BY sh.platform ' \\\n-                        'ORDER BY total_count DESC ' \\\n-                        'LIMIT 10' % (timestamp, user_cond, group_by)\n+                query = \"SELECT sh.platform, \" \\\n+                        \"SUM(CASE WHEN shmi.transcode_decision = 'direct play' THEN 1 ELSE 0 END) AS dp_count, \" \\\n+                        \"SUM(CASE WHEN shmi.transcode_decision = 'copy' THEN 1 ELSE 0 END) AS ds_count, \" \\\n+                        \"SUM(CASE WHEN shmi.transcode_decision = 'transcode' THEN 1 ELSE 0 END) AS tc_count, \" \\\n+                        \"COUNT(sh.id) AS total_count \" \\\n+                        \"FROM (SELECT * \" \\\n+                        \"    FROM session_history \" \\\n+                        \"    WHERE session_history.stopped >= %s %s \" \\\n+                        \"    GROUP BY %s) AS sh \" \\\n+                        \"JOIN session_history_media_info AS shmi ON shmi.id = sh.id \" \\\n+                        \"GROUP BY sh.platform \" \\\n+                        \"ORDER BY total_count DESC \" \\\n+                        \"LIMIT 10\" % (timestamp, user_cond, group_by)\n \n                 result = monitor_db.select(query)\n             else:\n-                query = 'SELECT sh.platform, ' \\\n-                        'SUM(CASE WHEN shmi.transcode_decision = \"direct play\" THEN sh.d ELSE 0 END) AS dp_count, ' \\\n-                        'SUM(CASE WHEN shmi.transcode_decision = \"copy\" THEN sh.d ELSE 0 END) AS ds_count, ' \\\n-                        'SUM(CASE WHEN shmi.transcode_decision = \"transcode\" THEN sh.d ELSE 0 END) AS tc_count, ' \\\n-                        'SUM(sh.d) AS total_duration ' \\\n-                        'FROM (SELECT *, ' \\\n-                        '      SUM(CASE WHEN stopped > 0 THEN (stopped - started) - ' \\\n-                        '        (CASE WHEN paused_counter IS NULL THEN 0 ELSE paused_counter END) ELSE 0 END) ' \\\n-                        '        AS d ' \\\n-                        '    FROM session_history ' \\\n-                        '    WHERE session_history.stopped >= %s %s ' \\\n-                        '    GROUP BY %s) AS sh ' \\\n-                        'JOIN session_history_media_info AS shmi ON shmi.id = sh.id ' \\\n-                        'GROUP BY sh.platform ' \\\n-                        'ORDER BY total_duration DESC ' \\\n-                        'LIMIT 10' % (timestamp, user_cond, group_by)\n+                query = \"SELECT sh.platform, \" \\\n+                        \"SUM(CASE WHEN shmi.transcode_decision = 'direct play' THEN sh.d ELSE 0 END) AS dp_count, \" \\\n+                        \"SUM(CASE WHEN shmi.transcode_decision = 'copy' THEN sh.d ELSE 0 END) AS ds_count, \" \\\n+                        \"SUM(CASE WHEN shmi.transcode_decision = 'transcode' THEN sh.d ELSE 0 END) AS tc_count, \" \\\n+                        \"SUM(sh.d) AS total_duration \" \\\n+                        \"FROM (SELECT *, \" \\\n+                        \"      SUM(CASE WHEN stopped > 0 THEN (stopped - started) - \" \\\n+                        \"        (CASE WHEN paused_counter IS NULL THEN 0 ELSE paused_counter END) ELSE 0 END) \" \\\n+                        \"        AS d \" \\\n+                        \"    FROM session_history \" \\\n+                        \"    WHERE session_history.stopped >= %s %s \" \\\n+                        \"    GROUP BY %s) AS sh \" \\\n+                        \"JOIN session_history_media_info AS shmi ON shmi.id = sh.id \" \\\n+                        \"GROUP BY sh.platform \" \\\n+                        \"ORDER BY total_duration DESC \" \\\n+                        \"LIMIT 10\" % (timestamp, user_cond, group_by)\n \n                 result = monitor_db.select(query)\n         except Exception as e:\n@@ -1141,44 +1141,44 @@ def get_stream_type_by_top_10_users(self, time_range='30', y_axis='plays', user_\n \n         try:\n             if y_axis == 'plays':\n-                query = 'SELECT u.user_id, u.username, ' \\\n-                        '(CASE WHEN u.friendly_name IS NULL OR TRIM(u.friendly_name) = \"\" ' \\\n-                        '  THEN u.username ELSE u.friendly_name END) AS friendly_name,' \\\n-                        'SUM(CASE WHEN shmi.transcode_decision = \"direct play\" THEN 1 ELSE 0 END) AS dp_count, ' \\\n-                        'SUM(CASE WHEN shmi.transcode_decision = \"copy\" THEN 1 ELSE 0 END) AS ds_count, ' \\\n-                        'SUM(CASE WHEN shmi.transcode_decision = \"transcode\" THEN 1 ELSE 0 END) AS tc_count, ' \\\n-                        'COUNT(sh.id) AS total_count ' \\\n-                        'FROM (SELECT * ' \\\n-                        '    FROM session_history ' \\\n-                        '    WHERE session_history.stopped >= %s %s ' \\\n-                        '    GROUP BY %s) AS sh ' \\\n-                        'JOIN session_history_media_info AS shmi ON shmi.id = sh.id ' \\\n-                        'JOIN users AS u ON u.user_id = sh.user_id ' \\\n-                        'GROUP BY u.user_id ' \\\n-                        'ORDER BY total_count DESC ' \\\n-                        'LIMIT 10' % (timestamp, user_cond, group_by)\n+                query = \"SELECT u.user_id, u.username, \" \\\n+                        \"(CASE WHEN u.friendly_name IS NULL OR TRIM(u.friendly_name) = '' \" \\\n+                        \"  THEN u.username ELSE u.friendly_name END) AS friendly_name,\" \\\n+                        \"SUM(CASE WHEN shmi.transcode_decision = 'direct play' THEN 1 ELSE 0 END) AS dp_count, \" \\\n+                        \"SUM(CASE WHEN shmi.transcode_decision = 'copy' THEN 1 ELSE 0 END) AS ds_count, \" \\\n+                        \"SUM(CASE WHEN shmi.transcode_decision = 'transcode' THEN 1 ELSE 0 END) AS tc_count, \" \\\n+                        \"COUNT(sh.id) AS total_count \" \\\n+                        \"FROM (SELECT * \" \\\n+                        \"    FROM session_history \" \\\n+                        \"    WHERE session_history.stopped >= %s %s \" \\\n+                        \"    GROUP BY %s) AS sh \" \\\n+                        \"JOIN session_history_media_info AS shmi ON shmi.id = sh.id \" \\\n+                        \"JOIN users AS u ON u.user_id = sh.user_id \" \\\n+                        \"GROUP BY u.user_id \" \\\n+                        \"ORDER BY total_count DESC \" \\\n+                        \"LIMIT 10\" % (timestamp, user_cond, group_by)\n \n                 result = monitor_db.select(query)\n             else:\n-                query = 'SELECT u.user_id, u.username, ' \\\n-                        '(CASE WHEN u.friendly_name IS NULL OR TRIM(u.friendly_name) = \"\" ' \\\n-                        '  THEN u.username ELSE u.friendly_name END) AS friendly_name,' \\\n-                        'SUM(CASE WHEN shmi.transcode_decision = \"direct play\" THEN sh.d ELSE 0 END) AS dp_count, ' \\\n-                        'SUM(CASE WHEN shmi.transcode_decision = \"copy\" THEN sh.d ELSE 0 END) AS ds_count, ' \\\n-                        'SUM(CASE WHEN shmi.transcode_decision = \"transcode\" THEN sh.d ELSE 0 END) AS tc_count, ' \\\n-                        'SUM(sh.d) AS total_duration ' \\\n-                        'FROM (SELECT *, ' \\\n-                        '      SUM(CASE WHEN stopped > 0 THEN (stopped - started) - ' \\\n-                        '        (CASE WHEN paused_counter IS NULL THEN 0 ELSE paused_counter END) ELSE 0 END) ' \\\n-                        '        AS d ' \\\n-                        '    FROM session_history ' \\\n-                        '    WHERE session_history.stopped >= %s %s ' \\\n-                        '    GROUP BY %s) AS sh ' \\\n-                        'JOIN session_history_media_info AS shmi ON shmi.id = sh.id ' \\\n-                        'JOIN users AS u ON u.user_id = sh.user_id ' \\\n-                        'GROUP BY u.user_id ' \\\n-                        'ORDER BY total_duration DESC ' \\\n-                        'LIMIT 10' % (timestamp, user_cond, group_by)\n+                query = \"SELECT u.user_id, u.username, \" \\\n+                        \"(CASE WHEN u.friendly_name IS NULL OR TRIM(u.friendly_name) = '' \" \\\n+                        \"  THEN u.username ELSE u.friendly_name END) AS friendly_name,\" \\\n+                        \"SUM(CASE WHEN shmi.transcode_decision = 'direct play' THEN sh.d ELSE 0 END) AS dp_count, \" \\\n+                        \"SUM(CASE WHEN shmi.transcode_decision = 'copy' THEN sh.d ELSE 0 END) AS ds_count, \" \\\n+                        \"SUM(CASE WHEN shmi.transcode_decision = 'transcode' THEN sh.d ELSE 0 END) AS tc_count, \" \\\n+                        \"SUM(sh.d) AS total_duration \" \\\n+                        \"FROM (SELECT *, \" \\\n+                        \"      SUM(CASE WHEN stopped > 0 THEN (stopped - started) - \" \\\n+                        \"        (CASE WHEN paused_counter IS NULL THEN 0 ELSE paused_counter END) ELSE 0 END) \" \\\n+                        \"        AS d \" \\\n+                        \"    FROM session_history \" \\\n+                        \"    WHERE session_history.stopped >= %s %s \" \\\n+                        \"    GROUP BY %s) AS sh \" \\\n+                        \"JOIN session_history_media_info AS shmi ON shmi.id = sh.id \" \\\n+                        \"JOIN users AS u ON u.user_id = sh.user_id \" \\\n+                        \"GROUP BY u.user_id \" \\\n+                        \"ORDER BY total_duration DESC \" \\\n+                        \"LIMIT 10\" % (timestamp, user_cond, group_by)\n \n                 result = monitor_db.select(query)\n         except Exception as e:"}, {"sha": "33832aba5c14c7c01406a9e0457e0df65158f8f1", "filename": "plexpy/libraries.py", "status": "modified", "additions": 109, "deletions": 109, "changes": 218, "blob_url": "https://github.com/Tautulli/Tautulli/blob/ea6c6078df410f333a060016dfce18c21ad134c9/plexpy%2Flibraries.py", "raw_url": "https://github.com/Tautulli/Tautulli/raw/ea6c6078df410f333a060016dfce18c21ad134c9/plexpy%2Flibraries.py", "contents_url": "https://api.github.com/repos/Tautulli/Tautulli/contents/plexpy%2Flibraries.py?ref=ea6c6078df410f333a060016dfce18c21ad134c9", "patch": "@@ -95,8 +95,8 @@ def refresh_libraries():\n \n         add_live_tv_library(refresh=True)\n \n-        query = 'UPDATE library_sections SET is_active = 0 WHERE server_id != ? OR ' \\\n-                'section_id NOT IN ({})'.format(', '.join(['?'] * len(section_ids)))\n+        query = \"UPDATE library_sections SET is_active = 0 WHERE server_id != ? OR \" \\\n+                \"section_id NOT IN ({})\".format(\", \".join([\"?\"] * len(section_ids)))\n         monitor_db.action(query=query, args=[plexpy.CONFIG.PMS_IDENTIFIER] + section_ids)\n \n         new_keys = plexpy.CONFIG.HOME_LIBRARY_CARDS + new_keys\n@@ -112,8 +112,8 @@ def refresh_libraries():\n \n def add_live_tv_library(refresh=False):\n     monitor_db = database.MonitorDatabase()\n-    result = monitor_db.select_single('SELECT * FROM library_sections '\n-                                      'WHERE section_id = ? and server_id = ?',\n+    result = monitor_db.select_single(\"SELECT * FROM library_sections \"\n+                                      \"WHERE section_id = ? and server_id = ?\",\n                                       [common.LIVE_TV_SECTION_ID, plexpy.CONFIG.PMS_IDENTIFIER])\n \n     if result and not refresh or not result and refresh:\n@@ -138,7 +138,7 @@ def add_live_tv_library(refresh=False):\n \n def has_library_type(section_type):\n     monitor_db = database.MonitorDatabase()\n-    query = 'SELECT * FROM library_sections WHERE section_type = ? AND deleted_section = 0'\n+    query = \"SELECT * FROM library_sections WHERE section_type = ? AND deleted_section = 0\"\n     args = [section_type]\n     result = monitor_db.select_single(query=query, args=args)\n     return bool(result)\n@@ -328,44 +328,44 @@ def get_datatables_list(self, kwargs=None, grouping=None):\n \n         group_by = 'session_history.reference_id' if grouping else 'session_history.id'\n \n-        columns = ['library_sections.id AS row_id',\n-                   'library_sections.server_id',\n-                   'library_sections.section_id',\n-                   'library_sections.section_name',\n-                   'library_sections.section_type',\n-                   'library_sections.count',\n-                   'library_sections.parent_count',\n-                   'library_sections.child_count',\n-                   'library_sections.thumb AS library_thumb',\n-                   'library_sections.custom_thumb_url AS custom_thumb',\n-                   'library_sections.art AS library_art',\n-                   'library_sections.custom_art_url AS custom_art',\n-                   'COUNT(DISTINCT %s) AS plays' % group_by,\n-                   'SUM(CASE WHEN session_history.stopped > 0 THEN (session_history.stopped - session_history.started) \\\n+        columns = [\"library_sections.id AS row_id\",\n+                   \"library_sections.server_id\",\n+                   \"library_sections.section_id\",\n+                   \"library_sections.section_name\",\n+                   \"library_sections.section_type\",\n+                   \"library_sections.count\",\n+                   \"library_sections.parent_count\",\n+                   \"library_sections.child_count\",\n+                   \"library_sections.thumb AS library_thumb\",\n+                   \"library_sections.custom_thumb_url AS custom_thumb\",\n+                   \"library_sections.art AS library_art\",\n+                   \"library_sections.custom_art_url AS custom_art\",\n+                   \"COUNT(DISTINCT %s) AS plays\" % group_by,\n+                   \"SUM(CASE WHEN session_history.stopped > 0 THEN (session_history.stopped - session_history.started) \\\n                     ELSE 0 END) - SUM(CASE WHEN session_history.paused_counter IS NULL THEN 0 ELSE \\\n-                    session_history.paused_counter END) AS duration',\n-                   'MAX(session_history.started) AS last_accessed',\n-                   'MAX(session_history.id) AS history_row_id',\n-                   'session_history_metadata.full_title AS last_played',\n-                   'session_history.rating_key',\n-                   'session_history_metadata.media_type',\n-                   'session_history_metadata.thumb',\n-                   'session_history_metadata.parent_thumb',\n-                   'session_history_metadata.grandparent_thumb',\n-                   'session_history_metadata.parent_title',\n-                   'session_history_metadata.year',\n-                   'session_history_metadata.media_index',\n-                   'session_history_metadata.parent_media_index',\n-                   'session_history_metadata.content_rating',\n-                   'session_history_metadata.labels',\n-                   'session_history_metadata.live',\n-                   'session_history_metadata.added_at',\n-                   'session_history_metadata.originally_available_at',\n-                   'session_history_metadata.guid',\n-                   'library_sections.do_notify',\n-                   'library_sections.do_notify_created',\n-                   'library_sections.keep_history',\n-                   'library_sections.is_active'\n+                    session_history.paused_counter END) AS duration\",\n+                   \"MAX(session_history.started) AS last_accessed\",\n+                   \"MAX(session_history.id) AS history_row_id\",\n+                   \"session_history_metadata.full_title AS last_played\",\n+                   \"session_history.rating_key\",\n+                   \"session_history_metadata.media_type\",\n+                   \"session_history_metadata.thumb\",\n+                   \"session_history_metadata.parent_thumb\",\n+                   \"session_history_metadata.grandparent_thumb\",\n+                   \"session_history_metadata.parent_title\",\n+                   \"session_history_metadata.year\",\n+                   \"session_history_metadata.media_index\",\n+                   \"session_history_metadata.parent_media_index\",\n+                   \"session_history_metadata.content_rating\",\n+                   \"session_history_metadata.labels\",\n+                   \"session_history_metadata.live\",\n+                   \"session_history_metadata.added_at\",\n+                   \"session_history_metadata.originally_available_at\",\n+                   \"session_history_metadata.guid\",\n+                   \"library_sections.do_notify\",\n+                   \"library_sections.do_notify_created\",\n+                   \"library_sections.keep_history\",\n+                   \"library_sections.is_active\"\n                    ]\n         try:\n             query = data_tables.ssp_query(table_name='library_sections',\n@@ -499,11 +499,11 @@ def get_datatables_media_info(self, section_id=None, section_type=None, rating_k\n             group_by = 'rating_key'\n \n         try:\n-            query = 'SELECT MAX(started) AS last_played, COUNT(DISTINCT %s) AS play_count, ' \\\n-                    'rating_key, parent_rating_key, grandparent_rating_key ' \\\n-                    'FROM session_history ' \\\n-                    'WHERE section_id = ? ' \\\n-                    'GROUP BY %s ' % (count_by, group_by)\n+            query = \"SELECT MAX(started) AS last_played, COUNT(DISTINCT %s) AS play_count, \" \\\n+                    \"rating_key, parent_rating_key, grandparent_rating_key \" \\\n+                    \"FROM session_history \" \\\n+                    \"WHERE section_id = ? \" \\\n+                    \"GROUP BY %s \" % (count_by, group_by)\n             result = monitor_db.select(query, args=[section_id])\n         except Exception as e:\n             logger.warn(\"Tautulli Libraries :: Unable to execute database query for get_datatables_media_info2: %s.\" % e)\n@@ -838,27 +838,27 @@ def get_library_details(self, section_id=None, server_id=None, include_last_acce\n         last_accessed = 'NULL'\n         join = ''\n         if include_last_accessed:\n-            last_accessed = 'MAX(session_history.started)'\n-            join = 'LEFT OUTER JOIN session_history ON library_sections.section_id = session_history.section_id ' \\\n+            last_accessed = \"MAX(session_history.started)\"\n+            join = \"LEFT OUTER JOIN session_history ON library_sections.section_id = session_history.section_id \" \\\n \n         monitor_db = database.MonitorDatabase()\n \n         try:\n             if str(section_id).isdigit():\n-                where = 'library_sections.section_id = ?'\n+                where = \"library_sections.section_id = ?\"\n                 args = [section_id]\n             else:\n                 raise Exception('Missing section_id')\n \n-            query = 'SELECT library_sections.id AS row_id, server_id, library_sections.section_id, ' \\\n-                    'section_name, section_type, ' \\\n-                    'count, parent_count, child_count, ' \\\n-                    'library_sections.thumb AS library_thumb, custom_thumb_url AS custom_thumb, ' \\\n-                    'library_sections.art AS library_art, ' \\\n-                    'custom_art_url AS custom_art, is_active, ' \\\n-                    'do_notify, do_notify_created, keep_history, deleted_section, %s AS last_accessed ' \\\n-                    'FROM library_sections %s ' \\\n-                    'WHERE %s AND server_id = ? ' % (last_accessed, join, where)\n+            query = \"SELECT library_sections.id AS row_id, server_id, library_sections.section_id, \" \\\n+                    \"section_name, section_type, \" \\\n+                    \"count, parent_count, child_count, \" \\\n+                    \"library_sections.thumb AS library_thumb, custom_thumb_url AS custom_thumb, \" \\\n+                    \"library_sections.art AS library_art, \" \\\n+                    \"custom_art_url AS custom_art, is_active, \" \\\n+                    \"do_notify, do_notify_created, keep_history, deleted_section, %s AS last_accessed \" \\\n+                    \"FROM library_sections %s \" \\\n+                    \"WHERE %s AND server_id = ? \" % (last_accessed, join, where)\n             result = monitor_db.select(query, args=args + [server_id])\n         except Exception as e:\n             logger.warn(\"Tautulli Libraries :: Unable to execute database query for get_library_details: %s.\" % e)\n@@ -924,24 +924,24 @@ def get_watch_time_stats(self, section_id=None, grouping=None, query_days=None):\n             try:\n                 if days > 0:\n                     if str(section_id).isdigit():\n-                        query = 'SELECT (SUM(stopped - started) - ' \\\n-                                'SUM(CASE WHEN paused_counter IS NULL THEN 0 ELSE paused_counter END)) AS total_time, ' \\\n-                                'COUNT(DISTINCT %s) AS total_plays ' \\\n-                                'FROM session_history ' \\\n-                                'JOIN session_history_metadata ON session_history_metadata.id = session_history.id ' \\\n-                                'WHERE stopped >= %s ' \\\n-                                'AND section_id = ?' % (group_by, timestamp_query)\n+                        query = \"SELECT (SUM(stopped - started) - \" \\\n+                                \"SUM(CASE WHEN paused_counter IS NULL THEN 0 ELSE paused_counter END)) AS total_time, \" \\\n+                                \"COUNT(DISTINCT %s) AS total_plays \" \\\n+                                \"FROM session_history \" \\\n+                                \"JOIN session_history_metadata ON session_history_metadata.id = session_history.id \" \\\n+                                \"WHERE stopped >= %s \" \\\n+                                \"AND section_id = ?\" % (group_by, timestamp_query)\n                         result = monitor_db.select(query, args=[section_id])\n                     else:\n                         result = []\n                 else:\n                     if str(section_id).isdigit():\n-                        query = 'SELECT (SUM(stopped - started) - ' \\\n-                                'SUM(CASE WHEN paused_counter IS NULL THEN 0 ELSE paused_counter END)) AS total_time, ' \\\n-                                'COUNT(DISTINCT %s) AS total_plays ' \\\n-                                'FROM session_history ' \\\n-                                'JOIN session_history_metadata ON session_history_metadata.id = session_history.id ' \\\n-                                'WHERE section_id = ?' % group_by\n+                        query = \"SELECT (SUM(stopped - started) - \" \\\n+                                \"SUM(CASE WHEN paused_counter IS NULL THEN 0 ELSE paused_counter END)) AS total_time, \" \\\n+                                \"COUNT(DISTINCT %s) AS total_plays \" \\\n+                                \"FROM session_history \" \\\n+                                \"JOIN session_history_metadata ON session_history_metadata.id = session_history.id \" \\\n+                                \"WHERE section_id = ?\" % group_by\n                         result = monitor_db.select(query, args=[section_id])\n                     else:\n                         result = []\n@@ -981,17 +981,17 @@ def get_user_stats(self, section_id=None, grouping=None):\n \n         try:\n             if str(section_id).isdigit():\n-                query = 'SELECT (CASE WHEN users.friendly_name IS NULL OR TRIM(users.friendly_name) = \"\" ' \\\n-                        'THEN users.username ELSE users.friendly_name END) AS friendly_name, ' \\\n-                        'users.user_id, users.username, users.thumb, users.custom_avatar_url AS custom_thumb, ' \\\n-                        'COUNT(DISTINCT %s) AS total_plays, (SUM(stopped - started) - ' \\\n-                        'SUM(CASE WHEN paused_counter IS NULL THEN 0 ELSE paused_counter END)) AS total_time ' \\\n-                        'FROM session_history ' \\\n-                        'JOIN session_history_metadata ON session_history_metadata.id = session_history.id ' \\\n-                        'JOIN users ON users.user_id = session_history.user_id ' \\\n-                        'WHERE section_id = ? ' \\\n-                        'GROUP BY users.user_id ' \\\n-                        'ORDER BY total_plays DESC, total_time DESC' % group_by\n+                query = \"SELECT (CASE WHEN users.friendly_name IS NULL OR TRIM(users.friendly_name) = '' \" \\\n+                        \"THEN users.username ELSE users.friendly_name END) AS friendly_name, \" \\\n+                        \"users.user_id, users.username, users.thumb, users.custom_avatar_url AS custom_thumb, \" \\\n+                        \"COUNT(DISTINCT %s) AS total_plays, (SUM(stopped - started) - \" \\\n+                        \"SUM(CASE WHEN paused_counter IS NULL THEN 0 ELSE paused_counter END)) AS total_time \" \\\n+                        \"FROM session_history \" \\\n+                        \"JOIN session_history_metadata ON session_history_metadata.id = session_history.id \" \\\n+                        \"JOIN users ON users.user_id = session_history.user_id \" \\\n+                        \"WHERE section_id = ? \" \\\n+                        \"GROUP BY users.user_id \" \\\n+                        \"ORDER BY total_plays DESC, total_time DESC\" % group_by\n                 result = monitor_db.select(query, args=[section_id])\n             else:\n                 result = []\n@@ -1030,16 +1030,16 @@ def get_recently_watched(self, section_id=None, limit='10'):\n \n         try:\n             if str(section_id).isdigit():\n-                query = 'SELECT session_history.id, session_history.media_type, guid, ' \\\n-                        'session_history.rating_key, session_history.parent_rating_key, session_history.grandparent_rating_key, ' \\\n-                        'title, parent_title, grandparent_title, original_title, ' \\\n-                        'thumb, parent_thumb, grandparent_thumb, media_index, parent_media_index, ' \\\n-                        'year, originally_available_at, added_at, live, started, user, content_rating, labels, section_id ' \\\n-                        'FROM session_history_metadata ' \\\n-                        'JOIN session_history ON session_history_metadata.id = session_history.id ' \\\n-                        'WHERE section_id = ? ' \\\n-                        'GROUP BY session_history.rating_key ' \\\n-                        'ORDER BY MAX(started) DESC LIMIT ?'\n+                query = \"SELECT session_history.id, session_history.media_type, guid, \" \\\n+                        \"session_history.rating_key, session_history.parent_rating_key, session_history.grandparent_rating_key, \" \\\n+                        \"title, parent_title, grandparent_title, original_title, \" \\\n+                        \"thumb, parent_thumb, grandparent_thumb, media_index, parent_media_index, \" \\\n+                        \"year, originally_available_at, added_at, live, started, user, content_rating, labels, section_id \" \\\n+                        \"FROM session_history_metadata \" \\\n+                        \"JOIN session_history ON session_history_metadata.id = session_history.id \" \\\n+                        \"WHERE section_id = ? \" \\\n+                        \"GROUP BY session_history.rating_key \" \\\n+                        \"ORDER BY MAX(started) DESC LIMIT ?\"\n                 result = monitor_db.select(query, args=[section_id, limit])\n             else:\n                 result = []\n@@ -1085,8 +1085,8 @@ def get_sections(self):\n         monitor_db = database.MonitorDatabase()\n \n         try:\n-            query = 'SELECT section_id, section_name, section_type, agent ' \\\n-                    'FROM library_sections WHERE deleted_section = 0'\n+            query = \"SELECT section_id, section_name, section_type, agent \" \\\n+                    \"FROM library_sections WHERE deleted_section = 0\"\n             result = monitor_db.select(query=query)\n         except Exception as e:\n             logger.warn(\"Tautulli Libraries :: Unable to execute database query for get_sections: %s.\" % e)\n@@ -1110,8 +1110,8 @@ def delete(self, server_id=None, section_id=None, row_ids=None, purge_only=False\n             row_ids = list(map(helpers.cast_to_int, row_ids.split(',')))\n \n             # Get the section_ids corresponding to the row_ids\n-            result = monitor_db.select('SELECT server_id, section_id FROM library_sections '\n-                                       'WHERE id IN ({})'.format(','.join(['?'] * len(row_ids))), row_ids)\n+            result = monitor_db.select(\"SELECT server_id, section_id FROM library_sections \"\n+                                       \"WHERE id IN ({})\".format(\",\".join([\"?\"] * len(row_ids))), row_ids)\n \n             success = []\n             for library in result:\n@@ -1135,9 +1135,9 @@ def delete(self, server_id=None, section_id=None, row_ids=None, purge_only=False\n                 logger.info(\"Tautulli Libraries :: Deleting library with server_id %s and section_id %s from database.\"\n                             % (server_id, section_id))\n                 try:\n-                    monitor_db.action('UPDATE library_sections '\n-                                      'SET deleted_section = 1, keep_history = 0, do_notify = 0, do_notify_created = 0 '\n-                                      'WHERE server_id = ? AND section_id = ?', [server_id, section_id])\n+                    monitor_db.action(\"UPDATE library_sections \"\n+                                      \"SET deleted_section = 1, keep_history = 0, do_notify = 0, do_notify_created = 0 \"\n+                                      \"WHERE server_id = ? AND section_id = ?\", [server_id, section_id])\n                     return delete_success\n                 except Exception as e:\n                     logger.warn(\"Tautulli Libraries :: Unable to execute database query for delete: %s.\" % e)\n@@ -1150,26 +1150,26 @@ def undelete(self, section_id=None, section_name=None):\n \n         try:\n             if section_id and section_id.isdigit():\n-                query = 'SELECT * FROM library_sections WHERE section_id = ?'\n+                query = \"SELECT * FROM library_sections WHERE section_id = ?\"\n                 result = monitor_db.select(query=query, args=[section_id])\n                 if result:\n                     logger.info(\"Tautulli Libraries :: Re-adding library with id %s to database.\" % section_id)\n-                    monitor_db.action('UPDATE library_sections '\n-                                      'SET deleted_section = 0, keep_history = 1, do_notify = 1, do_notify_created = 1 '\n-                                      'WHERE section_id = ?',\n+                    monitor_db.action(\"UPDATE library_sections \"\n+                                      \"SET deleted_section = 0, keep_history = 1, do_notify = 1, do_notify_created = 1 \"\n+                                      \"WHERE section_id = ?\",\n                                       [section_id])\n                     return True\n                 else:\n                     return False\n \n             elif section_name:\n-                query = 'SELECT * FROM library_sections WHERE section_name = ?'\n+                query = \"SELECT * FROM library_sections WHERE section_name = ?\"\n                 result = monitor_db.select(query=query, args=[section_name])\n                 if result:\n                     logger.info(\"Tautulli Libraries :: Re-adding library with name %s to database.\" % section_name)\n-                    monitor_db.action('UPDATE library_sections '\n-                                      'SET deleted_section = 0, keep_history = 1, do_notify = 1, do_notify_created = 1 '\n-                                      'WHERE section_name = ?',\n+                    monitor_db.action(\"UPDATE library_sections \"\n+                                      \"SET deleted_section = 0, keep_history = 1, do_notify = 1, do_notify_created = 1 \"\n+                                      \"WHERE section_name = ?\",\n                                       [section_name])\n                     return True\n                 else:\n@@ -1203,7 +1203,7 @@ def delete_duplicate_libraries(self):\n \n         try:\n             logger.debug(\"Tautulli Libraries :: Deleting libraries where server_id does not match %s.\" % server_id)\n-            monitor_db.action('DELETE FROM library_sections WHERE server_id != ?', [server_id])\n+            monitor_db.action(\"DELETE FROM library_sections WHERE server_id != ?\", [server_id])\n \n             return 'Deleted duplicate libraries from the database.'\n         except Exception as e:"}, {"sha": "57734975d68fbdf31d2beb6bdb5825e791fac670", "filename": "plexpy/mobile_app.py", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Tautulli/Tautulli/blob/ea6c6078df410f333a060016dfce18c21ad134c9/plexpy%2Fmobile_app.py", "raw_url": "https://github.com/Tautulli/Tautulli/raw/ea6c6078df410f333a060016dfce18c21ad134c9/plexpy%2Fmobile_app.py", "contents_url": "https://api.github.com/repos/Tautulli/Tautulli/contents/plexpy%2Fmobile_app.py?ref=ea6c6078df410f333a060016dfce18c21ad134c9", "patch": "@@ -67,17 +67,17 @@ def get_mobile_devices(device_id=None, device_token=None):\n     args = []\n \n     if device_id or device_token:\n-        where = 'WHERE '\n+        where = \"WHERE \"\n         if device_id:\n-            where_id += 'device_id = ?'\n+            where_id += \"device_id = ?\"\n             args.append(device_id)\n         if device_token:\n-            where_token = 'device_token = ?'\n+            where_token = \"device_token = ?\"\n             args.append(device_token)\n-        where += ' AND '.join([w for w in [where_id, where_token] if w])\n+        where += \" AND \".join([w for w in [where_id, where_token] if w])\n \n     db = database.MonitorDatabase()\n-    result = db.select('SELECT * FROM mobile_devices %s' % where, args=args)\n+    result = db.select(\"SELECT * FROM mobile_devices %s\" % where, args=args)\n \n     return result\n \n@@ -128,7 +128,7 @@ def get_mobile_device_config(mobile_device_id=None):\n         return None\n \n     db = database.MonitorDatabase()\n-    result = db.select_single('SELECT * FROM mobile_devices WHERE id = ?',\n+    result = db.select_single(\"SELECT * FROM mobile_devices WHERE id = ?\",\n                               args=[mobile_device_id])\n \n     if result['onesignal_id'] == _ONESIGNAL_DISABLED:\n@@ -163,11 +163,11 @@ def delete_mobile_device(mobile_device_id=None, device_id=None):\n \n     if mobile_device_id:\n         logger.debug(\"Tautulli MobileApp :: Deleting mobile_device_id %s from the database.\" % mobile_device_id)\n-        result = db.action('DELETE FROM mobile_devices WHERE id = ?', args=[mobile_device_id])\n+        result = db.action(\"DELETE FROM mobile_devices WHERE id = ?\", args=[mobile_device_id])\n         return True\n     elif device_id:\n         logger.debug(\"Tautulli MobileApp :: Deleting device_id %s from the database.\" % device_id)\n-        result = db.action('DELETE FROM mobile_devices WHERE device_id = ?', args=[device_id])\n+        result = db.action(\"DELETE FROM mobile_devices WHERE device_id = ?\", args=[device_id])\n         return True\n     else:\n         return False\n@@ -179,9 +179,9 @@ def set_official(device_id, onesignal_id):\n     platform = 'android' if official > 0 else None\n \n     try:\n-        result = db.action('UPDATE mobile_devices '\n-                           'SET official = ?, platform = coalesce(platform, ?) '\n-                           'WHERE device_id = ?',\n+        result = db.action(\"UPDATE mobile_devices \"\n+                           \"SET official = ?, platform = coalesce(platform, ?) \"\n+                           \"WHERE device_id = ?\",\n                            args=[official, platform, device_id])\n     except Exception as e:\n         logger.warn(\"Tautulli MobileApp :: Failed to set official flag for device: %s.\" % e)\n@@ -193,7 +193,7 @@ def set_last_seen(device_token=None):\n     last_seen = helpers.timestamp()\n \n     try:\n-        result = db.action('UPDATE mobile_devices SET last_seen = ? WHERE device_token = ?',\n+        result = db.action(\"UPDATE mobile_devices SET last_seen = ? WHERE device_token = ?\",\n                            args=[last_seen, device_token])\n     except Exception as e:\n         logger.warn(\"Tautulli MobileApp :: Failed to set last_seen time for device: %s.\" % e)"}, {"sha": "471a5984705fbf974d51ea2feafa0c9824373c51", "filename": "plexpy/newsletter_handler.py", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Tautulli/Tautulli/blob/ea6c6078df410f333a060016dfce18c21ad134c9/plexpy%2Fnewsletter_handler.py", "raw_url": "https://github.com/Tautulli/Tautulli/raw/ea6c6078df410f333a060016dfce18c21ad134c9/plexpy%2Fnewsletter_handler.py", "contents_url": "https://api.github.com/repos/Tautulli/Tautulli/contents/plexpy%2Fnewsletter_handler.py?ref=ea6c6078df410f333a060016dfce18c21ad134c9", "patch": "@@ -181,9 +181,9 @@ def set_notify_success(newsletter_log_id):\n def get_last_newsletter_email_msg_id(newsletter_id, notify_action):\n     db = database.MonitorDatabase()\n \n-    result = db.select_single('SELECT email_msg_id FROM newsletter_log '\n-                              'WHERE newsletter_id = ? AND notify_action = ? AND success = 1 '\n-                              'ORDER BY timestamp DESC LIMIT 1', [newsletter_id, notify_action])\n+    result = db.select_single(\"SELECT email_msg_id FROM newsletter_log \"\n+                              \"WHERE newsletter_id = ? AND notify_action = ? AND success = 1 \"\n+                              \"ORDER BY timestamp DESC LIMIT 1\", [newsletter_id, notify_action])\n \n     if result:\n         return result['email_msg_id']\n@@ -193,13 +193,13 @@ def get_newsletter(newsletter_uuid=None, newsletter_id_name=None):\n     db = database.MonitorDatabase()\n \n     if newsletter_uuid:\n-        result = db.select_single('SELECT start_date, end_date, uuid, filename FROM newsletter_log '\n-                                  'WHERE uuid = ?', [newsletter_uuid])\n+        result = db.select_single(\"SELECT start_date, end_date, uuid, filename FROM newsletter_log \"\n+                                  \"WHERE uuid = ?\", [newsletter_uuid])\n     elif newsletter_id_name:\n-        result = db.select_single('SELECT start_date, end_date, uuid, filename FROM newsletter_log '\n-                                  'JOIN newsletters ON newsletters.id = newsletter_log.newsletter_id '\n-                                  'WHERE id_name = ? AND notify_action != \"test\" '\n-                                  'ORDER BY timestamp DESC LIMIT 1', [newsletter_id_name])\n+        result = db.select_single(\"SELECT start_date, end_date, uuid, filename FROM newsletter_log \"\n+                                  \"JOIN newsletters ON newsletters.id = newsletter_log.newsletter_id \"\n+                                  \"WHERE id_name = ? AND notify_action != 'test' \"\n+                                  \"ORDER BY timestamp DESC LIMIT 1\", [newsletter_id_name])\n     else:\n         result = None\n "}, {"sha": "94f73c8fe9f5e0fa55417d6c26698233eb2e4ec6", "filename": "plexpy/newsletters.py", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Tautulli/Tautulli/blob/ea6c6078df410f333a060016dfce18c21ad134c9/plexpy%2Fnewsletters.py", "raw_url": "https://github.com/Tautulli/Tautulli/raw/ea6c6078df410f333a060016dfce18c21ad134c9/plexpy%2Fnewsletters.py", "contents_url": "https://api.github.com/repos/Tautulli/Tautulli/contents/plexpy%2Fnewsletters.py?ref=ea6c6078df410f333a060016dfce18c21ad134c9", "patch": "@@ -117,15 +117,15 @@ def get_newsletters(newsletter_id=None):\n     args = []\n \n     if newsletter_id:\n-        where = 'WHERE '\n+        where = \"WHERE \"\n         if newsletter_id:\n-            where_id += 'id = ?'\n+            where_id += \"id = ?\"\n             args.append(newsletter_id)\n-        where += ' AND '.join([w for w in [where_id] if w])\n+        where += \" AND \".join([w for w in [where_id] if w])\n \n     db = database.MonitorDatabase()\n-    result = db.select('SELECT id, agent_id, agent_name, agent_label, '\n-                       'friendly_name, cron, active FROM newsletters %s' % where, args=args)\n+    result = db.select(\"SELECT id, agent_id, agent_name, agent_label, \"\n+                       \"friendly_name, cron, active FROM newsletters %s\" % where, args=args)\n \n     return result\n \n@@ -136,7 +136,7 @@ def delete_newsletter(newsletter_id=None):\n     if str(newsletter_id).isdigit():\n         logger.debug(\"Tautulli Newsletters :: Deleting newsletter_id %s from the database.\"\n                      % newsletter_id)\n-        result = db.action('DELETE FROM newsletters WHERE id = ?', args=[newsletter_id])\n+        result = db.action(\"DELETE FROM newsletters WHERE id = ?\", args=[newsletter_id])\n         return True\n     else:\n         return False\n@@ -151,7 +151,7 @@ def get_newsletter_config(newsletter_id=None, mask_passwords=False):\n         return None\n \n     db = database.MonitorDatabase()\n-    result = db.select_single('SELECT * FROM newsletters WHERE id = ?', args=[newsletter_id])\n+    result = db.select_single(\"SELECT * FROM newsletters WHERE id = ?\", args=[newsletter_id])\n \n     if not result:\n         return None\n@@ -309,7 +309,7 @@ def send_newsletter(newsletter_id=None, subject=None, body=None, message=None, n\n \n def blacklist_logger():\n     db = database.MonitorDatabase()\n-    notifiers = db.select('SELECT newsletter_config, email_config FROM newsletters')\n+    notifiers = db.select(\"SELECT newsletter_config, email_config FROM newsletters\")\n \n     for n in notifiers:\n         config = json.loads(n['newsletter_config'] or '{}')\n@@ -346,7 +346,7 @@ def generate_newsletter_uuid():\n     while not uuid or uuid_exists:\n         uuid = plexpy.generate_uuid()[:8]\n         result = db.select_single(\n-            'SELECT EXISTS(SELECT uuid FROM newsletter_log WHERE uuid = ?) as uuid_exists', [uuid])\n+            \"SELECT EXISTS(SELECT uuid FROM newsletter_log WHERE uuid = ?) as uuid_exists\", [uuid])\n         uuid_exists = result['uuid_exists']\n \n     return uuid"}, {"sha": "7dd816279dd86043c2284d4a266d7eb65053302f", "filename": "plexpy/notification_handler.py", "status": "modified", "additions": 43, "deletions": 37, "changes": 80, "blob_url": "https://github.com/Tautulli/Tautulli/blob/ea6c6078df410f333a060016dfce18c21ad134c9/plexpy%2Fnotification_handler.py", "raw_url": "https://github.com/Tautulli/Tautulli/raw/ea6c6078df410f333a060016dfce18c21ad134c9/plexpy%2Fnotification_handler.py", "contents_url": "https://api.github.com/repos/Tautulli/Tautulli/contents/plexpy%2Fnotification_handler.py?ref=ea6c6078df410f333a060016dfce18c21ad134c9", "patch": "@@ -438,17 +438,17 @@ def notify(notifier_id=None, notify_action=None, stream_data=None, timeline_data\n \n     if success:\n         set_notify_success(notification_id)\n-        return True\n+        return notification_id\n \n \n def get_notify_state(session):\n     monitor_db = database.MonitorDatabase()\n-    result = monitor_db.select('SELECT timestamp, notify_action, notifier_id '\n-                               'FROM notify_log '\n-                               'WHERE session_key = ? '\n-                               'AND rating_key = ? '\n-                               'AND user_id = ? '\n-                               'ORDER BY id DESC',\n+    result = monitor_db.select(\"SELECT timestamp, notify_action, notifier_id \"\n+                               \"FROM notify_log \"\n+                               \"WHERE session_key = ? \"\n+                               \"AND rating_key = ? \"\n+                               \"AND user_id = ? \"\n+                               \"ORDER BY id DESC\",\n                                args=[session['session_key'], session['rating_key'], session['user_id']])\n     notify_states = []\n     for item in result:\n@@ -467,16 +467,16 @@ def get_notify_state_enabled(session, notify_action, notified=True):\n         timestamp_where = 'AND timestamp IS NULL'\n \n     monitor_db = database.MonitorDatabase()\n-    result = monitor_db.select('SELECT id AS notifier_id, timestamp '\n-                               'FROM notifiers '\n-                               'LEFT OUTER JOIN ('\n-                               'SELECT timestamp, notifier_id '\n-                               'FROM notify_log '\n-                               'WHERE session_key = ? '\n-                               'AND rating_key = ? '\n-                               'AND user_id = ? '\n-                               'AND notify_action = ?) AS t ON notifiers.id = t.notifier_id '\n-                               'WHERE %s = 1 %s' % (notify_action, timestamp_where),\n+    result = monitor_db.select(\"SELECT id AS notifier_id, timestamp \"\n+                               \"FROM notifiers \"\n+                               \"LEFT OUTER JOIN (\"\n+                               \"SELECT timestamp, notifier_id \"\n+                               \"FROM notify_log \"\n+                               \"WHERE session_key = ? \"\n+                               \"AND rating_key = ? \"\n+                               \"AND user_id = ? \"\n+                               \"AND notify_action = ?) AS t ON notifiers.id = t.notifier_id \"\n+                               \"WHERE %s = 1 %s\" % (notify_action, timestamp_where),\n                                args=[session['session_key'], session['rating_key'], session['user_id'], notify_action])\n \n     return result\n@@ -528,8 +528,8 @@ def set_notify_success(notification_id):\n \n def check_nofity_tag(notify_action, tag):\n     monitor_db = database.MonitorDatabase()\n-    result = monitor_db.select_single('SELECT * FROM notify_log '\n-                                      'WHERE notify_action = ? AND tag = ?',\n+    result = monitor_db.select_single(\"SELECT * FROM notify_log \"\n+                                      \"WHERE notify_action = ? AND tag = ?\",\n                                       [notify_action, tag])\n     return bool(result)\n \n@@ -550,7 +550,13 @@ def build_media_notify_params(notify_action=None, session=None, timeline=None, m\n     if session:\n         # Reload json from raw stream info\n         if session.get('raw_stream_info'):\n-            session.update(json.loads(session['raw_stream_info']))\n+            raw_stream_info = json.loads(session['raw_stream_info'])\n+            # Don't overwrite id, session_key, stopped, view_offset\n+            raw_stream_info.pop('id', None)\n+            raw_stream_info.pop('session_key', None)\n+            raw_stream_info.pop('stopped', None)\n+            raw_stream_info.pop('view_offset', None)\n+            session.update(raw_stream_info)\n         notify_params.update(session)\n \n     if timeline:\n@@ -638,13 +644,13 @@ def build_media_notify_params(notify_action=None, session=None, timeline=None, m\n         stream_duration_sec = 0\n         stream_duration = 0\n \n-    view_offset_sec = helpers.convert_milliseconds_to_seconds(session.get('view_offset', 0))\n+    progress_duration_sec = helpers.convert_milliseconds_to_seconds(session.get('view_offset', 0))\n     duration_sec = helpers.convert_milliseconds_to_seconds(notify_params['duration'])\n-    remaining_duration_sec = duration_sec - view_offset_sec\n+    remaining_duration_sec = duration_sec - progress_duration_sec\n \n-    view_offset = helpers.seconds_to_minutes(view_offset_sec)\n+    progress_duration = helpers.seconds_to_minutes(progress_duration_sec)\n     duration = helpers.seconds_to_minutes(duration_sec)\n-    remaining_duration = duration - view_offset\n+    remaining_duration = duration - progress_duration\n \n     # Build Plex URL\n     if notify_params['media_type'] == 'track':\n@@ -1005,10 +1011,10 @@ def build_media_notify_params(notify_action=None, session=None, timeline=None, m\n         'remaining_duration': remaining_duration,\n         'remaining_duration_sec': remaining_duration_sec,\n         'remaining_time': arrow.get(remaining_duration_sec).format(duration_format),\n-        'progress_duration': view_offset,\n-        'progress_duration_sec': view_offset_sec,\n-        'progress_time': arrow.get(view_offset_sec).format(duration_format),\n-        'progress_percent': helpers.get_percent(view_offset_sec, duration_sec),\n+        'progress_duration': progress_duration,\n+        'progress_duration_sec': progress_duration_sec,\n+        'progress_time': arrow.get(progress_duration_sec).format(duration_format),\n+        'progress_percent': helpers.get_percent(progress_duration_sec, duration_sec),\n         'view_offset': session.get('view_offset', 0),\n         'initial_stream': notify_params['initial_stream'],\n         'transcode_decision': transcode_decision,\n@@ -1625,7 +1631,7 @@ def set_hash_image_info(img=None, rating_key=None, width=750, height=1000,\n \n def get_hash_image_info(img_hash=None):\n     db = database.MonitorDatabase()\n-    query = 'SELECT * FROM image_hash_lookup WHERE img_hash = ?'\n+    query = \"SELECT * FROM image_hash_lookup WHERE img_hash = ?\"\n     result = db.select_single(query, args=[img_hash])\n     return result\n \n@@ -1634,8 +1640,8 @@ def lookup_tvmaze_by_id(rating_key=None, thetvdb_id=None, imdb_id=None, title=No\n     db = database.MonitorDatabase()\n \n     try:\n-        query = 'SELECT imdb_id, tvmaze_id, tvmaze_url FROM tvmaze_lookup ' \\\n-                'WHERE rating_key = ?'\n+        query = \"SELECT imdb_id, tvmaze_id, tvmaze_url FROM tvmaze_lookup \" \\\n+                \"WHERE rating_key = ?\"\n         tvmaze_info = db.select_single(query, args=[rating_key])\n     except Exception as e:\n         logger.warn(\"Tautulli NotificationHandler :: Unable to execute database query for lookup_tvmaze_by_tvdb_id: %s.\" % e)\n@@ -1694,8 +1700,8 @@ def lookup_themoviedb_by_id(rating_key=None, thetvdb_id=None, imdb_id=None, titl\n     db = database.MonitorDatabase()\n \n     try:\n-        query = 'SELECT thetvdb_id, imdb_id, themoviedb_id, themoviedb_url FROM themoviedb_lookup ' \\\n-                'WHERE rating_key = ?'\n+        query = \"SELECT thetvdb_id, imdb_id, themoviedb_id, themoviedb_url FROM themoviedb_lookup \" \\\n+                \"WHERE rating_key = ?\"\n         themoviedb_info = db.select_single(query, args=[rating_key])\n     except Exception as e:\n         logger.warn(\"Tautulli NotificationHandler :: Unable to execute database query for lookup_themoviedb_by_imdb_id: %s.\" % e)\n@@ -1772,8 +1778,8 @@ def get_themoviedb_info(rating_key=None, media_type=None, themoviedb_id=None):\n     db = database.MonitorDatabase()\n \n     try:\n-        query = 'SELECT themoviedb_json FROM themoviedb_lookup ' \\\n-                'WHERE rating_key = ?'\n+        query = \"SELECT themoviedb_json FROM themoviedb_lookup \" \\\n+                \"WHERE rating_key = ?\"\n         result = db.select_single(query, args=[rating_key])\n     except Exception as e:\n         logger.warn(\"Tautulli NotificationHandler :: Unable to execute database query for get_themoviedb_info: %s.\" % e)\n@@ -1823,8 +1829,8 @@ def lookup_musicbrainz_info(musicbrainz_type=None, rating_key=None, artist=None,\n     db = database.MonitorDatabase()\n \n     try:\n-        query = 'SELECT musicbrainz_id, musicbrainz_url, musicbrainz_type FROM musicbrainz_lookup ' \\\n-                'WHERE rating_key = ?'\n+        query = \"SELECT musicbrainz_id, musicbrainz_url, musicbrainz_type FROM musicbrainz_lookup \" \\\n+                \"WHERE rating_key = ?\"\n         musicbrainz_info = db.select_single(query, args=[rating_key])\n     except Exception as e:\n         logger.warn(\"Tautulli NotificationHandler :: Unable to execute database query for lookup_musicbrainz: %s.\" % e)"}, {"sha": "a2fa634175c62c9f290438005259cde182be10a3", "filename": "plexpy/notifiers.py", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Tautulli/Tautulli/blob/ea6c6078df410f333a060016dfce18c21ad134c9/plexpy%2Fnotifiers.py", "raw_url": "https://github.com/Tautulli/Tautulli/raw/ea6c6078df410f333a060016dfce18c21ad134c9/plexpy%2Fnotifiers.py", "contents_url": "https://api.github.com/repos/Tautulli/Tautulli/contents/plexpy%2Fnotifiers.py?ref=ea6c6078df410f333a060016dfce18c21ad134c9", "patch": "@@ -507,7 +507,7 @@ def get_notifiers(notifier_id=None, notify_action=None):\n         where += ' AND '.join([w for w in [where_id, where_action] if w])\n \n     db = database.MonitorDatabase()\n-    result = db.select('SELECT id, agent_id, agent_name, agent_label, friendly_name, %s FROM notifiers %s'\n+    result = db.select(\"SELECT id, agent_id, agent_name, agent_label, friendly_name, %s FROM notifiers %s\"\n                        % (', '.join(notify_actions), where), args=args)\n \n     for item in result:\n@@ -522,7 +522,7 @@ def delete_notifier(notifier_id=None):\n     if str(notifier_id).isdigit():\n         logger.debug(\"Tautulli Notifiers :: Deleting notifier_id %s from the database.\"\n                      % notifier_id)\n-        result = db.action('DELETE FROM notifiers WHERE id = ?', args=[notifier_id])\n+        result = db.action(\"DELETE FROM notifiers WHERE id = ?\", args=[notifier_id])\n         return True\n     else:\n         return False\n@@ -537,7 +537,7 @@ def get_notifier_config(notifier_id=None, mask_passwords=False):\n         return None\n \n     db = database.MonitorDatabase()\n-    result = db.select_single('SELECT * FROM notifiers WHERE id = ?', args=[notifier_id])\n+    result = db.select_single(\"SELECT * FROM notifiers WHERE id = ?\", args=[notifier_id])\n \n     if not result:\n         return None\n@@ -3866,8 +3866,8 @@ def get_devices(self):\n         db = database.MonitorDatabase()\n \n         try:\n-            query = 'SELECT * FROM mobile_devices WHERE official = 1 ' \\\n-                    'AND onesignal_id IS NOT NULL AND onesignal_id != \"\"'\n+            query = \"SELECT * FROM mobile_devices WHERE official = 1 \" \\\n+                    \"AND onesignal_id IS NOT NULL AND onesignal_id != ''\"\n             return db.select(query=query)\n         except Exception as e:\n             logger.warn(\"Tautulli Notifiers :: Unable to retrieve Tautulli Remote app devices list: %s.\" % e)\n@@ -4472,8 +4472,8 @@ def check_browser_enabled():\n \n def get_browser_notifications():\n     db = database.MonitorDatabase()\n-    result = db.select('SELECT notifier_id, subject_text, body_text FROM notify_log '\n-                       'WHERE agent_id = 17 AND timestamp >= ? ',\n+    result = db.select(\"SELECT notifier_id, subject_text, body_text FROM notify_log \"\n+                       \"WHERE agent_id = 17 AND timestamp >= ? \",\n                        args=[time.time() - 5])\n \n     notifications = []"}, {"sha": "644782a23897cbbe6b76a2924666c100b11a7ee5", "filename": "plexpy/plexivity_import.py", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/Tautulli/Tautulli/blob/ea6c6078df410f333a060016dfce18c21ad134c9/plexpy%2Fplexivity_import.py", "raw_url": "https://github.com/Tautulli/Tautulli/raw/ea6c6078df410f333a060016dfce18c21ad134c9/plexpy%2Fplexivity_import.py", "contents_url": "https://api.github.com/repos/Tautulli/Tautulli/contents/plexpy%2Fplexivity_import.py?ref=ea6c6078df410f333a060016dfce18c21ad134c9", "patch": "@@ -304,27 +304,27 @@ def import_from_plexivity(database_file=None, table_name=None, import_ignore_int\n         logger.debug(\"Tautulli Importer :: Unable to refresh the users list. Aborting import.\")\n         return None\n \n-    query = 'SELECT id AS id, ' \\\n-            'time AS started, ' \\\n-            'stopped, ' \\\n-            'null AS user_id, ' \\\n-            'user, ' \\\n-            'ip_address, ' \\\n-            'paused_counter, ' \\\n-            'platform AS player, ' \\\n-            'null AS platform, ' \\\n-            'null as machine_id, ' \\\n-            'null AS media_type, ' \\\n-            'null AS view_offset, ' \\\n-            'xml, ' \\\n-            'rating as content_rating,' \\\n-            'summary,' \\\n-            'title AS full_title,' \\\n-            '(case when orig_title_ep = \"n/a\" then orig_title else ' \\\n-            'orig_title_ep end) as title,' \\\n-            '(case when orig_title_ep != \"n/a\" then orig_title else ' \\\n-            'null end) as grandparent_title ' \\\n-            'FROM ' + table_name + ' ORDER BY id'\n+    query = \"SELECT id AS id, \" \\\n+            \"time AS started, \" \\\n+            \"stopped, \" \\\n+            \"null AS user_id, \" \\\n+            \"user, \" \\\n+            \"ip_address, \" \\\n+            \"paused_counter, \" \\\n+            \"platform AS player, \" \\\n+            \"null AS platform, \" \\\n+            \"null as machine_id, \" \\\n+            \"null AS media_type, \" \\\n+            \"null AS view_offset, \" \\\n+            \"xml, \" \\\n+            \"rating as content_rating,\" \\\n+            \"summary,\" \\\n+            \"title AS full_title,\" \\\n+            \"(case when orig_title_ep = 'n/a' then orig_title else \" \\\n+            \"orig_title_ep end) as title,\" \\\n+            \"(case when orig_title_ep != 'n/a' then orig_title else \" \\\n+            \"null end) as grandparent_title \" \\\n+            \"FROM \" + table_name + \" ORDER BY id\"\n \n     result = connection.execute(query)\n \n@@ -456,9 +456,9 @@ def import_users():\n     logger.debug(\"Tautulli Importer :: Importing Plexivity Users...\")\n     monitor_db = database.MonitorDatabase()\n \n-    query = 'INSERT OR IGNORE INTO users (user_id, username) ' \\\n-            'SELECT user_id, user ' \\\n-            'FROM session_history WHERE user_id != 1 GROUP BY user_id'\n+    query = \"INSERT OR IGNORE INTO users (user_id, username) \" \\\n+            \"SELECT user_id, user \" \\\n+            \"FROM session_history WHERE user_id != 1 GROUP BY user_id\"\n \n     try:\n         monitor_db.action(query)"}, {"sha": "4d8ec80bad5c3a244e44fc3cd06f8bf6ed45c511", "filename": "plexpy/plexwatch_import.py", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/Tautulli/Tautulli/blob/ea6c6078df410f333a060016dfce18c21ad134c9/plexpy%2Fplexwatch_import.py", "raw_url": "https://github.com/Tautulli/Tautulli/raw/ea6c6078df410f333a060016dfce18c21ad134c9/plexpy%2Fplexwatch_import.py", "contents_url": "https://api.github.com/repos/Tautulli/Tautulli/contents/plexpy%2Fplexwatch_import.py?ref=ea6c6078df410f333a060016dfce18c21ad134c9", "patch": "@@ -295,29 +295,29 @@ def import_from_plexwatch(database_file=None, table_name=None, import_ignore_int\n         logger.debug(\"Tautulli Importer :: Unable to refresh the users list. Aborting import.\")\n         return None\n \n-    query = 'SELECT time AS started, ' \\\n-            'stopped, ' \\\n-            'cast(ratingKey as text) AS rating_key, ' \\\n-            'null AS user_id, ' \\\n-            'user, ' \\\n-            'ip_address, ' \\\n-            'paused_counter, ' \\\n-            'platform AS player, ' \\\n-            'null AS platform, ' \\\n-            'null as machine_id, ' \\\n-            'parentRatingKey as parent_rating_key, ' \\\n-            'grandparentRatingKey as grandparent_rating_key, ' \\\n-            'null AS media_type, ' \\\n-            'null AS view_offset, ' \\\n-            'xml, ' \\\n-            'rating as content_rating,' \\\n-            'summary,' \\\n-            'title AS full_title,' \\\n-            '(case when orig_title_ep = \"\" then orig_title else ' \\\n-            'orig_title_ep end) as title,' \\\n-            '(case when orig_title_ep != \"\" then orig_title else ' \\\n-            'null end) as grandparent_title ' \\\n-            'FROM ' + table_name + ' ORDER BY id'\n+    query = \"SELECT time AS started, \" \\\n+            \"stopped, \" \\\n+            \"cast(ratingKey as text) AS rating_key, \" \\\n+            \"null AS user_id, \" \\\n+            \"user, \" \\\n+            \"ip_address, \" \\\n+            \"paused_counter, \" \\\n+            \"platform AS player, \" \\\n+            \"null AS platform, \" \\\n+            \"null as machine_id, \" \\\n+            \"parentRatingKey as parent_rating_key, \" \\\n+            \"grandparentRatingKey as grandparent_rating_key, \" \\\n+            \"null AS media_type, \" \\\n+            \"null AS view_offset, \" \\\n+            \"xml, \" \\\n+            \"rating as content_rating,\" \\\n+            \"summary,\" \\\n+            \"title AS full_title,\" \\\n+            \"(case when orig_title_ep = '' then orig_title else \" \\\n+            \"orig_title_ep end) as title,\" \\\n+            \"(case when orig_title_ep != '' then orig_title else \" \\\n+            \"null end) as grandparent_title \" \\\n+            \"FROM \" + table_name + \" ORDER BY id\"\n \n     result = connection.execute(query)\n \n@@ -450,9 +450,9 @@ def import_users():\n     logger.debug(\"Tautulli Importer :: Importing PlexWatch Users...\")\n     monitor_db = database.MonitorDatabase()\n \n-    query = 'INSERT OR IGNORE INTO users (user_id, username) ' \\\n-            'SELECT user_id, user ' \\\n-            'FROM session_history WHERE user_id != 1 GROUP BY user_id'\n+    query = \"INSERT OR IGNORE INTO users (user_id, username) \" \\\n+            \"SELECT user_id, user \" \\\n+            \"FROM session_history WHERE user_id != 1 GROUP BY user_id\"\n \n     try:\n         monitor_db.action(query)"}, {"sha": "0e201791889178e7d922cf2b8bb1c7a478720bba", "filename": "plexpy/users.py", "status": "modified", "additions": 156, "deletions": 156, "changes": 312, "blob_url": "https://github.com/Tautulli/Tautulli/blob/ea6c6078df410f333a060016dfce18c21ad134c9/plexpy%2Fusers.py", "raw_url": "https://github.com/Tautulli/Tautulli/raw/ea6c6078df410f333a060016dfce18c21ad134c9/plexpy%2Fusers.py", "contents_url": "https://api.github.com/repos/Tautulli/Tautulli/contents/plexpy%2Fusers.py?ref=ea6c6078df410f333a060016dfce18c21ad134c9", "patch": "@@ -75,8 +75,8 @@ def refresh_users():\n \n             # Check if we've set a custom avatar if so don't overwrite it.\n             if keys_dict['user_id']:\n-                avatar_urls = monitor_db.select('SELECT thumb, custom_avatar_url '\n-                                                'FROM users WHERE user_id = ?',\n+                avatar_urls = monitor_db.select(\"SELECT thumb, custom_avatar_url \"\n+                                                \"FROM users WHERE user_id = ?\",\n                                                 [keys_dict['user_id']])\n                 if avatar_urls:\n                     if not avatar_urls[0]['custom_avatar_url'] or \\\n@@ -98,7 +98,7 @@ def refresh_users():\n             if result == 'insert':\n                 new_users.append(item['username'])\n \n-        query = 'UPDATE users SET is_active = 0 WHERE user_id NOT IN ({})'.format(', '.join(['?'] * len(user_ids)))\n+        query = \"UPDATE users SET is_active = 0 WHERE user_id NOT IN ({})\".format(\", \".join([\"?\"] * len(user_ids)))\n         monitor_db.action(query=query, args=user_ids)\n \n         # Add new users to loger username filter\n@@ -137,43 +137,43 @@ def get_datatables_list(self, kwargs=None, grouping=None):\n \n         group_by = 'session_history.reference_id' if grouping else 'session_history.id'\n \n-        columns = ['users.id AS row_id',\n-                   'users.user_id',\n-                   'users.username',\n-                   '(CASE WHEN users.friendly_name IS NULL OR TRIM(users.friendly_name) = \"\" \\\n-                    THEN users.username ELSE users.friendly_name END) AS friendly_name',\n-                   'users.title',\n-                   'users.email',\n-                   'users.thumb AS user_thumb',\n-                   'users.custom_avatar_url AS custom_thumb',\n-                   'COUNT(DISTINCT %s) AS plays' % group_by,\n-                   'SUM(CASE WHEN session_history.stopped > 0 THEN (session_history.stopped - session_history.started) \\\n+        columns = [\"users.id AS row_id\",\n+                   \"users.user_id\",\n+                   \"users.username\",\n+                   \"(CASE WHEN users.friendly_name IS NULL OR TRIM(users.friendly_name) = '' \\\n+                    THEN users.username ELSE users.friendly_name END) AS friendly_name\",\n+                   \"users.title\",\n+                   \"users.email\",\n+                   \"users.thumb AS user_thumb\",\n+                   \"users.custom_avatar_url AS custom_thumb\",\n+                   \"COUNT(DISTINCT %s) AS plays\" % group_by,\n+                   \"SUM(CASE WHEN session_history.stopped > 0 THEN (session_history.stopped - session_history.started) \\\n                     ELSE 0 END) - SUM(CASE WHEN session_history.paused_counter IS NULL THEN 0 ELSE \\\n-                    session_history.paused_counter END) AS duration',\n-                   'MAX(session_history.started) AS last_seen',\n-                   'MAX(session_history.id) AS history_row_id',\n-                   'session_history_metadata.full_title AS last_played',\n-                   'session_history.ip_address',\n-                   'session_history.platform',\n-                   'session_history.player',\n-                   'session_history.rating_key',\n-                   'session_history_metadata.media_type',\n-                   'session_history_metadata.thumb',\n-                   'session_history_metadata.parent_thumb',\n-                   'session_history_metadata.grandparent_thumb',\n-                   'session_history_metadata.parent_title',\n-                   'session_history_metadata.year',\n-                   'session_history_metadata.media_index',\n-                   'session_history_metadata.parent_media_index',\n-                   'session_history_metadata.live',\n-                   'session_history_metadata.added_at',\n-                   'session_history_metadata.originally_available_at',\n-                   'session_history_metadata.guid',\n-                   'session_history_media_info.transcode_decision',\n-                   'users.do_notify AS do_notify',\n-                   'users.keep_history AS keep_history',\n-                   'users.allow_guest AS allow_guest',\n-                   'users.is_active AS is_active'\n+                    session_history.paused_counter END) AS duration\",\n+                   \"MAX(session_history.started) AS last_seen\",\n+                   \"MAX(session_history.id) AS history_row_id\",\n+                   \"session_history_metadata.full_title AS last_played\",\n+                   \"session_history.ip_address\",\n+                   \"session_history.platform\",\n+                   \"session_history.player\",\n+                   \"session_history.rating_key\",\n+                   \"session_history_metadata.media_type\",\n+                   \"session_history_metadata.thumb\",\n+                   \"session_history_metadata.parent_thumb\",\n+                   \"session_history_metadata.grandparent_thumb\",\n+                   \"session_history_metadata.parent_title\",\n+                   \"session_history_metadata.year\",\n+                   \"session_history_metadata.media_index\",\n+                   \"session_history_metadata.parent_media_index\",\n+                   \"session_history_metadata.live\",\n+                   \"session_history_metadata.added_at\",\n+                   \"session_history_metadata.originally_available_at\",\n+                   \"session_history_metadata.guid\",\n+                   \"session_history_media_info.transcode_decision\",\n+                   \"users.do_notify AS do_notify\",\n+                   \"users.keep_history AS keep_history\",\n+                   \"users.allow_guest AS allow_guest\",\n+                   \"users.is_active AS is_active\"\n                    ]\n         try:\n             query = data_tables.ssp_query(table_name='users',\n@@ -270,32 +270,32 @@ def get_datatables_unique_ips(self, user_id=None, kwargs=None):\n \n         custom_where = ['users.user_id', user_id]\n \n-        columns = ['session_history.id AS history_row_id',\n-                   'MIN(session_history.started) AS first_seen',\n-                   'MAX(session_history.started) AS last_seen',\n-                   'session_history.ip_address',\n-                   'COUNT(session_history.id) AS play_count',\n-                   'session_history.platform',\n-                   'session_history.player',\n-                   'session_history.rating_key',\n-                   'session_history_metadata.full_title AS last_played',\n-                   'session_history_metadata.thumb',\n-                   'session_history_metadata.parent_thumb',\n-                   'session_history_metadata.grandparent_thumb',\n-                   'session_history_metadata.media_type',\n-                   'session_history_metadata.parent_title',\n-                   'session_history_metadata.year',\n-                   'session_history_metadata.media_index',\n-                   'session_history_metadata.parent_media_index',\n-                   'session_history_metadata.live',\n-                   'session_history_metadata.added_at',\n-                   'session_history_metadata.originally_available_at',\n-                   'session_history_metadata.guid',\n-                   'session_history_media_info.transcode_decision',\n-                   'session_history.user',\n-                   'session_history.user_id as custom_user_id',\n-                   '(CASE WHEN users.friendly_name IS NULL OR TRIM(users.friendly_name) = \"\" \\\n-                    THEN users.username ELSE users.friendly_name END) AS friendly_name'\n+        columns = [\"session_history.id AS history_row_id\",\n+                   \"MIN(session_history.started) AS first_seen\",\n+                   \"MAX(session_history.started) AS last_seen\",\n+                   \"session_history.ip_address\",\n+                   \"COUNT(session_history.id) AS play_count\",\n+                   \"session_history.platform\",\n+                   \"session_history.player\",\n+                   \"session_history.rating_key\",\n+                   \"session_history_metadata.full_title AS last_played\",\n+                   \"session_history_metadata.thumb\",\n+                   \"session_history_metadata.parent_thumb\",\n+                   \"session_history_metadata.grandparent_thumb\",\n+                   \"session_history_metadata.media_type\",\n+                   \"session_history_metadata.parent_title\",\n+                   \"session_history_metadata.year\",\n+                   \"session_history_metadata.media_index\",\n+                   \"session_history_metadata.parent_media_index\",\n+                   \"session_history_metadata.live\",\n+                   \"session_history_metadata.added_at\",\n+                   \"session_history_metadata.originally_available_at\",\n+                   \"session_history_metadata.guid\",\n+                   \"session_history_media_info.transcode_decision\",\n+                   \"session_history.user\",\n+                   \"session_history.user_id as custom_user_id\",\n+                   \"(CASE WHEN users.friendly_name IS NULL OR TRIM(users.friendly_name) = '' \\\n+                    THEN users.username ELSE users.friendly_name END) AS friendly_name\"\n                    ]\n \n         try:\n@@ -436,31 +436,31 @@ def get_user_details(self, user_id=None, user=None, email=None, include_last_see\n         last_seen = 'NULL'\n         join = ''\n         if include_last_seen:\n-            last_seen = 'MAX(session_history.started)'\n-            join = 'LEFT OUTER JOIN session_history ON users.user_id = session_history.user_id'\n+            last_seen = \"MAX(session_history.started)\"\n+            join = \"LEFT OUTER JOIN session_history ON users.user_id = session_history.user_id\"\n \n         monitor_db = database.MonitorDatabase()\n \n         try:\n             if str(user_id).isdigit():\n-                where = 'users.user_id = ?'\n+                where = \"users.user_id = ?\"\n                 args = [user_id]\n             elif user:\n-                where = 'users.username = ?'\n+                where = \"users.username = ?\"\n                 args = [user]\n             elif email:\n-                where = 'users.email = ?'\n+                where = \"users.email = ?\"\n                 args = [email]\n             else:\n-                raise Exception('Missing user_id, username, or email')\n-\n-            query = 'SELECT users.id AS row_id, users.user_id, username, friendly_name, ' \\\n-                    'thumb AS user_thumb, custom_avatar_url AS custom_thumb, ' \\\n-                    'email, is_active, is_admin, is_home_user, is_allow_sync, is_restricted, ' \\\n-                    'do_notify, keep_history, deleted_user, ' \\\n-                    'allow_guest, shared_libraries, %s AS last_seen ' \\\n-                    'FROM users %s ' \\\n-                    'WHERE %s COLLATE NOCASE' % (last_seen, join, where)\n+                raise Exception(\"Missing user_id, username, or email\")\n+\n+            query = \"SELECT users.id AS row_id, users.user_id, username, friendly_name, \" \\\n+                    \"thumb AS user_thumb, custom_avatar_url AS custom_thumb, \" \\\n+                    \"email, is_active, is_admin, is_home_user, is_allow_sync, is_restricted, \" \\\n+                    \"do_notify, keep_history, deleted_user, \" \\\n+                    \"allow_guest, shared_libraries, %s AS last_seen \" \\\n+                    \"FROM users %s \" \\\n+                    \"WHERE %s COLLATE NOCASE\" % (last_seen, join, where)\n             result = monitor_db.select(query, args=args)\n         except Exception as e:\n             logger.warn(\"Tautulli Users :: Unable to execute database query for get_user_details: %s.\" % e)\n@@ -531,22 +531,22 @@ def get_watch_time_stats(self, user_id=None, grouping=None, query_days=None):\n             try:\n                 if days > 0:\n                     if str(user_id).isdigit():\n-                        query = 'SELECT (SUM(stopped - started) - ' \\\n-                                '   SUM(CASE WHEN paused_counter IS NULL THEN 0 ELSE paused_counter END)) AS total_time, ' \\\n-                                'COUNT(DISTINCT %s) AS total_plays ' \\\n-                                'FROM session_history ' \\\n-                                'WHERE stopped >= %s ' \\\n-                                'AND user_id = ? ' % (group_by, timestamp_query)\n+                        query = \"SELECT (SUM(stopped - started) - \" \\\n+                                \"   SUM(CASE WHEN paused_counter IS NULL THEN 0 ELSE paused_counter END)) AS total_time, \" \\\n+                                \"COUNT(DISTINCT %s) AS total_plays \" \\\n+                                \"FROM session_history \" \\\n+                                \"WHERE stopped >= %s \" \\\n+                                \"AND user_id = ? \" % (group_by, timestamp_query)\n                         result = monitor_db.select(query, args=[user_id])\n                     else:\n                         result = []\n                 else:\n                     if str(user_id).isdigit():\n-                        query = 'SELECT (SUM(stopped - started) - ' \\\n-                                '   SUM(CASE WHEN paused_counter IS NULL THEN 0 ELSE paused_counter END)) AS total_time, ' \\\n-                                'COUNT(DISTINCT %s) AS total_plays ' \\\n-                                'FROM session_history ' \\\n-                                'WHERE user_id = ? ' % group_by\n+                        query = \"SELECT (SUM(stopped - started) - \" \\\n+                                \"   SUM(CASE WHEN paused_counter IS NULL THEN 0 ELSE paused_counter END)) AS total_time, \" \\\n+                                \"COUNT(DISTINCT %s) AS total_plays \" \\\n+                                \"FROM session_history \" \\\n+                                \"WHERE user_id = ? \" % group_by\n                         result = monitor_db.select(query, args=[user_id])\n                     else:\n                         result = []\n@@ -587,13 +587,13 @@ def get_player_stats(self, user_id=None, grouping=None):\n \n         try:\n             if str(user_id).isdigit():\n-                query = 'SELECT player, COUNT(DISTINCT %s) as total_plays, (SUM(stopped - started) - ' \\\n-                        'SUM(CASE WHEN paused_counter IS NULL THEN 0 ELSE paused_counter END)) AS total_time, ' \\\n-                        'platform ' \\\n-                        'FROM session_history ' \\\n-                        'WHERE user_id = ? ' \\\n-                        'GROUP BY player ' \\\n-                        'ORDER BY total_plays DESC, total_time DESC' % group_by\n+                query = \"SELECT player, COUNT(DISTINCT %s) as total_plays, (SUM(stopped - started) - \" \\\n+                        \"SUM(CASE WHEN paused_counter IS NULL THEN 0 ELSE paused_counter END)) AS total_time, \" \\\n+                        \"platform \" \\\n+                        \"FROM session_history \" \\\n+                        \"WHERE user_id = ? \" \\\n+                        \"GROUP BY player \" \\\n+                        \"ORDER BY total_plays DESC, total_time DESC\" % group_by\n                 result = monitor_db.select(query, args=[user_id])\n             else:\n                 result = []\n@@ -630,17 +630,17 @@ def get_recently_watched(self, user_id=None, limit='10'):\n \n         try:\n             if str(user_id).isdigit():\n-                query = 'SELECT session_history.id, session_history.media_type, guid, ' \\\n-                        'session_history.rating_key, session_history.parent_rating_key, session_history.grandparent_rating_key, ' \\\n-                        'title, parent_title, grandparent_title, original_title, ' \\\n-                        'thumb, parent_thumb, grandparent_thumb, media_index, parent_media_index, ' \\\n-                        'year, originally_available_at, added_at, live, started, user ' \\\n-                        'FROM session_history_metadata ' \\\n-                        'JOIN session_history ON session_history_metadata.id = session_history.id ' \\\n-                        'WHERE user_id = ? ' \\\n-                        'GROUP BY (CASE WHEN session_history.media_type = \"track\" THEN session_history.parent_rating_key ' \\\n-                        '   ELSE session_history.rating_key END) ' \\\n-                        'ORDER BY MAX(started) DESC LIMIT ?'\n+                query = \"SELECT session_history.id, session_history.media_type, guid, \" \\\n+                        \"session_history.rating_key, session_history.parent_rating_key, session_history.grandparent_rating_key, \" \\\n+                        \"title, parent_title, grandparent_title, original_title, \" \\\n+                        \"thumb, parent_thumb, grandparent_thumb, media_index, parent_media_index, \" \\\n+                        \"year, originally_available_at, added_at, live, started, user \" \\\n+                        \"FROM session_history_metadata \" \\\n+                        \"JOIN session_history ON session_history_metadata.id = session_history.id \" \\\n+                        \"WHERE user_id = ? \" \\\n+                        \"GROUP BY (CASE WHEN session_history.media_type = 'track' THEN session_history.parent_rating_key \" \\\n+                        \"   ELSE session_history.rating_key END) \" \\\n+                        \"ORDER BY MAX(started) DESC LIMIT ?\"\n                 result = monitor_db.select(query, args=[user_id, limit])\n             else:\n                 result = []\n@@ -683,11 +683,11 @@ def get_users(self):\n         monitor_db = database.MonitorDatabase()\n \n         try:\n-            query = 'SELECT id AS row_id, user_id, username, friendly_name, thumb, custom_avatar_url, email, ' \\\n-                    'is_active, is_admin, is_home_user, is_allow_sync, is_restricted, ' \\\n-                    'do_notify, keep_history, allow_guest, shared_libraries, ' \\\n-                    'filter_all, filter_movies, filter_tv, filter_music, filter_photos ' \\\n-                    'FROM users WHERE deleted_user = 0'\n+            query = \"SELECT id AS row_id, user_id, username, friendly_name, thumb, custom_avatar_url, email, \" \\\n+                    \"is_active, is_admin, is_home_user, is_allow_sync, is_restricted, \" \\\n+                    \"do_notify, keep_history, allow_guest, shared_libraries, \" \\\n+                    \"filter_all, filter_movies, filter_tv, filter_music, filter_photos \" \\\n+                    \"FROM users WHERE deleted_user = 0\"\n             result = monitor_db.select(query=query)\n         except Exception as e:\n             logger.warn(\"Tautulli Users :: Unable to execute database query for get_users: %s.\" % e)\n@@ -729,8 +729,8 @@ def delete(self, user_id=None, row_ids=None, purge_only=False):\n             row_ids = list(map(helpers.cast_to_int, row_ids.split(',')))\n \n             # Get the user_ids corresponding to the row_ids\n-            result = monitor_db.select('SELECT user_id FROM users '\n-                                       'WHERE id IN ({})'.format(','.join(['?'] * len(row_ids))), row_ids)\n+            result = monitor_db.select(\"SELECT user_id FROM users \"\n+                                       \"WHERE id IN ({})\".format(\",\".join([\"?\"] * len(row_ids))), row_ids)\n \n             success = []\n             for user in result:\n@@ -747,9 +747,9 @@ def delete(self, user_id=None, row_ids=None, purge_only=False):\n                 logger.info(\"Tautulli Users :: Deleting user with user_id %s from database.\"\n                             % user_id)\n                 try:\n-                    monitor_db.action('UPDATE users '\n-                                      'SET deleted_user = 1, keep_history = 0, do_notify = 0 '\n-                                      'WHERE user_id = ?', [user_id])\n+                    monitor_db.action(\"UPDATE users \"\n+                                      \"SET deleted_user = 1, keep_history = 0, do_notify = 0 \"\n+                                      \"WHERE user_id = ?\", [user_id])\n                     return delete_success\n                 except Exception as e:\n                     logger.warn(\"Tautulli Users :: Unable to execute database query for delete: %s.\" % e)\n@@ -762,25 +762,25 @@ def undelete(self, user_id=None, username=None):\n \n         try:\n             if user_id and str(user_id).isdigit():\n-                query = 'SELECT * FROM users WHERE user_id = ?'\n+                query = \"SELECT * FROM users WHERE user_id = ?\"\n                 result = monitor_db.select(query=query, args=[user_id])\n                 if result:\n                     logger.info(\"Tautulli Users :: Re-adding user with id %s to database.\" % user_id)\n-                    monitor_db.action('UPDATE users '\n-                                      'SET deleted_user = 0, keep_history = 1, do_notify = 1 '\n-                                      'WHERE user_id = ?', [user_id])\n+                    monitor_db.action(\"UPDATE users \"\n+                                      \"SET deleted_user = 0, keep_history = 1, do_notify = 1 \"\n+                                      \"WHERE user_id = ?\", [user_id])\n                     return True\n                 else:\n                     return False\n \n             elif username:\n-                query = 'SELECT * FROM users WHERE username = ?'\n+                query = \"SELECT * FROM users WHERE username = ?\"\n                 result = monitor_db.select(query=query, args=[username])\n                 if result:\n                     logger.info(\"Tautulli Users :: Re-adding user with username %s to database.\" % username)\n-                    monitor_db.action('UPDATE users '\n-                                      'SET deleted_user = 0, keep_history = 1, do_notify = 1 '\n-                                      'WHERE username = ?', [username])\n+                    monitor_db.action(\"UPDATE users \"\n+                                      \"SET deleted_user = 0, keep_history = 1, do_notify = 1 \"\n+                                      \"WHERE username = ?\", [username])\n                     return True\n                 else:\n                     return False\n@@ -793,7 +793,7 @@ def get_user_id(self, user=None):\n         if user:\n             try:\n                 monitor_db = database.MonitorDatabase()\n-                query = 'SELECT user_id FROM users WHERE username = ?'\n+                query = \"SELECT user_id FROM users WHERE username = ?\"\n                 result = monitor_db.select_single(query, args=[user])\n                 if result:\n                     return result['user_id']\n@@ -809,14 +809,14 @@ def get_user_names(self, kwargs=None):\n \n         user_cond = ''\n         if session.get_session_user_id():\n-            user_cond = 'AND user_id = %s ' % session.get_session_user_id()\n+            user_cond = \"AND user_id = %s \" % session.get_session_user_id()\n \n         try:\n-            query = 'SELECT user_id, ' \\\n-                    '(CASE WHEN users.friendly_name IS NULL OR TRIM(users.friendly_name) = \"\" \\\n-                    THEN users.username ELSE users.friendly_name END) AS friendly_name ' \\\n-                    'FROM users ' \\\n-                    'WHERE deleted_user = 0 %s' % user_cond\n+            query = \"SELECT user_id, \" \\\n+                    \"(CASE WHEN users.friendly_name IS NULL OR TRIM(users.friendly_name) = '' \\\n+                    THEN users.username ELSE users.friendly_name END) AS friendly_name \" \\\n+                    \"FROM users \" \\\n+                    \"WHERE deleted_user = 0 %s\" % user_cond\n \n             result = monitor_db.select(query)\n         except Exception as e:\n@@ -835,8 +835,8 @@ def get_tokens(self, user_id=None):\n         if user_id:\n             try:\n                 monitor_db = database.MonitorDatabase()\n-                query = 'SELECT allow_guest, user_token, server_token FROM users ' \\\n-                        'WHERE user_id = ? AND deleted_user = 0'\n+                query = \"SELECT allow_guest, user_token, server_token FROM users \" \\\n+                        \"WHERE user_id = ? AND deleted_user = 0\"\n                 result = monitor_db.select_single(query, args=[user_id])\n                 if result:\n                     tokens = {'allow_guest': result['allow_guest'],\n@@ -857,8 +857,8 @@ def get_filters(self, user_id=None):\n \n         try:\n             monitor_db = database.MonitorDatabase()\n-            query = 'SELECT filter_all, filter_movies, filter_tv, filter_music, filter_photos FROM users ' \\\n-                    'WHERE user_id = ?'\n+            query = \"SELECT filter_all, filter_movies, filter_tv, filter_music, filter_photos FROM users \" \\\n+                    \"WHERE user_id = ?\"\n             result = monitor_db.select_single(query, args=[user_id])\n         except Exception as e:\n             logger.warn(\"Tautulli Users :: Unable to execute database query for get_filters: %s.\" % e)\n@@ -907,8 +907,8 @@ def set_user_login(self, user_id=None, user=None, user_group=None, ip_address=No\n \n     def get_user_login(self, jwt_token):\n         monitor_db = database.MonitorDatabase()\n-        result = monitor_db.select_single('SELECT * FROM user_login '\n-                                          'WHERE jwt_token = ?',\n+        result = monitor_db.select_single(\"SELECT * FROM user_login \"\n+                                          \"WHERE jwt_token = ?\",\n                                           [jwt_token])\n         return result\n \n@@ -918,8 +918,8 @@ def clear_user_login_token(self, jwt_token=None, row_ids=None):\n         if jwt_token:\n             logger.debug(\"Tautulli Users :: Clearing user JWT token.\")\n             try:\n-                monitor_db.action('UPDATE user_login SET jwt_token = NULL '\n-                                  'WHERE jwt_token = ?',\n+                monitor_db.action(\"UPDATE user_login SET jwt_token = NULL \"\n+                                  \"WHERE jwt_token = ?\",\n                                   [jwt_token])\n             except Exception as e:\n                 logger.error(\"Tautulli Users :: Unable to clear user JWT token: %s.\", e)\n@@ -929,8 +929,8 @@ def clear_user_login_token(self, jwt_token=None, row_ids=None):\n             row_ids = list(map(helpers.cast_to_int, row_ids.split(',')))\n             logger.debug(\"Tautulli Users :: Clearing JWT tokens for row_ids %s.\", row_ids)\n             try:\n-                monitor_db.action('UPDATE user_login SET jwt_token = NULL '\n-                                  'WHERE id in ({})'.format(','.join(['?'] * len(row_ids))),\n+                monitor_db.action(\"UPDATE user_login SET jwt_token = NULL \"\n+                                  \"WHERE id in ({})\".format(\",\".join([\"?\"] * len(row_ids))),\n                                   row_ids)\n             except Exception as e:\n                 logger.error(\"Tautulli Users :: Unable to clear JWT tokens: %s.\", e)\n@@ -954,19 +954,19 @@ def get_datatables_user_login(self, user_id=None, jwt_token=None, kwargs=None):\n         else:\n             custom_where = [['user_login.user_id', user_id]] if user_id else []\n \n-        columns = ['user_login.id AS row_id',\n-                   'user_login.timestamp',\n-                   'user_login.user_id',\n-                   'user_login.user',\n-                   'user_login.user_group',\n-                   'user_login.ip_address',\n-                   'user_login.host',\n-                   'user_login.user_agent',\n-                   'user_login.success',\n-                   'user_login.expiry',\n-                   'user_login.jwt_token',\n-                   '(CASE WHEN users.friendly_name IS NULL OR TRIM(users.friendly_name) = \"\" \\\n-                    THEN users.username ELSE users.friendly_name END) AS friendly_name'\n+        columns = [\"user_login.id AS row_id\",\n+                   \"user_login.timestamp\",\n+                   \"user_login.user_id\",\n+                   \"user_login.user\",\n+                   \"user_login.user_group\",\n+                   \"user_login.ip_address\",\n+                   \"user_login.host\",\n+                   \"user_login.user_agent\",\n+                   \"user_login.success\",\n+                   \"user_login.expiry\",\n+                   \"user_login.jwt_token\",\n+                   \"(CASE WHEN users.friendly_name IS NULL OR TRIM(users.friendly_name) = '' \\\n+                    THEN users.username ELSE users.friendly_name END) AS friendly_name\"\n                    ]\n \n         try:"}, {"sha": "119e0b0795122ec3abbb48a3fc654fe7e12f1eec", "filename": "plexpy/version.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Tautulli/Tautulli/blob/ea6c6078df410f333a060016dfce18c21ad134c9/plexpy%2Fversion.py", "raw_url": "https://github.com/Tautulli/Tautulli/raw/ea6c6078df410f333a060016dfce18c21ad134c9/plexpy%2Fversion.py", "contents_url": "https://api.github.com/repos/Tautulli/Tautulli/contents/plexpy%2Fversion.py?ref=ea6c6078df410f333a060016dfce18c21ad134c9", "patch": "@@ -18,4 +18,4 @@\n from __future__ import unicode_literals\n \n PLEXPY_BRANCH = \"master\"\n-PLEXPY_RELEASE_VERSION = \"v2.12.3\"\n\\ No newline at end of file\n+PLEXPY_RELEASE_VERSION = \"v2.12.4\"\n\\ No newline at end of file"}, {"sha": "d105a8c2ef9ef2db951a40a42e71fadc7878ac8d", "filename": "plexpy/webauth.py", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Tautulli/Tautulli/blob/ea6c6078df410f333a060016dfce18c21ad134c9/plexpy%2Fwebauth.py", "raw_url": "https://github.com/Tautulli/Tautulli/raw/ea6c6078df410f333a060016dfce18c21ad134c9/plexpy%2Fwebauth.py", "contents_url": "https://api.github.com/repos/Tautulli/Tautulli/contents/plexpy%2Fwebauth.py?ref=ea6c6078df410f333a060016dfce18c21ad134c9", "patch": "@@ -99,7 +99,7 @@ def plex_user_login(token=None, headers=None):\n             try:\n                 logger.debug(\"Tautulli WebAuth :: Registering token for user '%s' in the database.\"\n                              % user_details['username'])\n-                result = monitor_db.action('UPDATE users SET server_token = ? WHERE user_id = ?',\n+                result = monitor_db.action(\"UPDATE users SET server_token = ? WHERE user_id = ?\",\n                                            [server_token, user_details['user_id']])\n \n                 if result:\n@@ -246,12 +246,12 @@ def check():\n \n def check_rate_limit(ip_address):\n     monitor_db = MonitorDatabase()\n-    result = monitor_db.select('SELECT timestamp, success FROM user_login '\n-                               'WHERE ip_address = ? '\n-                               'AND timestamp >= ( '\n-                               'SELECT CASE WHEN MAX(timestamp) IS NULL THEN 0 ELSE MAX(timestamp) END '\n-                               'FROM user_login WHERE ip_address = ? AND success = 1) '\n-                               'ORDER BY timestamp DESC',\n+    result = monitor_db.select(\"SELECT timestamp, success FROM user_login \"\n+                               \"WHERE ip_address = ? \"\n+                               \"AND timestamp >= ( \"\n+                               \"SELECT CASE WHEN MAX(timestamp) IS NULL THEN 0 ELSE MAX(timestamp) END \"\n+                               \"FROM user_login WHERE ip_address = ? AND success = 1) \"\n+                               \"ORDER BY timestamp DESC\",\n                                [ip_address, ip_address])\n \n     try:"}, {"sha": "88b651744720ae11e168c43221c16ab97cff73a6", "filename": "plexpy/webserve.py", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Tautulli/Tautulli/blob/ea6c6078df410f333a060016dfce18c21ad134c9/plexpy%2Fwebserve.py", "raw_url": "https://github.com/Tautulli/Tautulli/raw/ea6c6078df410f333a060016dfce18c21ad134c9/plexpy%2Fwebserve.py", "contents_url": "https://api.github.com/repos/Tautulli/Tautulli/contents/plexpy%2Fwebserve.py?ref=ea6c6078df410f333a060016dfce18c21ad134c9", "patch": "@@ -7057,9 +7057,7 @@ def export_metadata(self, section_id=None, user_id=None, rating_key=None, file_f\n \n             Returns:\n                 json:\n-                    {\"result\": \"success\",\n-                     \"message\": \"Metadata export has started.\"\n-                     }\n+                    {\"export_id\": 1}\n             ```\n         \"\"\"\n         individual_files = helpers.bool_true(individual_files)\n@@ -7075,8 +7073,8 @@ def export_metadata(self, section_id=None, user_id=None, rating_key=None, file_f\n                                  export_type=export_type,\n                                  individual_files=individual_files).export()\n \n-        if result is True:\n-            return {'result': 'success', 'message': 'Metadata export has started.'}\n+        if isinstance(result, int):\n+            return {'result': 'success', 'message': 'Metadata export has started.', 'export_id': result}\n         else:\n             return {'result': 'error', 'message': result}\n "}]}, "_cache_time": 1684958304, "_release_version": "v2.12.3"}